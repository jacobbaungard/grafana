{"version":3,"file":"6934.bd0f7d41ef9ba8c1d9aa.js","mappings":"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CACA,gDACA,gDACA,wBACA,kCACA,kDACA,yBACA,uCACA,mDACA,2CACA,2CACA,wDACA,wDACA,yDACA,yDACA,kCACA,4BACA,8BACA,4CACA,uCACA,gDACA,kCACA,wCACA,0BACA,oCACA,4CACA,4DACA,sCACA,kDACA,wCACA,8CACA,8CACA,iDACA,yCACA,6CACA,kCACA,8CACA,8BACA,2CACA,yCACA,sCACA,kCACA,uCACA,mCACA,wCACA,+BACA,iCACA,uCACA,+BACA,4CACA,2CACA,oCACA,sCACA,4BACA,yCACA,+CACA,yCACA,wCACA,qCACA,gCACA,8CACA,8BACA,yCACA,sCACA,iCACA,wCACA,oCACA,mCACA,6BACA,8BACA,gCACA,yCACA,+BACA,oCACA,oDACA,mDACA,oDACA,qCACA,uDACA,2CACA,kDACA,uCACA,gCACA,+BACA,4BACA,iCACA,4BACA,yCACA,+CACA,2BACA,iDACA,4BACA,+CACA,+DACA,2EACA,kDACA,oDACA,gDACA,0BACA,gCACA,2CACA,mDACA,iCACA,iDACA,gDACA,kDACA,uEACA,6BACA,gDACA,wDACA,wCACA,mCACA,iCACA,gCACA,0CACA,iCACA,6BACA,yCACA,kDACA,yCACA,sCACA,+BACA,kCACA,gCACA,sCACA,8CACA,6CACA,oCACA,uDACA,mCACA,oCACA,qCACA,wCACA,sCACA,qCACA,2CACA,gCACA,2CACA,oCACA,mCACA,gCACA,4CACA,2CACA,kCACA,2CACA,mDACA,yDACA,2CACA,2CACA,oCACA,kCACA,gCACA,8BACA,6BACA,oCACA,2BACA,wCACA,6BACA,oCACA,6BACA,oCACA,kCACA,wCACA,0DACA,kCACA,2CACA,iDACA,mCACA,4CACA,qCACA,8CACA,iCACA,iCACA,kCACA,qCACA,kCACA,oCACA,iDACA,iDACA,8DACA,kDACA,iDACA,kDACA,iCACA,wCACA,gCACA,uCACA,4CACA,sCACA,0CACA,+BACA,4CACA,0CACA,0CACA,wCACA,4CACA,yDACA,8CACA,iDACA,8BACA,oCACA,mDACA,gDACA,4BACA,sBACA,4BACA,4BACA,mCACA,4BACA,+CACA,+CACA,8CACF,EC5nBaC,GAAoB,CAC/B,+BACA,kCACA,2BACA,qCACA,qCACA,kCACA,iDACA,+BACA,6CACA,0CACA,mDACA,oDACA,qDACA,8BACA,4DACA,gCACA,+BACA,yCACA,oCACA,mCACA,wBACA,kCACA,kDACA,yBACA,mCACA,uCACA,2CACA,iDACA,2CACA,uCACA,gDACA,0BACA,oCACA,4CACA,sCACA,8CACA,8CACA,yCACA,6CACA,kCACA,8CACA,2CACA,8BACA,2CACA,kCACA,yCACA,sCACA,kCACA,uCACA,mCACA,+BACA,iCACA,uCACA,+BACA,4CACA,2CACA,oCACA,sCACA,oDACA,4CACA,+CACA,6CACA,+CACA,4BACA,yCACA,+CACA,yCACA,wCACA,8BACA,wCACA,oCACA,mCACA,6BACA,8BACA,gCACA,iDACA,yCACA,+BACA,oCACA,oDACA,mDACA,uCACA,gCACA,yBACA,+BACA,iCACA,4BACA,yCACA,2BACA,sCACA,sCACA,iDACA,4BACA,+CACA,gCACA,2CACA,mDACA,iCACA,gDACA,wDACA,wCACA,mCACA,iCACA,gCACA,6BACA,yCACA,yCACA,sCACA,+BACA,kCACA,gCACA,sCACA,0CACA,8CACA,6CACA,oCACA,uDACA,mCACA,qCACA,wCACA,sCACA,2CACA,2CACA,oCACA,gCACA,mDACA,wCACA,yDACA,6CACA,2CACA,2CACA,oCACA,4BACA,uCACA,wCACA,6BACA,oCACA,6BACA,oCACA,mDACA,kCACA,yCACA,sCACA,kCACA,mCACA,qCACA,iCACA,iCACA,2CACA,kCACA,qCACA,oCACA,iDACA,iDACA,kDACA,kDACA,gCACA,4CACA,0CACA,+BACA,4CACA,0CACA,0CACA,wCACA,4CACA,yDACA,kCACA,8CACA,oCACA,gDACA,4BACA,sBACA,2BACF,ECrLM,GAAa7c,IAA0B,CAC3C,gBAAc,OAAI,CAAE,QAAS,OAAQ,UAAWA,EAAM,QAAQ,CAAC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","sources":["webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/EditorHeader.js","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/InlineSelect.js","webpack://grafana/./public/app/plugins/datasource/azuremonitor/time_grain_converter.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azure_monitor/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/utils/common.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/dataquery.gen.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/types/types.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/credentials.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/e2e/selectors.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/DefaultSubscription.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MonitorConfig.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/utils/messageFromError.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/utils/useLastError.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ArgQueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/Field.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ArgQueryEditor/SubscriptionField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ArgQueryEditor/ArgQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/FormatAsField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/AdvancedMulti.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/types.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/EntryIcon.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/styles.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/NestedEntry.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azure_monitor/url_builder.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/utils.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/NestedRow.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/Search.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourcePicker/ResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/ResourceField/ResourceField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/AdvancedResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/TimeManagement.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/useMigrations.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/RawQuery.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/syntax.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/AzureCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/LogsQueryEditor/AzureCheatSheetModal.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azureMetadata/resourceTypes.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azureMetadata/logsResourceTypes.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/AdvancedResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/AggregationField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/DimensionFields.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/LegendFormatField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/MetricNameField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/MetricNamespaceField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/TimeGrainField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/TopField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/utils/useAsyncState.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/dataHooks.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/TracesQueryEditor/Filter.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/TracesQueryEditor/consts.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/TracesQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/TracesQueryEditor/Filters.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/TracesQueryEditor/TraceTypeField.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/TracesQueryEditor/TracesQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/utils/migrateQuery.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/QueryEditor/usePreparedQuery.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azure_log_analytics/utils.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azure_log_analytics/azure_log_analytics_datasource.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azure_monitor/azure_monitor_datasource.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/azure_resource_graph/azure_resource_graph_datasource.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/resourcePicker/resourcePickerData.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/utils/migrateAnnotation.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/grafanaTemplateVariableFns.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/VariableEditor/GrafanaTemplateVariableFn.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/components/VariableEditor/VariableEditor.tsx","webpack://grafana/./public/app/plugins/datasource/azuremonitor/variables.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/datasource.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/tracking.ts","webpack://grafana/./public/app/plugins/datasource/azuremonitor/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React__default from 'react';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import { css, cx } from '@emotion/css';\nimport React__default, { useState } from 'react';\nimport { useStyles2, Select, SelectContainer as SelectContainer$1 } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction InlineSelect(_a) {\n  var _b = _a, { label: labelProp } = _b, props = __objRest(_b, [\"label\"]);\n  const styles = useStyles2(getSelectStyles);\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, labelProp && /* @__PURE__ */ React__default.createElement(\"label\", { className: styles.label, htmlFor: id }, labelProp, \":\", \"\\xA0\"), /* @__PURE__ */ React__default.createElement(Select, __spreadProps(__spreadValues({ openMenuOnFocus: true, inputId: id }, props), { components })));\n}\nconst SelectContainer = (props) => {\n  const { children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(SelectContainer$1, __spreadProps(__spreadValues({}, props), { className: cx(props.className, styles.container) }), children);\n};\nconst ValueContainer = (props) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(className, styles.valueContainer) }, children);\n};\nconst getSelectStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    fontSize: 12,\n    alignItems: \"center\"\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: \"nowrap\"\n  }),\n  container: css({\n    background: \"none\",\n    borderColor: \"transparent\"\n  }),\n  valueContainer: css({\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"initial\",\n    color: theme.colors.text.secondary,\n    fontSize: 12\n  })\n});\n\nexport { InlineSelect };\n//# sourceMappingURL=InlineSelect.js.map\n","import { includes, filter } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: string) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval: string, allowedTimeGrains: string[]) {\n    const timeGrains = filter(allowedTimeGrains, (o) => o !== 'auto');\n\n    let closest = timeGrains[0];\n    const intervalMs = rangeUtil.intervalToMs(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > rangeUtil.intervalToMs(timeGrains[i])) {\n        if (i + 1 < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') {\n      text = 'second';\n    }\n    if (unit === 'M') {\n      text = 'minute';\n    }\n    if (unit === 'H') {\n      text = 'hour';\n    }\n    if (unit === 'D') {\n      text = 'day';\n    }\n\n    if (value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n    if (unit === 'S') {\n      return 's';\n    }\n    if (unit === 'M') {\n      return 'm';\n    }\n    if (unit === 'H') {\n      return 'h';\n    }\n    if (unit === 'D') {\n      return 'd';\n    }\n\n    return '';\n  }\n}\n","import { find, get } from 'lodash';\n\nimport { FetchResponse } from '@grafana/runtime';\n\nimport TimeGrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorLocalizedValue,\n  AzureMonitorLocations,\n  AzureMonitorMetricAvailabilityMetadata,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorOption,\n  AzureAPIResponse,\n  Location,\n  Subscription,\n  Resource,\n} from '../types';\nexport default class ResponseParser {\n  static parseResponseValues<T>(\n    result: AzureAPIResponse<T>,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        const value = get(result.value[i], valueFieldName);\n        const text = get(result.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(\n    result: AzureAPIResponse<Resource>,\n    metricNamespace?: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (\n        typeof result.value[i].type === 'string' &&\n        (!metricNamespace || result.value[i].type.toLocaleLowerCase() === metricNamespace.toLocaleLowerCase())\n      ) {\n        list.push({\n          text: result.value[i].name,\n          value: result.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: AzureMonitorMetricsMetadataResponse, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n    const metricData = result?.value.find((v) => v.name.value === metricName);\n\n    if (!metricData) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n\n      supportedTimeGrains: [\n        { label: 'Auto', value: 'auto' },\n        ...ResponseParser.parseTimeGrains(metricData.metricAvailabilities ?? []),\n      ],\n      dimensions: ResponseParser.parseDimensions(metricData.dimensions ?? []),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: AzureMonitorMetricAvailabilityMetadata[]): AzureMonitorOption[] {\n    const timeGrains: AzureMonitorOption[] = [];\n\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach((avail) => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          label: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n\n    return timeGrains;\n  }\n\n  static parseDimensions(metadataDimensions: AzureMonitorLocalizedValue[]) {\n    return metadataDimensions.map((dimension) => {\n      return {\n        label: dimension.localizedValue || dimension.value,\n        value: dimension.value,\n      };\n    });\n  }\n\n  static parseSubscriptions(result: AzureAPIResponse<Subscription>): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(\n    result?: FetchResponse<AzureAPIResponse<Subscription>>\n  ): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${get(result.data.value[i], textFieldName)} - ${get(result.data.value[i], valueFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseLocations(result: AzureAPIResponse<Location>) {\n    const locations: AzureMonitorLocations[] = [];\n\n    if (!result) {\n      return locations;\n    }\n\n    for (const location of result.value) {\n      locations.push({ name: location.name, displayName: location.displayName, supportsLogs: undefined });\n    }\n\n    return locations;\n  }\n}\n","import { map } from 'lodash';\n\nimport { SelectableValue, VariableWithMultiSupport } from '@grafana/data';\n\nimport { AzureMonitorOption, VariableOptionGroup } from '../types';\n\nexport const hasOption = (options: AzureMonitorOption[], value: string): boolean =>\n  options.some((v) => (v.options ? hasOption(v.options, value) : v.value === value));\n\nexport const findOptions = (options: AzureMonitorOption[], values: string[] = []) => {\n  if (values.length === 0) {\n    return [];\n  }\n  const set = values.reduce((accum, item) => {\n    accum.add(item);\n    return accum;\n  }, new Set());\n  return options.filter((option) => set.has(option.value));\n};\n\nexport const toOption = (v: { text: string; value: string }) => ({ value: v.value, label: v.text });\n\nexport const addValueToOptions = (\n  values: Array<AzureMonitorOption | SelectableValue>,\n  variableOptionGroup: VariableOptionGroup,\n  value?: string\n) => {\n  const options = [...values, variableOptionGroup];\n\n  const optionValues = values.map((m) => m.value.toLowerCase()).concat(variableOptionGroup.options.map((p) => p.value));\n  if (value && !optionValues.includes(value.toLowerCase())) {\n    options.push({ label: value, value });\n  }\n\n  return options;\n};\n\n// Route definitions shared with the backend.\n// Check: /pkg/tsdb/azuremonitor/azuremonitor-resource-handler.go <registerRoutes>\nexport const routeNames = {\n  azureMonitor: 'azuremonitor',\n  logAnalytics: 'loganalytics',\n  appInsights: 'appinsights',\n  resourceGraph: 'resourcegraph',\n};\n\nexport function interpolateVariable(\n  value: string | number | Array<string | number>,\n  variable: VariableWithMultiSupport\n) {\n  if (typeof value === 'string') {\n    // When enabling multiple responses, quote the value to mimic the array result below\n    // even if only one response is selected. This does not apply if only the \"include all\"\n    // option is enabled but with a custom value.\n    if (variable.multi || (variable.includeAll && !variable.allValue)) {\n      return \"'\" + value + \"'\";\n    } else {\n      return value;\n    }\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  const quotedValues = map(value, (val) => {\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    return \"'\" + val + \"'\";\n  });\n  return quotedValues.join(',');\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface AzureMonitorQuery extends common.DataQuery {\n  /**\n   * Azure Monitor Logs sub-query properties.\n   */\n  azureLogAnalytics?: AzureLogsQuery;\n  /**\n   * Azure Monitor Metrics sub-query properties.\n   */\n  azureMonitor?: AzureMetricQuery;\n  /**\n   * Azure Resource Graph sub-query properties.\n   */\n  azureResourceGraph?: AzureResourceGraphQuery;\n  /**\n   * Application Insights Traces sub-query properties.\n   */\n  azureTraces?: AzureTracesQuery;\n  /**\n   * @deprecated Legacy template variable support.\n   */\n  grafanaTemplateVariableFn?: GrafanaTemplateVariableQuery;\n  namespace?: string;\n  /**\n   * Azure Monitor query type.\n   * queryType: #AzureQueryType\n   */\n  region?: string;\n  resource?: string;\n  /**\n   * Template variables params. These exist for backwards compatiblity with legacy template variables.\n   */\n  resourceGroup?: string;\n  /**\n   * Azure subscription containing the resource(s) to be queried.\n   */\n  subscription?: string;\n  /**\n   * Subscriptions to be queried via Azure Resource Graph.\n   */\n  subscriptions?: Array<string>;\n}\n\nexport const defaultAzureMonitorQuery: Partial<AzureMonitorQuery> = {\n  subscriptions: [],\n};\n\n/**\n * Defines the supported queryTypes. GrafanaTemplateVariableFn is deprecated\n */\nexport enum AzureQueryType {\n  AzureMonitor = 'Azure Monitor',\n  AzureResourceGraph = 'Azure Resource Graph',\n  AzureTraces = 'Azure Traces',\n  GrafanaTemplateVariableFn = 'Grafana Template Variable Function',\n  LocationsQuery = 'Azure Regions',\n  LogAnalytics = 'Azure Log Analytics',\n  MetricNamesQuery = 'Azure Metric Names',\n  NamespacesQuery = 'Azure Namespaces',\n  ResourceGroupsQuery = 'Azure Resource Groups',\n  ResourceNamesQuery = 'Azure Resource Names',\n  SubscriptionsQuery = 'Azure Subscriptions',\n  WorkspacesQuery = 'Azure Workspaces',\n}\n\nexport interface AzureMetricQuery {\n  /**\n   * The aggregation to be used within the query. Defaults to the primaryAggregationType defined by the metric.\n   */\n  aggregation?: string;\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{ resourceGroup }}. See docs for more detail.\n   */\n  alias?: string;\n  /**\n   * Time grains that are supported by the metric.\n   */\n  allowedTimeGrainsMs?: Array<number>;\n  /**\n   * Used as the value for the metricNamespace property when it's different from the resource namespace.\n   */\n  customNamespace?: string;\n  /**\n   * @deprecated This property was migrated to dimensionFilters and should only be accessed in the migration\n   */\n  dimension?: string;\n  /**\n   * @deprecated This property was migrated to dimensionFilters and should only be accessed in the migration\n   */\n  dimensionFilter?: string;\n  /**\n   * Filters to reduce the set of data returned. Dimensions that can be filtered on are defined by the metric.\n   */\n  dimensionFilters?: Array<AzureMetricDimension>;\n  /**\n   * @deprecated Use metricNamespace instead\n   */\n  metricDefinition?: string;\n  /**\n   * The metric to query data for within the specified metricNamespace. e.g. UsedCapacity\n   */\n  metricName?: string;\n  /**\n   * metricNamespace is used as the resource type (or resource namespace).\n   * It's usually equal to the target metric namespace. e.g. microsoft.storage/storageaccounts\n   * Kept the name of the variable as metricNamespace to avoid backward incompatibility issues.\n   */\n  metricNamespace?: string;\n  /**\n   * The Azure region containing the resource(s).\n   */\n  region?: string;\n  /**\n   * @deprecated Use resources instead\n   */\n  resourceGroup?: string;\n  /**\n   * @deprecated Use resources instead\n   */\n  resourceName?: string;\n  /**\n   * @deprecated Use resourceGroup, resourceName and metricNamespace instead\n   */\n  resourceUri?: string;\n  /**\n   * Array of resource URIs to be queried.\n   */\n  resources?: Array<AzureMonitorResource>;\n  /**\n   * The granularity of data points to be queried. Defaults to auto.\n   */\n  timeGrain?: string;\n  /**\n   * @deprecated\n   */\n  timeGrainUnit?: string;\n  /**\n   * Maximum number of records to return. Defaults to 10.\n   */\n  top?: string;\n}\n\nexport const defaultAzureMetricQuery: Partial<AzureMetricQuery> = {\n  allowedTimeGrainsMs: [],\n  dimensionFilters: [],\n  resources: [],\n};\n\n/**\n * Azure Monitor Logs sub-query properties\n */\nexport interface AzureLogsQuery {\n  /**\n   * If set to true the dashboard time range will be used as a filter for the query. Otherwise the query time ranges will be used. Defaults to false.\n   */\n  dashboardTime?: boolean;\n  /**\n   * @deprecated Use dashboardTime instead\n   */\n  intersectTime?: boolean;\n  /**\n   * KQL query to be executed.\n   */\n  query?: string;\n  /**\n   * @deprecated Use resources instead\n   */\n  resource?: string;\n  /**\n   * Array of resource URIs to be queried.\n   */\n  resources?: Array<string>;\n  /**\n   * Specifies the format results should be returned as.\n   */\n  resultFormat?: ResultFormat;\n  /**\n   * If dashboardTime is set to true this value dictates which column the time filter will be applied to. Defaults to the first tables timeSpan column, the first datetime column found, or TimeGenerated\n   */\n  timeColumn?: string;\n  /**\n   * Workspace ID. This was removed in Grafana 8, but remains for backwards compat.\n   */\n  workspace?: string;\n}\n\nexport const defaultAzureLogsQuery: Partial<AzureLogsQuery> = {\n  resources: [],\n};\n\n/**\n * Application Insights Traces sub-query properties\n */\nexport interface AzureTracesQuery {\n  /**\n   * Filters for property values.\n   */\n  filters?: Array<AzureTracesFilter>;\n  /**\n   * Operation ID. Used only for Traces queries.\n   */\n  operationId?: string;\n  /**\n   * KQL query to be executed.\n   */\n  query?: string;\n  /**\n   * Array of resource URIs to be queried.\n   */\n  resources?: Array<string>;\n  /**\n   * Specifies the format results should be returned as.\n   */\n  resultFormat?: ResultFormat;\n  /**\n   * Types of events to filter by.\n   */\n  traceTypes?: Array<string>;\n}\n\nexport const defaultAzureTracesQuery: Partial<AzureTracesQuery> = {\n  filters: [],\n  resources: [],\n  traceTypes: [],\n};\n\nexport interface AzureTracesFilter {\n  /**\n   * Values to filter by.\n   */\n  filters: Array<string>;\n  /**\n   * Comparison operator to use. Either equals or not equals.\n   */\n  operation: string;\n  /**\n   * Property name, auto-populated based on available traces.\n   */\n  property: string;\n}\n\nexport const defaultAzureTracesFilter: Partial<AzureTracesFilter> = {\n  filters: [],\n};\n\nexport enum ResultFormat {\n  Logs = 'logs',\n  Table = 'table',\n  TimeSeries = 'time_series',\n  Trace = 'trace',\n}\n\nexport interface AzureResourceGraphQuery {\n  /**\n   * Azure Resource Graph KQL query to be executed.\n   */\n  query?: string;\n  /**\n   * Specifies the format results should be returned as. Defaults to table.\n   */\n  resultFormat?: string;\n}\n\nexport interface AzureMonitorResource {\n  metricNamespace?: string;\n  region?: string;\n  resourceGroup?: string;\n  resourceName?: string;\n  subscription?: string;\n}\n\nexport interface AzureMetricDimension {\n  /**\n   * Name of Dimension to be filtered on.\n   */\n  dimension?: string;\n  /**\n   * @deprecated filter is deprecated in favour of filters to support multiselect.\n   */\n  filter?: string;\n  /**\n   * Values to match with the filter.\n   */\n  filters?: Array<string>;\n  /**\n   * String denoting the filter operation. Supports 'eq' - equals,'ne' - not equals, 'sw' - starts with. Note that some dimensions may not support all operators.\n   */\n  operator?: string;\n}\n\nexport const defaultAzureMetricDimension: Partial<AzureMetricDimension> = {\n  filters: [],\n};\n\nexport type GrafanaTemplateVariableQueryType = ('AppInsightsMetricNameQuery' | 'AppInsightsGroupByQuery' | 'SubscriptionsQuery' | 'ResourceGroupsQuery' | 'ResourceNamesQuery' | 'MetricNamespaceQuery' | 'MetricNamesQuery' | 'WorkspacesQuery' | 'UnknownQuery');\n\nexport interface BaseGrafanaTemplateVariableQuery {\n  rawQuery?: string;\n}\n\nexport interface UnknownQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'UnknownQuery';\n}\n\nexport interface AppInsightsMetricNameQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'AppInsightsMetricNameQuery';\n}\n\nexport interface AppInsightsGroupByQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'AppInsightsGroupByQuery';\n  metricName: string;\n}\n\nexport interface SubscriptionsQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'SubscriptionsQuery';\n}\n\nexport interface ResourceGroupsQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'ResourceGroupsQuery';\n  subscription: string;\n}\n\nexport interface ResourceNamesQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'ResourceNamesQuery';\n  metricNamespace: string;\n  resourceGroup: string;\n  subscription: string;\n}\n\nexport interface MetricNamespaceQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'MetricNamespaceQuery';\n  metricNamespace?: string;\n  resourceGroup: string;\n  resourceName?: string;\n  subscription: string;\n}\n\n/**\n * @deprecated Use MetricNamespaceQuery instead\n */\nexport interface MetricDefinitionsQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'MetricDefinitionsQuery';\n  metricNamespace?: string;\n  resourceGroup: string;\n  resourceName?: string;\n  subscription: string;\n}\n\nexport interface MetricNamesQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'MetricNamesQuery';\n  metricNamespace: string;\n  resourceGroup: string;\n  resourceName: string;\n  subscription: string;\n}\n\nexport interface WorkspacesQuery extends BaseGrafanaTemplateVariableQuery {\n  kind: 'WorkspacesQuery';\n  subscription: string;\n}\n\nexport type GrafanaTemplateVariableQuery = (AppInsightsMetricNameQuery | AppInsightsGroupByQuery | SubscriptionsQuery | ResourceGroupsQuery | ResourceNamesQuery | MetricNamespaceQuery | MetricDefinitionsQuery | MetricNamesQuery | WorkspacesQuery | UnknownQuery);\n\nexport interface AzureMonitor {}\n","import { ScalarParameter, TabularParameter, Function } from '@kusto/monaco-kusto';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourceSettings,\n  PanelData,\n  SelectableValue,\n  TimeRange,\n} from '@grafana/data';\n\nimport Datasource from '../datasource';\n\nimport { AzureLogAnalyticsMetadataTable } from './logAnalyticsMetadata';\nimport { AzureMonitorQuery, ResultFormat } from './query';\n\nexport type AzureDataSourceSettings = DataSourceSettings<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\nexport type AzureDataSourceInstanceSettings = DataSourceInstanceSettings<AzureDataSourceJsonData>;\n\nexport interface DatasourceValidationResult {\n  status: 'success' | 'error';\n  message: string;\n  title?: string;\n}\n\n/**\n * Azure clouds known to Azure Monitor.\n */\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  None = '',\n}\n\nexport type AzureAuthType = 'msi' | 'clientsecret' | 'workloadidentity';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureWorkloadIdentityCredentials extends AzureCredentialsBase {\n  authType: 'workloadidentity';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials =\n  | AzureManagedIdentityCredentials\n  | AzureClientSecretCredentials\n  | AzureWorkloadIdentityCredentials;\n\nexport interface AzureDataSourceJsonData extends DataSourceJsonData {\n  cloudName: string;\n  azureAuthType?: AzureAuthType;\n\n  // monitor\n  tenantId?: string;\n  clientId?: string;\n  subscriptionId?: string;\n\n  // logs\n  /** @deprecated Azure Logs credentials */\n  azureLogAnalyticsSameAs?: boolean;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsTenantId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsClientId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsSubscriptionId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsDefaultWorkspace?: string;\n\n  // App Insights\n  appInsightsAppId?: string;\n\n  enableSecureSocksProxy?: boolean;\n}\n\nexport interface AzureDataSourceSecureJsonData {\n  clientSecret?: string;\n  appInsightsApiKey?: string;\n}\n\n// Represents an errors that come back from frontend requests.\n// Not totally sure how accurate this type is.\nexport type AzureMonitorErrorish = Error | string | React.ReactElement;\n\n// Azure Monitor API Types\nexport interface AzureMonitorMetricsMetadataResponse {\n  value: AzureMonitorMetricMetadataItem[];\n}\n\nexport interface AzureMonitorMetricMetadataItem {\n  id: string;\n  resourceId: string;\n  primaryAggregationType: string;\n  supportedAggregationTypes: string[];\n  name: AzureMonitorLocalizedValue;\n  dimensions?: AzureMonitorLocalizedValue[];\n  metricAvailabilities?: AzureMonitorMetricAvailabilityMetadata[];\n}\n\nexport interface AzureMonitorMetricAvailabilityMetadata {\n  timeGrain: string;\n  retention: string;\n}\n\nexport interface AzureMonitorLocalizedValue {\n  value: string;\n  localizedValue: string;\n}\n\nexport interface AzureLogsVariable {\n  text: string;\n  value: string;\n}\n\nexport interface AzureMonitorOption<T = string> {\n  label: string;\n  value: T;\n  options?: AzureMonitorOption[];\n}\n\nexport type VariableOptionGroup = { label: string; options: AzureMonitorOption[] };\n\nexport interface AzureQueryEditorFieldProps {\n  data?: PanelData;\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  variableOptionGroup: VariableOptionGroup;\n  schema?: EngineSchema;\n  range?: TimeRange;\n\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\n// To avoid a type issue we redeclare the EngineSchema type from @kusto/monaco-kusto\nexport interface EngineSchema {\n  clusterType: 'Engine';\n  cluster: {\n    connectionString: string;\n    databases: Database[];\n  };\n  database: Database | undefined;\n  globalScalarParameters?: ScalarParameter[];\n  globalTabularParameters?: TabularParameter[];\n}\n\nexport interface Database {\n  name: string;\n  tables: AzureLogAnalyticsMetadataTable[];\n  functions: Function[];\n  majorVersion: number;\n  minorVersion: number;\n}\n\nexport interface FormatAsFieldProps extends AzureQueryEditorFieldProps {\n  inputId: string;\n  options: Array<SelectableValue<ResultFormat>>;\n  defaultValue: ResultFormat;\n  setFormatAs: (query: AzureMonitorQuery, formatAs: ResultFormat) => AzureMonitorQuery;\n  resultFormat?: ResultFormat;\n}\n\nexport interface AzureResourceSummaryItem {\n  subscriptionName: string;\n  resourceGroupName: string | undefined;\n  resourceName: string | undefined;\n}\n\nexport interface RawAzureSubscriptionItem {\n  subscriptionName: string;\n  subscriptionId: string;\n}\n\nexport interface RawAzureResourceGroupItem {\n  resourceGroupURI: string;\n  resourceGroupName: string;\n}\n\nexport interface RawAzureResourceItem {\n  id: string;\n  name: string;\n  subscriptionId: string;\n  resourceGroup: string;\n  type: string;\n  location: string;\n}\n\nexport interface AzureGraphResponse<T = unknown> {\n  data: T;\n  // skipToken is used for pagination, to get the next page\n  $skipToken?: string;\n}\n\n// https://docs.microsoft.com/en-us/rest/api/azureresourcegraph/resourcegraph(2021-03-01)/resources/resources#queryrequestoptions\nexport interface AzureResourceGraphOptions {\n  $skip: number;\n  $skipToken: string;\n  $top: number;\n  allowPartialScopes: boolean;\n  resultFormat: 'objectArray' | 'table';\n}\n\n// Azure Monitor Metrics query API data fetcher argument types.\n// The types prefixed by Legacy are applicable to pre-version 9 of Grafana\n// that do not have a resourceUri, instead the resourceUri is built up from\n// the subscription, resource group, metric definition (a.k.a. resource type)\n// and the resource name.\nexport type GetMetricNamespacesQuery = AzureGetMetricNamespacesQuery | LegacyAzureGetMetricNamespacesQuery;\nexport type GetMetricNamesQuery = AzureGetMetricNamesQuery | LegacyAzureGetMetricNamesQuery;\nexport type GetMetricMetadataQuery = AzureGetMetricMetadataQuery | LegacyAzureGetMetricMetadataQuery;\n\nexport interface AzureGetMetricNamespacesQuery {\n  resourceUri: string;\n}\nexport interface LegacyAzureGetMetricNamespacesQuery {\n  subscription: string;\n  resourceGroup: string;\n  metricNamespace?: string;\n  resourceName?: string;\n}\n\nexport interface AzureGetMetricNamesQuery {\n  resourceUri: string;\n  metricNamespace?: string;\n  customNamespace?: string;\n}\n\nexport interface LegacyAzureGetMetricNamesQuery {\n  subscription: string;\n  resourceGroup: string;\n  resourceName: string;\n  metricNamespace: string;\n  customNamespace?: string;\n}\n\nexport interface AzureGetMetricMetadataQuery {\n  resourceUri: string;\n  metricNamespace: string;\n  customNamespace?: string;\n  metricName: string;\n}\n\nexport interface LegacyAzureGetMetricMetadataQuery {\n  subscription: string;\n  resourceGroup: string;\n  resourceName: string;\n  metricNamespace: string;\n  customNamespace?: string;\n  metricName: string;\n}\n\nexport interface AzureGetResourceNamesQuery {\n  subscriptionId: string;\n  resourceGroup?: string;\n  metricNamespace?: string;\n  region?: string;\n}\n\nexport interface AzureMonitorLocations {\n  displayName: string;\n  name: string;\n  supportsLogs?: boolean;\n}\n\nexport interface AzureMonitorProvidersResponse {\n  namespace: string;\n  resourceTypes: ProviderResourceType[];\n}\n\nexport interface ProviderResourceType {\n  resourceType: string;\n  locations: string[];\n  apiVersions: string[];\n  capabilities: string;\n}\n\nexport interface AzureAPIResponse<T> {\n  value: T[];\n  count?: {\n    type: string;\n    value: number;\n  };\n  status?: number;\n  statusText?: string;\n}\n\nexport interface Location {\n  id: string;\n  name: string;\n  displayName: string;\n  regionalDisplayName: string;\n  metadata: LocationMetadata;\n}\n\ninterface LocationMetadata {\n  regionType: string;\n  regionCategory: string;\n  geographyGroup: string;\n  longitude: string;\n  latitude: string;\n  physicalLocation: string;\n  pairedRegion: LocationPairedRegion[];\n}\n\ninterface LocationPairedRegion {\n  name: string;\n  id: string;\n}\n\nexport interface Subscription {\n  id: string;\n  authorizationSource: string;\n  subscriptionId: string;\n  tenantId: string;\n  displayName: string;\n  state: string;\n  subscriptionPolicies: {\n    locationPlacementId: string;\n    quotaId: string;\n    spendingLimit: string;\n  };\n}\n\nexport interface Workspace {\n  properties: {\n    customerId: string;\n    provisioningState: string;\n    sku: {\n      name: string;\n    };\n    retentionInDays: number;\n    publicNetworkAccessForQuery: string;\n    publicNetworkAccessForIngestion: string;\n  };\n  id: string;\n  name: string;\n  type: string;\n  location: string;\n  tags: Record<string, string>;\n}\n\nexport interface Resource {\n  changedTime: string;\n  createdTime: string;\n  extendedLocation: { name: string; type: string };\n  id: string;\n  identity: { principalId: string; tenantId: string; type: string; userAssignedIdentities: string[] };\n  kind: string;\n  location: string;\n  managedBy: string;\n  name: string;\n  plan: { name: string; product: string; promotionCode: string; publisher: string; version: string };\n  properties: Record<string, string>;\n  provisioningState: string;\n  sku: { capacity: number; family: string; model: string; name: string; size: string; tier: string };\n  tags: Record<string, string>;\n  type: string;\n}\n\nexport interface ResourceGroup {\n  id: string;\n  location: string;\n  managedBy: string;\n  name: string;\n  properties: { provisioningState: string };\n  tags: object;\n  type: string;\n}\n\nexport interface Namespace {\n  classification: {\n    Custom: string;\n    Platform: string;\n    Qos: string;\n  };\n  id: string;\n  name: string;\n  properties: { metricNamespaceName: string };\n  type: string;\n}\n\nexport interface Metric {\n  displayDescription: string;\n  errorCode: string;\n  errorMessage: string;\n  id: string;\n  name: AzureMonitorLocalizedValue;\n  timeseries: Array<{ data: MetricValue[]; metadatavalues: MetricMetadataValue[] }>;\n  type: string;\n  unit: string;\n}\n\ninterface MetricValue {\n  average: number;\n  count: number;\n  maximum: number;\n  minimum: number;\n  timeStamp: string;\n  total: number;\n}\n\ninterface MetricMetadataValue {\n  name: AzureMonitorLocalizedValue;\n  value: string;\n}\n\nexport type Category = {\n  displayName: string;\n  id: string;\n  related: {\n    queries: string[];\n    tables: string[];\n  };\n};\n\nexport type CheatsheetQuery = {\n  body: string;\n  description: string;\n  displayName: string;\n  id: string;\n  properties: {\n    ExampleQuery: boolean;\n    QueryAttributes: {\n      isMultiResource: boolean;\n    };\n  };\n  related: {\n    categories: string[];\n    resourceTypes: string[];\n    tables: string[];\n  };\n  tags: {\n    Topic: string[];\n  };\n};\n\nexport type CheatsheetQueries = {\n  [key: string]: CheatsheetQuery[];\n};\n\nexport type DropdownCategories = {\n  [key: string]: boolean;\n};\n","import { config } from '@grafana/runtime';\n\nimport {\n  AzureAuthType,\n  AzureCloud,\n  AzureCredentials,\n  AzureDataSourceInstanceSettings,\n  AzureDataSourceSettings,\n  ConcealedSecret,\n} from './types';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nexport function getAuthType(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): AzureAuthType {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    }\n\n    // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud(): string {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud: string): string {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\n\nexport function getAzureCloud(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): string {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n    case 'workloadidentity':\n      // In case of managed identity and workload identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options: AzureDataSourceSettings): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n    case 'workloadidentity':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n    case 'workloadidentity':\n      if (\n        (authType === 'msi' && config.azure.managedIdentityEnabled) ||\n        (authType === 'workloadidentity' && config.azure.workloadIdentityEnabled)\n      ) {\n        return {\n          authType,\n        };\n      } else {\n        // If authentication type is managed identity or workload identity but either method is disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: AzureDataSourceSettings,\n  credentials: AzureCredentials\n): AzureDataSourceSettings {\n  switch (credentials.authType) {\n    case 'msi':\n    case 'workloadidentity':\n      if (credentials.authType === 'msi' && !config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n      if (credentials.authType === 'workloadidentity' && !config.azure.workloadIdentityEnabled) {\n        throw new Error('Workload Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: credentials.authType,\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret: typeof credentials.clientSecret === 'string' ? credentials.clientSecret : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          clientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n","import { E2ESelectors } from '@grafana/e2e-selectors';\n\nexport const components = {\n  configEditor: {\n    authType: {\n      select: 'data-testid auth-type',\n    },\n    azureCloud: {\n      input: 'data-testid azure-cloud',\n    },\n    tenantID: {\n      input: 'data-testid tenant-id',\n    },\n    clientID: {\n      input: 'data-testid client-id',\n    },\n    clientSecret: {\n      input: 'data-testid client-secret',\n    },\n    loadSubscriptions: {\n      button: 'data-testid load-subscriptions',\n    },\n    defaultSubscription: {\n      input: 'data-testid default-subscription',\n    },\n  },\n  queryEditor: {\n    header: {\n      select: 'data-testid azure-monitor-experimental-header',\n    },\n    resourcePicker: {\n      select: {\n        button: 'data-testid resource-picker-select',\n      },\n      search: {\n        input: 'data-testid resource-picker-search',\n      },\n      apply: {\n        button: 'data-testid resource-picker-apply',\n      },\n      cancel: {\n        button: 'data-testid resource-picker-cancel',\n      },\n      advanced: {\n        collapse: 'data-testid resource-picker-advanced',\n        subscription: {\n          input: 'data-testid resource-picker-subscription',\n        },\n        resourceGroup: {\n          input: 'data-testid resource-picker-resource-group',\n        },\n        namespace: {\n          input: 'data-testid resource-picker-namespace',\n        },\n        region: {\n          input: 'data-testid resource-picker-region',\n        },\n        resource: {\n          input: 'data-testid resource-picker-resource',\n        },\n      },\n    },\n    metricsQueryEditor: {\n      container: { input: 'data-testid azure-monitor-metrics-query-editor-with-experimental-ui' },\n      metricName: {\n        input: 'data-testid metric-name',\n      },\n    },\n    logsQueryEditor: {\n      container: { input: 'data-testid azure-monitor-logs-query-editor-with-experimental-ui' },\n      formatSelection: {\n        input: 'data-testid format-selection',\n      },\n    },\n    argsQueryEditor: {\n      container: {\n        input: 'data-testid azure-monitor-arg-query-editor',\n      },\n      subscriptions: {\n        input: 'data-testid azure-monitor-args-subscription',\n      },\n    },\n    tracesQueryEditor: {\n      container: {\n        input: 'data-testid azure-monitor-traces-query-editor-with-experimental-ui',\n      },\n      traceTypes: {\n        select: 'data-testid azure-monitor-traces-query-editor-trace-types',\n      },\n    },\n  },\n  variableEditor: {\n    queryType: {\n      input: 'data-testid query-type',\n    },\n    subscription: {\n      input: 'data-testid subscription',\n    },\n    resourceGroup: {\n      input: 'data-testid resource-group',\n    },\n    namespace: {\n      input: 'data-testid namespace',\n    },\n    resource: {\n      input: 'data-testid resource',\n    },\n    region: {\n      input: 'data-testid region',\n    },\n  },\n};\n\nexport const selectors: { components: E2ESelectors<typeof components> } = {\n  components: components,\n};\n","import React, { ChangeEvent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { Button, Select, Field, Input } from '@grafana/ui';\n\nimport { selectors } from '../e2e/selectors';\nimport { AzureAuthType, AzureCredentials } from '../types';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  workloadIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  disabled?: boolean;\n  children?: JSX.Element;\n}\n\nexport const AzureCredentialsForm = (props: Props) => {\n  const {\n    credentials,\n    azureCloudOptions,\n    onCredentialsChange,\n    disabled,\n    managedIdentityEnabled,\n    workloadIdentityEnabled,\n  } = props;\n\n  const authTypeOptions = useMemo(() => {\n    let opts: Array<SelectableValue<AzureAuthType>> = [\n      {\n        value: 'clientsecret',\n        label: 'App Registration',\n      },\n    ];\n\n    if (managedIdentityEnabled) {\n      opts.push({\n        value: 'msi',\n        label: 'Managed Identity',\n      });\n    }\n\n    if (workloadIdentityEnabled) {\n      opts.push({\n        value: 'workloadidentity',\n        label: 'Workload Identity',\n      });\n    }\n\n    return opts;\n  }, [managedIdentityEnabled, workloadIdentityEnabled]);\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    const defaultAuthType = managedIdentityEnabled\n      ? 'msi'\n      : workloadIdentityEnabled\n        ? 'workloadidentity'\n        : 'clientsecret';\n    const updated: AzureCredentials = {\n      ...credentials,\n      authType: selected.value || defaultAuthType,\n    };\n    onCredentialsChange(updated);\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <ConfigSection title=\"Authentication\">\n      {authTypeOptions.length > 1 && (\n        <Field\n          label=\"Authentication\"\n          description=\"Choose the type of authentication to Azure services\"\n          data-testid={selectors.components.configEditor.authType.select}\n          htmlFor=\"authentication-type\"\n        >\n          <Select\n            className=\"width-15\"\n            value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n            options={authTypeOptions}\n            onChange={onAuthTypeChange}\n            disabled={disabled}\n          />\n        </Field>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <Field\n              label=\"Azure Cloud\"\n              data-testid={selectors.components.configEditor.azureCloud.input}\n              htmlFor=\"azure-cloud-type\"\n              disabled={disabled}\n            >\n              <Select\n                inputId=\"azure-cloud-type\"\n                aria-label=\"Azure Cloud\"\n                className=\"width-15\"\n                value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                options={azureCloudOptions}\n                onChange={onAzureCloudChange}\n              />\n            </Field>\n          )}\n          <Field\n            label=\"Directory (tenant) ID\"\n            required\n            data-testid={selectors.components.configEditor.tenantID.input}\n            htmlFor=\"tenant-id\"\n            invalid={!credentials.tenantId}\n            error={'Tenant ID is required'}\n          >\n            <Input\n              aria-label=\"Tenant ID\"\n              className=\"width-30\"\n              placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n              value={credentials.tenantId || ''}\n              onChange={onTenantIdChange}\n              disabled={disabled}\n            />\n          </Field>\n          <Field\n            label=\"Application (client) ID\"\n            required\n            data-testid={selectors.components.configEditor.clientID.input}\n            htmlFor=\"client-id\"\n            invalid={!credentials.clientId}\n            error={'Client ID is required'}\n          >\n            <Input\n              className=\"width-30\"\n              aria-label=\"Client ID\"\n              placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n              value={credentials.clientId || ''}\n              onChange={onClientIdChange}\n              disabled={disabled}\n            />\n          </Field>\n          {!disabled &&\n            (typeof credentials.clientSecret === 'symbol' ? (\n              <Field label=\"Client Secret\" htmlFor=\"client-secret\" required>\n                <div className=\"width-30\" style={{ display: 'flex', gap: '4px' }}>\n                  <Input\n                    aria-label=\"Client Secret\"\n                    placeholder=\"configured\"\n                    disabled={true}\n                    data-testid={'client-secret'}\n                  />\n                  <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset} disabled={disabled}>\n                    Reset\n                  </Button>\n                </div>\n              </Field>\n            ) : (\n              <Field\n                label=\"Client Secret\"\n                data-testid={selectors.components.configEditor.clientSecret.input}\n                required\n                htmlFor=\"client-secret\"\n                invalid={!credentials.clientSecret}\n                error={'Client secret is required'}\n              >\n                <Input\n                  className=\"width-30\"\n                  aria-label=\"Client Secret\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientSecret || ''}\n                  onChange={onClientSecretChange}\n                  id=\"client-secret\"\n                  disabled={disabled}\n                />\n              </Field>\n            ))}\n        </>\n      )}\n      {props.children}\n    </ConfigSection>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { useEffect, useReducer } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, Button, Field } from '@grafana/ui';\n\nimport { isCredentialsComplete } from '../credentials';\nimport { selectors } from '../e2e/selectors';\nimport { AzureCredentials, AzureDataSourceJsonData } from '../types';\n\nexport interface Props {\n  options: AzureDataSourceJsonData;\n  credentials: AzureCredentials;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  subscriptions: Array<SelectableValue<string>>;\n  onSubscriptionsChange: (receivedSubscriptions: Array<SelectableValue<string>>) => void;\n  onSubscriptionChange: (subscriptionId?: string) => void;\n  disabled?: boolean;\n}\n\nexport const DefaultSubscription = (props: Props) => {\n  const {\n    credentials,\n    disabled,\n    options,\n    subscriptions,\n    getSubscriptions,\n    onSubscriptionChange,\n    onSubscriptionsChange,\n  } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    onSubscriptionsChange(received);\n    if (getSubscriptions) {\n      if (autoSelect && !options.subscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onChange(received[0]);\n      } else if (options.subscriptionId) {\n        const found = received.find((opt) => opt.value === options.subscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onChange = (selected: SelectableValue<string> | undefined) => onSubscriptionChange(selected?.value);\n\n  return (\n    <>\n      <Field\n        label=\"Default Subscription\"\n        data-testid={selectors.components.configEditor.defaultSubscription.input}\n        htmlFor=\"default-subscription\"\n      >\n        <div className=\"width-30\" style={{ display: 'flex', gap: '4px' }}>\n          <Select\n            inputId=\"default-subscription\"\n            aria-label=\"Default Subscription\"\n            value={\n              options.subscriptionId ? subscriptions.find((opt) => opt.value === options.subscriptionId) : undefined\n            }\n            options={subscriptions}\n            onChange={onChange}\n            disabled={disabled}\n          />\n          <Button\n            variant=\"secondary\"\n            type=\"button\"\n            onClick={onLoadSubscriptions}\n            disabled={!hasRequiredFields || disabled}\n            data-testid={selectors.components.configEditor.loadSubscriptions.button}\n          >\n            Load Subscriptions\n          </Button>\n        </div>\n      </Field>\n    </>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { getCredentials, updateCredentials } from '../credentials';\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\n\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { DefaultSubscription } from './DefaultSubscription';\n\nconst azureClouds: SelectableValue[] = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const MonitorConfig = (props: Props) => {\n  const { updateOptions, getSubscriptions, options } = props;\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const credentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  const onCredentialsChange = (credentials: AzureCredentials, subscriptionId?: string): void => {\n    if (!subscriptionId) {\n      setSubscriptions([]);\n    }\n    updateOptions((options) =>\n      updateCredentials({ ...options, jsonData: { ...options.jsonData, subscriptionId } }, credentials)\n    );\n  };\n\n  const onSubscriptionsChange = (receivedSubscriptions: Array<SelectableValue<string>>) =>\n    setSubscriptions(receivedSubscriptions);\n\n  const onSubscriptionChange = (subscriptionId?: string) =>\n    updateOptions((options) => ({ ...options, jsonData: { ...options.jsonData, subscriptionId } }));\n\n  // The auth type needs to be set on the first load of the data source\n  useEffectOnce(() => {\n    if (!options.jsonData.authType) {\n      onCredentialsChange(credentials);\n    }\n  });\n\n  return (\n    <>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        workloadIdentityEnabled={config.azure.workloadIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={azureClouds}\n        onCredentialsChange={onCredentialsChange}\n        disabled={props.options.readOnly}\n      >\n        <DefaultSubscription\n          subscriptions={subscriptions}\n          credentials={credentials}\n          getSubscriptions={getSubscriptions}\n          disabled={props.options.readOnly}\n          onSubscriptionsChange={onSubscriptionsChange}\n          onSubscriptionChange={onSubscriptionChange}\n          options={options.jsonData}\n        />\n      </AzureCredentialsForm>\n    </>\n  );\n};\n\nexport default MonitorConfig;\n","import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, SelectableValue, updateDatasourcePluginOption } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { getBackendSrv, getTemplateSrv, isFetchError, TemplateSrv, config } from '@grafana/runtime';\nimport { Alert, Divider, SecureSocksProxySettings } from '@grafana/ui';\n\nimport ResponseParser from '../azure_monitor/response_parser';\nimport {\n  AzureAPIResponse,\n  AzureDataSourceJsonData,\n  AzureDataSourceSecureJsonData,\n  AzureDataSourceSettings,\n  Subscription,\n} from '../types';\nimport { routeNames } from '../utils/common';\n\nimport { MonitorConfig } from './MonitorConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\ninterface ErrorMessage {\n  title: string;\n  description: string;\n  details?: string;\n}\n\nexport interface State {\n  unsaved: boolean;\n  error?: ErrorMessage;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n  baseURL: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const query = `?api-version=2019-03-01`;\n    try {\n      const result = await getBackendSrv()\n        .fetch<AzureAPIResponse<Subscription>>({\n          url: this.baseURL + query,\n          method: 'GET',\n        })\n        .toPromise();\n\n      this.setState({ error: undefined });\n      return ResponseParser.parseSubscriptionsForSelect(result);\n    } catch (err) {\n      if (isFetchError(err)) {\n        this.setState({\n          error: {\n            title: 'Error requesting subscriptions',\n            description: 'Could not request subscriptions from Azure. Check your credentials and try again.',\n            details: err?.data?.message,\n          },\n        });\n      }\n      return Promise.resolve([]);\n    }\n  };\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    const { error } = this.state;\n\n    return (\n      <>\n        <DataSourceDescription\n          dataSourceName=\"Azure Monitor\"\n          docsLink=\"https://grafana.com/docs/grafana/latest/datasources/azure-monitor/\"\n          hasRequiredFields\n        />\n        <Divider />\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n        {error && (\n          <Alert severity=\"error\" title={error.title}>\n            <p>{error.description}</p>\n            {error.details && <details style={{ whiteSpace: 'pre-wrap' }}>{error.details}</details>}\n          </Alert>\n        )}\n        {config.secureSocksDSProxyEnabled && (\n          <>\n            <Divider />\n            <ConfigSection\n              title=\"Additional settings\"\n              description=\"Additional settings are optional settings that can be configured for more control over your data source. This includes Secure Socks Proxy.\"\n              isCollapsible={true}\n              isInitiallyOpen={options.jsonData.enableSecureSocksProxy !== undefined}\n            >\n              <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n            </ConfigSection>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { isValidElement } from 'react';\n\nimport { AzureMonitorErrorish } from '../types';\n\nexport function messageFromElement(error: AzureMonitorErrorish): AzureMonitorErrorish | undefined {\n  if (isValidElement(error)) {\n    return error;\n  } else {\n    return messageFromError(error);\n  }\n}\n\nexport default function messageFromError(error: any): string | undefined {\n  if (!error || typeof error !== 'object') {\n    return undefined;\n  }\n\n  if (typeof error.message === 'string') {\n    return error.message;\n  }\n\n  if (typeof error.data?.error?.message === 'string') {\n    return error.data.error.message;\n  }\n\n  // Copied from the old Angular code - this might be checking for errors in places\n  // that the new code just doesnt use.\n  // As new error objects are discovered they should be added to the above code, rather\n  // than below\n  const maybeAMessage =\n    error.error?.data?.error?.innererror?.innererror?.message ||\n    error.error?.data?.error?.innererror?.message ||\n    error.error?.data?.error?.message ||\n    error.error?.data?.message ||\n    error.data?.message ||\n    error;\n\n  if (typeof maybeAMessage === 'string') {\n    return maybeAMessage;\n  } else if (maybeAMessage && maybeAMessage.toString) {\n    return maybeAMessage.toString();\n  }\n\n  return undefined;\n}\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { AzureMonitorErrorish } from '../types';\n\nimport { messageFromElement } from './messageFromError';\n\ntype SourcedError = [string, AzureMonitorErrorish];\n\nexport default function useLastError() {\n  const [errors, setErrors] = useState<SourcedError[]>([]);\n\n  // Handles errors from any child components that request data to display their options\n  const addError = useCallback((errorSource: string, error: AzureMonitorErrorish | undefined) => {\n    setErrors((errors) => {\n      const errorsCopy = [...errors];\n      const index = errors.findIndex(([vSource]) => vSource === errorSource);\n\n      // If there's already an error, remove it. If we're setting a new error\n      // below, we'll move it to the front\n      if (index > -1) {\n        errorsCopy.splice(index, 1);\n      }\n\n      // And then add the new error to the top of the array. If error is defined, it was already\n      // removed above.\n      if (error) {\n        errorsCopy.unshift([errorSource, error]);\n      }\n\n      return errorsCopy;\n    });\n  }, []);\n\n  const errorMessage = useMemo(() => {\n    const recentError = errors[0];\n    return recentError && messageFromElement(recentError[1]);\n  }, [errors]);\n\n  return [errorMessage, addError] as const;\n}\n","import React, { useCallback } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nconst QueryField = ({ query, onQueryChange }: AzureQueryEditorFieldProps) => {\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange({\n        ...query,\n        azureResourceGraph: {\n          ...query.azureResourceGraph,\n          query: newQuery,\n        },\n      });\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureResourceGraph?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width=\"100%\"\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n    />\n  );\n};\n\nexport default QueryField;\n","import React from 'react';\n\nimport { EditorField } from '@grafana/experimental';\nimport { InlineField } from '@grafana/ui';\nimport { Props as InlineFieldProps } from '@grafana/ui/src/components/Forms/InlineField';\n\ninterface Props extends InlineFieldProps {\n  label: string;\n  inlineField?: boolean;\n  labelWidth?: number;\n}\n\nconst DEFAULT_LABEL_WIDTH = 18;\n\nexport const Field = (props: Props) => {\n  const { labelWidth, inlineField, ...remainingProps } = props;\n\n  if (!inlineField) {\n    return <EditorField width={labelWidth || DEFAULT_LABEL_WIDTH} {...remainingProps} />;\n  } else {\n    return <InlineField labelWidth={labelWidth || DEFAULT_LABEL_WIDTH} {...remainingProps} />;\n  }\n};\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { FieldValidationMessage, MultiSelect } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorQuery, AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { findOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\ninterface SubscriptionFieldProps extends AzureQueryEditorFieldProps {\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  subscriptions: AzureMonitorOption[];\n}\n\nconst SubscriptionField = ({ query, subscriptions, variableOptionGroup, onQueryChange }: SubscriptionFieldProps) => {\n  const [error, setError] = useState<boolean>(false);\n  const [values, setValues] = useState<Array<SelectableValue<string>>>([]);\n  const options = useMemo(() => [...subscriptions, variableOptionGroup], [subscriptions, variableOptionGroup]);\n\n  useEffect(() => {\n    if (query.subscriptions && query.subscriptions.length > 0) {\n      setValues(findOptions([...subscriptions, ...variableOptionGroup.options], query.subscriptions));\n      setError(false);\n    } else {\n      setError(true);\n    }\n  }, [query.subscriptions, subscriptions, variableOptionGroup.options]);\n\n  const onChange = (change: Array<SelectableValue<string>>) => {\n    const containsSelectAll = change.filter((c) => c.value === 'Select all subscriptions');\n    if (!change || change.length === 0) {\n      setValues([]);\n      onQueryChange({\n        ...query,\n        subscriptions: [],\n      });\n      setError(true);\n    } else if (containsSelectAll.length > 0) {\n      const allSubs = subscriptions.map((c) => c.value ?? '').filter((c) => c !== 'Select all subscriptions');\n      onQueryChange({\n        ...query,\n        subscriptions: allSubs,\n      });\n    } else {\n      const newSubs = change.map((c) => c.value ?? '');\n      onQueryChange({\n        ...query,\n        subscriptions: newSubs,\n      });\n      setValues(findOptions([...subscriptions, ...variableOptionGroup.options], newSubs));\n      setError(false);\n    }\n  };\n\n  return (\n    <Field label=\"Subscriptions\" data-testid={selectors.components.queryEditor.argsQueryEditor.subscriptions.input}>\n      <>\n        <MultiSelect\n          isClearable\n          value={values}\n          inputId=\"azure-monitor-subscriptions-field\"\n          onChange={onChange}\n          options={options}\n          width={38}\n        />\n        {error ? <FieldValidationMessage>At least one subscription must be chosen.</FieldValidationMessage> : null}\n      </>\n    </Field>\n  );\n};\n\nexport default SubscriptionField;\n","import { intersection } from 'lodash';\nimport React, { useState, useMemo } from 'react';\n\nimport { EditorFieldGroup, EditorRow, EditorRows } from '@grafana/experimental';\n\nimport Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\n\nimport QueryField from './QueryField';\nimport SubscriptionField from './SubscriptionField';\n\ninterface ArgQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst ERROR_SOURCE = 'arg-subscriptions';\n\nfunction selectSubscriptions(\n  fetchedSubscriptions: string[],\n  currentSubscriptions?: string[],\n  currentSubscription?: string\n) {\n  let querySubscriptions = currentSubscriptions || [];\n  if (querySubscriptions.length === 0 && currentSubscription) {\n    querySubscriptions = [currentSubscription];\n  }\n  if (querySubscriptions.length === 0 && fetchedSubscriptions.length) {\n    querySubscriptions = [fetchedSubscriptions[0]];\n  }\n\n  const templateVars = querySubscriptions.filter((sub) => sub.includes('$'));\n  const commonSubscriptions = intersection(querySubscriptions, fetchedSubscriptions).concat(templateVars);\n  if (fetchedSubscriptions.length && querySubscriptions.length > commonSubscriptions.length) {\n    // If not all of the query subscriptions are in the list of fetched subscriptions, then\n    // select only the ones present (or the first one if none is present)\n    querySubscriptions = commonSubscriptions.length > 0 ? commonSubscriptions : [fetchedSubscriptions[0]];\n  }\n  return querySubscriptions;\n}\n\nconst ArgQueryEditor = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n}: ArgQueryEditorProps) => {\n  const [subscriptions, setSubscriptions] = useState<AzureMonitorOption[]>([]);\n  useMemo(() => {\n    datasource\n      .getSubscriptions()\n      .then((results) => {\n        const selectAllSubscriptionOption = [\n          { label: 'Select all subscriptions', value: 'Select all subscriptions', description: 'Select all' },\n        ];\n        const fetchedSubscriptions = results.map((v) => ({ label: v.text, value: v.value, description: v.value }));\n        setSubscriptions(selectAllSubscriptionOption.concat(fetchedSubscriptions));\n        setError(ERROR_SOURCE, undefined);\n\n        onChange({\n          ...query,\n          subscriptions: selectSubscriptions(\n            fetchedSubscriptions.map((v) => v.value),\n            query.subscriptions,\n            query.subscription\n          ),\n        });\n      })\n      .catch((err) => setError(ERROR_SOURCE, err));\n    // We are only interested in re-fetching subscriptions if the data source changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource]);\n\n  return (\n    <span data-testid={selectors.components.queryEditor.argsQueryEditor.container.input}>\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <SubscriptionField\n              subscriptions={subscriptions}\n              query={query}\n              datasource={datasource}\n              subscriptionId={subscriptionId}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n      <QueryField\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n      />\n    </span>\n  );\n};\n\nexport default ArgQueryEditor;\n","import React, { useCallback, useMemo } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { selectors } from '../e2e/selectors';\nimport { FormatAsFieldProps, ResultFormat } from '../types';\n\nimport { Field } from './Field';\n\nconst FormatAsField = ({\n  query,\n  variableOptionGroup,\n  onQueryChange,\n  inputId,\n  options: formatOptions,\n  defaultValue,\n  setFormatAs,\n  resultFormat,\n}: FormatAsFieldProps) => {\n  const options = useMemo(() => [...formatOptions, variableOptionGroup], [variableOptionGroup, formatOptions]);\n\n  const handleChange = useCallback(\n    (change: SelectableValue<ResultFormat>) => {\n      const { value } = change;\n      if (!value) {\n        return;\n      }\n\n      const newQuery = setFormatAs(query, value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query, setFormatAs]\n  );\n\n  useEffectOnce(() => {\n    if (!resultFormat) {\n      handleChange({ value: defaultValue });\n    } else {\n      if (!formatOptions.find((item) => item.value === resultFormat)) {\n        handleChange({ value: defaultValue });\n      }\n    }\n  });\n\n  return (\n    <Field label=\"Format as\" data-testid={selectors.components.queryEditor.logsQueryEditor.formatSelection.input}>\n      <Select\n        inputId={`${inputId}-format-as-field`}\n        value={resultFormat ?? defaultValue}\n        onChange={handleChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default FormatAsField;\n","import React, { useState } from 'react';\n\nimport { Collapse, Space } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorResource } from '../../types';\n\nexport interface ResourcePickerProps<T> {\n  resources: T[];\n  onChange: (resources: T[]) => void;\n  renderAdvanced: (resources: T[], onChange: (resources: T[]) => void) => React.ReactNode;\n}\n\nconst AdvancedMulti = ({ resources, onChange, renderAdvanced }: ResourcePickerProps<string | AzureMonitorResource>) => {\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(!!resources.length && JSON.stringify(resources).includes('$'));\n\n  return (\n    <div data-testid={selectors.components.queryEditor.resourcePicker.advanced.collapse}>\n      <Collapse\n        collapsible\n        label=\"Advanced\"\n        isOpen={isAdvancedOpen}\n        onToggle={() => setIsAdvancedOpen(!isAdvancedOpen)}\n      >\n        {renderAdvanced(resources, onChange)}\n        <Space v={2} />\n      </Collapse>\n    </div>\n  );\n};\n\nexport default AdvancedMulti;\n","export enum ResourceRowType {\n  Subscription = 'Subscription',\n  ResourceGroup = 'ResourceGroup',\n  Resource = 'Resource',\n  VariableGroup = 'TemplateVariableGroup',\n  Variable = 'TemplateVariable',\n}\n\nexport interface ResourceRow {\n  id: string; // azure's raw data id usually passes along a uri (except in the case of subscriptions), to make things less confusing for ourselves we parse the id string out of the uri or vice versa\n  uri: string; // ex: /subscriptions/subid123\n  name: string;\n  type: ResourceRowType;\n  typeLabel: string;\n  location?: string;\n  children?: ResourceRowGroup;\n}\n\nexport type ResourceRowGroup = ResourceRow[];\n","import React from 'react';\n\nimport { Icon } from '@grafana/ui';\n\nimport { ResourceRow, ResourceRowType } from './types';\n\ninterface EntryIconProps {\n  entry: ResourceRow;\n  isOpen: boolean;\n}\n\nexport const EntryIcon = ({ isOpen, entry: { type } }: EntryIconProps) => {\n  switch (type) {\n    case ResourceRowType.Subscription:\n      return <Icon name=\"layer-group\" />;\n\n    case ResourceRowType.ResourceGroup:\n      return <Icon name={isOpen ? 'folder-open' : 'folder'} />;\n\n    case ResourceRowType.Resource:\n      return <Icon name=\"cube\" />;\n\n    case ResourceRowType.VariableGroup:\n      return <Icon name=\"x\" />;\n\n    case ResourceRowType.Variable:\n      return <Icon name=\"x\" />;\n\n    default:\n      return null;\n  }\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    tableLayout: 'fixed',\n    overflow: 'scroll',\n  }),\n\n  scrollableTable: css({\n    overflow: 'auto',\n  }),\n\n  tableScroller: css({\n    maxHeight: '16vh',\n  }),\n\n  selectedTableScroller: css({\n    maxHeight: '13vh',\n  }),\n\n  header: css({\n    background: theme.colors.background.secondary,\n  }),\n\n  row: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n    '&:last-of-type': {\n      borderBottomColor: theme.colors.border.medium,\n    },\n  }),\n\n  disabledRow: css({\n    opacity: 0.5,\n  }),\n\n  cell: css({\n    padding: theme.spacing(1, 1, 1, 0),\n    width: '25%',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    '&:first-of-type': {\n      width: '50%',\n      padding: theme.spacing(1, 1, 1, 2),\n    },\n  }),\n\n  collapseButton: css({ margin: 0 }),\n\n  loadingCell: css({\n    textAlign: 'center',\n  }),\n\n  spinner: css({\n    marginBottom: 0,\n  }),\n\n  nestedEntry: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n\n  entryContentItem: css({\n    margin: theme.spacing(0, 1, 0, 0),\n  }),\n\n  truncated: css({\n    minWidth: 0,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n\n  resourceField: css({\n    maxWidth: theme.spacing(36),\n    overflow: 'hidden',\n  }),\n\n  resourceFieldButton: css({\n    padding: '7px',\n    textAlign: 'left',\n  }),\n\n  nestedRowCheckbox: css({\n    zIndex: 0,\n  }),\n\n  selectionFooter: css({\n    background: theme.colors.background.primary,\n    paddingTop: theme.spacing(2),\n  }),\n\n  loadingWrapper: css({\n    textAlign: 'center',\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n\n  resultLimit: css({\n    margin: '4px 0',\n    fontStyle: 'italic',\n  }),\n\n  modal: css({\n    width: theme.breakpoints.values.lg,\n  }),\n});\n\nexport default getStyles;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect } from 'react';\n\nimport { Checkbox, IconButton, useStyles2, useTheme2, Space } from '@grafana/ui';\n\nimport { EntryIcon } from './EntryIcon';\nimport getStyles from './styles';\nimport { ResourceRow } from './types';\n\ninterface NestedEntryProps {\n  level: number;\n  entry: ResourceRow;\n  isSelected: boolean;\n  isSelectable: boolean;\n  isOpen: boolean;\n  isDisabled: boolean;\n  scrollIntoView?: boolean;\n  onToggleCollapse: (row: ResourceRow) => void;\n  onSelectedChange: (row: ResourceRow, selected: boolean) => void;\n}\n\nexport const NestedEntry = ({\n  entry,\n  isSelected,\n  isDisabled,\n  isOpen,\n  isSelectable,\n  level,\n  scrollIntoView,\n  onToggleCollapse,\n  onSelectedChange,\n}: NestedEntryProps) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const hasChildren = !!entry.children;\n\n  const handleToggleCollapse = useCallback(() => {\n    onToggleCollapse(entry);\n  }, [onToggleCollapse, entry]);\n\n  const handleSelectedChanged = useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const isSelected = ev.target.checked;\n      onSelectedChange(entry, isSelected);\n    },\n    [entry, onSelectedChange]\n  );\n\n  const checkboxId = `${scrollIntoView ? 'table' : 'summary'}_checkbox_${entry.uri}`;\n\n  // Scroll to the selected element if it's not in the view\n  // Only do it once, when the component is mounted\n  useEffect(() => {\n    if (isSelected && scrollIntoView) {\n      document.getElementById(checkboxId)?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className={styles.nestedEntry} style={{ marginLeft: level * (3 * theme.spacing.gridSize) }}>\n      {hasChildren ? (\n        <IconButton\n          className={styles.collapseButton}\n          name={isOpen ? 'angle-down' : 'angle-right'}\n          aria-label={isOpen ? `Collapse ${entry.name}` : `Expand ${entry.name}`}\n          onClick={handleToggleCollapse}\n          id={entry.id}\n        />\n      ) : (\n        <Space layout=\"inline\" h={2} />\n      )}\n\n      <Space layout=\"inline\" h={2} />\n\n      {isSelectable && (\n        <>\n          <Checkbox\n            id={checkboxId}\n            onChange={handleSelectedChanged}\n            disabled={isDisabled}\n            value={isSelected}\n            className={styles.nestedRowCheckbox}\n          />\n          <Space layout=\"inline\" h={2} />\n        </>\n      )}\n\n      <EntryIcon entry={entry} isOpen={isOpen} />\n      <Space layout=\"inline\" h={1} />\n\n      <label htmlFor={checkboxId} className={cx(styles.entryContentItem, styles.truncated)}>\n        {entry.name}\n      </label>\n    </div>\n  );\n};\n","import { TemplateSrv } from '@grafana/runtime';\n\nimport { AzureMonitorResource, GetMetricNamespacesQuery, GetMetricNamesQuery } from '../types';\n\nexport default class UrlBuilder {\n  static buildResourceUri(templateSrv: TemplateSrv, resource: AzureMonitorResource, multipleResources?: boolean) {\n    const urlArray = [];\n    const { subscription, resourceGroup, metricNamespace, resourceName } = resource;\n    if (subscription) {\n      urlArray.push('/subscriptions', subscription);\n      if (resourceGroup && !multipleResources) {\n        urlArray.push('resourceGroups', resourceGroup);\n\n        if (metricNamespace && resourceName) {\n          const metricNamespaceProcessed = templateSrv.replace(metricNamespace);\n          const metricNamespaceArray = metricNamespace.split('/');\n          const resourceNameProcessed = templateSrv.replace(resourceName);\n          const resourceNameArray = resourceName.split('/');\n          const provider = metricNamespaceArray.shift();\n          if (provider) {\n            urlArray.push('providers', provider);\n          }\n\n          if (\n            metricNamespaceProcessed.toLowerCase().startsWith('microsoft.storage/storageaccounts/') &&\n            !resourceNameProcessed.endsWith('default')\n          ) {\n            resourceNameArray.push('default');\n          }\n\n          if (resourceNameArray.length > metricNamespaceArray.length) {\n            const parentResource = resourceNameArray.shift();\n            if (parentResource) {\n              urlArray.push(parentResource);\n            }\n          }\n\n          for (const i in metricNamespaceArray) {\n            urlArray.push(metricNamespaceArray[i]);\n            urlArray.push(resourceNameArray[i]);\n          }\n        }\n      }\n    }\n\n    return urlArray.join('/');\n  }\n\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    apiVersion: string,\n    query: GetMetricNamespacesQuery,\n    globalRegion: boolean,\n    templateSrv: TemplateSrv\n  ) {\n    let resourceUri: string;\n\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const { subscription, resourceGroup, metricNamespace, resourceName } = query;\n      resourceUri = UrlBuilder.buildResourceUri(templateSrv, {\n        subscription,\n        resourceGroup,\n        metricNamespace,\n        resourceName,\n      });\n    }\n\n    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}${\n      globalRegion ? '&region=global' : ''\n    }`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    apiVersion: string,\n    query: GetMetricNamesQuery,\n    templateSrv: TemplateSrv,\n    multipleResources?: boolean,\n    region?: string\n  ) {\n    let resourceUri: string;\n    const { customNamespace, metricNamespace } = query;\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const { subscription, resourceGroup, metricNamespace, resourceName } = query;\n      resourceUri = UrlBuilder.buildResourceUri(\n        templateSrv,\n        {\n          subscription,\n          resourceGroup,\n          metricNamespace,\n          resourceName,\n        },\n        multipleResources\n      );\n    }\n    let url = `${baseUrl}${resourceUri}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}`;\n    if (customNamespace) {\n      url += `&metricnamespace=${encodeURIComponent(customNamespace)}`;\n    }\n\n    if (multipleResources && !customNamespace && metricNamespace) {\n      url += `&metricnamespace=${encodeURIComponent(metricNamespace)}`;\n    }\n\n    if (region && multipleResources) {\n      url += `&region=${region}`;\n    }\n\n    return url;\n  }\n}\n","import { produce } from 'immer';\n\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport UrlBuilder from '../../azure_monitor/url_builder';\nimport { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureMonitorResource, AzureMonitorQuery } from '../../types';\n\nimport { ResourceRow, ResourceRowGroup } from './types';\n\n// This regex matches URIs representing:\n//  - subscriptions: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572\n//  - resource groups: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources\n//  - resources: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources/providers/Microsoft.Compute/virtualMachines/GithubTestDataVM\nconst RESOURCE_URI_REGEX =\n  /\\/subscriptions\\/(?<subscription>[^/]+)(?:\\/resourceGroups\\/(?<resourceGroup>[^/]+)(?:\\/providers\\/(?<metricNamespaceAndResource>.+))?)?/;\n\ntype RegexGroups = Record<string, string | undefined>;\n\nfunction parseNamespaceAndName(metricNamespaceAndName?: string) {\n  if (!metricNamespaceAndName) {\n    return {};\n  }\n  const stringArray = metricNamespaceAndName.split('/');\n  // The first two groups belong to the namespace (e.g. Microsoft.Storage/storageAccounts)\n  const namespaceArray = stringArray.splice(0, 2);\n  // The next element belong to the resource name (e.g. storageAcc1)\n  const resourceNameArray = stringArray.splice(0, 1);\n  // If there are more elements, keep adding them to the namespace and resource name, alternatively\n  // e.g (blobServices/default)\n  while (stringArray.length) {\n    const nextElem = stringArray.shift()!;\n    stringArray.length % 2 === 0 ? resourceNameArray.push(nextElem) : namespaceArray.push(nextElem);\n  }\n  return { metricNamespace: namespaceArray.join('/'), resourceName: resourceNameArray.join('/') };\n}\n\nexport function parseResourceURI(resourceURI: string): AzureMonitorResource {\n  const matches = RESOURCE_URI_REGEX.exec(resourceURI);\n  const groups: RegexGroups = matches?.groups ?? {};\n  const { subscription, resourceGroup, metricNamespaceAndResource } = groups;\n  const { metricNamespace, resourceName } = parseNamespaceAndName(metricNamespaceAndResource);\n\n  return { subscription, resourceGroup, metricNamespace, resourceName };\n}\n\nexport function parseMultipleResourceDetails(resources: Array<string | AzureMonitorResource>, location?: string) {\n  return resources.map((resource) => {\n    return parseResourceDetails(resource, location);\n  });\n}\n\nexport function parseResourceDetails(resource: string | AzureMonitorResource, location?: string) {\n  if (typeof resource === 'string') {\n    const res = parseResourceURI(resource);\n    if (location) {\n      res.region = location;\n    }\n    return res;\n  }\n  return resource;\n}\n\nexport function resourcesToStrings(resources: Array<string | AzureMonitorResource>) {\n  return resources.map((resource) => resourceToString(resource));\n}\n\nexport function resourceToString(resource?: string | AzureMonitorResource) {\n  return resource\n    ? typeof resource === 'string'\n      ? resource\n      : UrlBuilder.buildResourceUri(getTemplateSrv(), resource)\n    : '';\n}\n\nexport function isGUIDish(input: string) {\n  return !!input.match(/^[A-Z0-9]+/i);\n}\n\nfunction compareNamespaceAndName(\n  rowNamespace?: string,\n  rowName?: string,\n  resourceNamespace?: string,\n  resourceName?: string\n) {\n  // StorageAccounts subresources are not listed independently\n  if (resourceNamespace?.startsWith('microsoft.storage/storageaccounts')) {\n    resourceNamespace = 'microsoft.storage/storageaccounts';\n    if (resourceName?.endsWith('/default')) {\n      resourceName = resourceName.slice(0, -'/default'.length);\n    }\n  }\n  return rowNamespace === resourceNamespace && rowName === resourceName;\n}\n\nexport function matchURI(rowURI: string, resourceURI: string) {\n  const targetParams = parseResourceDetails(resourceURI);\n  const rowParams = parseResourceDetails(rowURI);\n\n  return (\n    rowParams?.subscription === targetParams?.subscription &&\n    rowParams?.resourceGroup?.toLowerCase() === targetParams?.resourceGroup?.toLowerCase() &&\n    compareNamespaceAndName(\n      rowParams?.metricNamespace?.toLowerCase(),\n      rowParams?.resourceName,\n      targetParams?.metricNamespace?.toLowerCase(),\n      targetParams?.resourceName\n    )\n  );\n}\n\nexport function findRows(rows: ResourceRowGroup, uris: string[]): ResourceRow[] {\n  const result: ResourceRow[] = [];\n  uris.forEach((uri) => {\n    const row = findRow(rows, uri);\n    if (row) {\n      result.push(row);\n    }\n  });\n  return result;\n}\n\nexport function findRow(rows: ResourceRowGroup, uri: string): ResourceRow | undefined {\n  for (const row of rows) {\n    if (matchURI(row.uri, uri)) {\n      return row;\n    }\n\n    if (row.children) {\n      const result = findRow(row.children, uri);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function addResources(rows: ResourceRowGroup, targetParentId: string, newResources: ResourceRowGroup) {\n  return produce(rows, (draftState) => {\n    const draftRow = findRow(draftState, targetParentId);\n\n    // we can't find the selected resource in our list of resources,\n    // probably means user has either mistyped in the input field\n    // or is using template variables.\n    // either way no need to throw, just show that none of the resources are checked\n    if (!draftRow) {\n      return;\n    }\n\n    draftRow.children = newResources;\n  });\n}\n\nexport function setResources(\n  query: AzureMonitorQuery,\n  type: ResourcePickerQueryType,\n  resources: Array<string | AzureMonitorResource>\n): AzureMonitorQuery {\n  if (type === 'logs') {\n    // Resource URI for LogAnalytics\n    return {\n      ...query,\n      azureLogAnalytics: {\n        ...query.azureLogAnalytics,\n        resources: resourcesToStrings(resources).filter((resource) => resource !== ''),\n      },\n    };\n  }\n  if (type === 'traces') {\n    // Resource URI for Traces\n    return {\n      ...query,\n      azureTraces: {\n        ...query.azureTraces,\n        resources: resourcesToStrings(resources).filter((resource) => resource !== ''),\n      },\n    };\n  }\n\n  // Resource object for metrics\n  const parsedResource = resources.length ? parseResourceDetails(resources[0]) : {};\n  return {\n    ...query,\n    subscription: parsedResource.subscription,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricNamespace: parsedResource.metricNamespace?.toLocaleLowerCase(),\n      region: parsedResource.region,\n      resources: parseMultipleResourceDetails(resources).filter(\n        (resource) =>\n          resource.resourceName !== '' &&\n          resource.metricNamespace !== '' &&\n          resource.subscription !== '' &&\n          resource.resourceGroup !== ''\n      ),\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n","import { cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { FadeTransition, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\nimport { NestedEntry } from './NestedEntry';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { findRow } from './utils';\n\ninterface NestedRowProps {\n  row: ResourceRow;\n  level: number;\n  selectedRows: ResourceRowGroup;\n  requestNestedRows: (row: ResourceRow) => Promise<void>;\n  onRowSelectedChange: (row: ResourceRow, selected: boolean) => void;\n  selectableEntryTypes: ResourceRowType[];\n  disableRow: (row: ResourceRow, selectedRows: ResourceRowGroup) => boolean;\n  scrollIntoView?: boolean;\n}\n\nconst NestedRow = ({\n  row,\n  selectedRows,\n  level,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n  scrollIntoView,\n  disableRow,\n}: NestedRowProps) => {\n  const styles = useStyles2(getStyles);\n  const [rowStatus, setRowStatus] = useState<'open' | 'closed' | 'loading'>('closed');\n\n  const isSelected = !!selectedRows.find((v) => v.uri.toLowerCase() === row.uri.toLowerCase());\n  const isDisabled = !isSelected && disableRow(row, selectedRows);\n  const isOpen = rowStatus === 'open';\n\n  const onRowToggleCollapse = async () => {\n    if (rowStatus === 'open') {\n      setRowStatus('closed');\n      return;\n    }\n    setRowStatus('loading');\n    requestNestedRows(row)\n      .then(() => setRowStatus('open'))\n      .catch(() => setRowStatus('closed'));\n  };\n\n  // opens the resource group on load of component if there was a previously saved selection\n  useEffect(() => {\n    // Assuming we don't have multi-select yet\n    const selectedRow = selectedRows[0];\n\n    const containsChild = selectedRow && !!findRow(row.children ?? [], selectedRow.uri);\n\n    if (containsChild) {\n      setRowStatus('open');\n    }\n  }, [selectedRows, row]);\n\n  return (\n    <>\n      <tr className={cx(styles.row, isDisabled && styles.disabledRow)} key={row.id}>\n        <td className={styles.cell}>\n          <NestedEntry\n            level={level}\n            isSelected={isSelected}\n            isDisabled={isDisabled}\n            isOpen={isOpen}\n            entry={row}\n            onToggleCollapse={onRowToggleCollapse}\n            onSelectedChange={onRowSelectedChange}\n            isSelectable={selectableEntryTypes.some((type) => type === row.type)}\n            scrollIntoView={scrollIntoView}\n          />\n        </td>\n\n        <td className={styles.cell}>{row.typeLabel}</td>\n\n        <td className={styles.cell}>{row.location ?? '-'}</td>\n      </tr>\n\n      {isOpen &&\n        row.children &&\n        Object.keys(row.children).length > 0 &&\n        row.children.map((childRow) => (\n          <NestedRow\n            key={childRow.uri}\n            row={childRow}\n            selectedRows={selectedRows}\n            level={level + 1}\n            requestNestedRows={requestNestedRows}\n            onRowSelectedChange={onRowSelectedChange}\n            selectableEntryTypes={selectableEntryTypes}\n            scrollIntoView={scrollIntoView}\n            disableRow={disableRow}\n          />\n        ))}\n\n      <FadeTransition visible={rowStatus === 'loading'}>\n        <tr>\n          <td className={cx(styles.cell, styles.loadingCell)} colSpan={3}>\n            <LoadingPlaceholder text=\"Loading...\" className={styles.spinner} />\n          </td>\n        </tr>\n      </FadeTransition>\n    </>\n  );\n};\n\nexport default NestedRow;\n","import { debounce } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\n\nconst Search = ({ searchFn }: { searchFn: (searchPhrase: string) => void }) => {\n  const [searchFilter, setSearchFilter] = useState('');\n\n  const debouncedSearch = useMemo(() => debounce(searchFn, 600), [searchFn]);\n  useEffect(() => {\n    return () => {\n      // Stop the invocation of the debounced function after unmounting\n      debouncedSearch.cancel();\n    };\n  }, [debouncedSearch]);\n\n  return (\n    <Input\n      aria-label=\"resource search\"\n      prefix={<Icon name=\"search\" />}\n      value={searchFilter}\n      onChange={(event) => {\n        const searchPhrase = event.currentTarget.value;\n        setSearchFilter(searchPhrase);\n        debouncedSearch(searchPhrase);\n      }}\n      placeholder=\"search for a resource\"\n      data-testid={selectors.components.queryEditor.resourcePicker.search.input}\n    />\n  );\n};\n\nexport default Search;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { Alert, Button, LoadingPlaceholder, Modal, useStyles2, Space } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport ResourcePickerData, { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureMonitorResource } from '../../types';\nimport messageFromError from '../../utils/messageFromError';\n\nimport AdvancedMulti from './AdvancedMulti';\nimport NestedRow from './NestedRow';\nimport Search from './Search';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { findRows, parseMultipleResourceDetails, resourcesToStrings, matchURI, resourceToString } from './utils';\n\ninterface ResourcePickerProps<T> {\n  resourcePickerData: ResourcePickerData;\n  resources: T[];\n  selectableEntryTypes: ResourceRowType[];\n  queryType: ResourcePickerQueryType;\n\n  onApply: (resources: T[]) => void;\n  onCancel: () => void;\n  disableRow: (row: ResourceRow, selectedRows: ResourceRowGroup) => boolean;\n  renderAdvanced: (resources: T[], onChange: (resources: T[]) => void) => React.ReactNode;\n  selectionNotice?: (selectedRows: ResourceRowGroup) => string;\n}\n\nconst ResourcePicker = ({\n  resourcePickerData,\n  resources,\n  onApply,\n  onCancel,\n  selectableEntryTypes,\n  queryType,\n  disableRow,\n  renderAdvanced,\n  selectionNotice,\n}: ResourcePickerProps<string | AzureMonitorResource>) => {\n  const styles = useStyles2(getStyles);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [rows, setRows] = useState<ResourceRowGroup>([]);\n  const [selectedRows, setSelectedRows] = useState<ResourceRowGroup>([]);\n  const [internalSelected, setInternalSelected] = useState(resources);\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);\n  const [shouldShowLimitFlag, setShouldShowLimitFlag] = useState(false);\n  const selectionNoticeText = selectionNotice?.(selectedRows);\n\n  // Sync the resourceURI prop to internal state\n  useEffect(() => {\n    setInternalSelected(resources);\n  }, [resources]);\n\n  const loadInitialData = useCallback(async () => {\n    if (!isLoading) {\n      try {\n        setIsLoading(true);\n        const resources = await resourcePickerData.fetchInitialRows(\n          queryType,\n          parseMultipleResourceDetails(internalSelected ?? {})\n        );\n        setRows(resources);\n      } catch (error) {\n        setErrorMessage(messageFromError(error));\n      }\n      setIsLoading(false);\n    }\n  }, [internalSelected, isLoading, resourcePickerData, queryType]);\n\n  useEffectOnce(() => {\n    loadInitialData();\n  });\n\n  // Avoid using empty resources\n  const isValid = (r: string | AzureMonitorResource) =>\n    typeof r === 'string' ? r !== '' : r.subscription && r.resourceGroup && r.resourceName && r.metricNamespace;\n\n  // set selected row data whenever row or selection changes\n  useEffect(() => {\n    if (!internalSelected) {\n      setSelectedRows([]);\n    }\n\n    const sanitized = internalSelected.filter((r) => isValid(r));\n    const found = internalSelected && findRows(rows, resourcesToStrings(sanitized));\n    if (sanitized?.length > found.length) {\n      // Not all the selected items are in the current rows, so we need to generate the row\n      // information for those.\n      return setSelectedRows(resourcePickerData.parseRows(sanitized));\n    }\n    if (found && found.length) {\n      return setSelectedRows(found);\n    }\n    return setSelectedRows([]);\n  }, [internalSelected, rows, resourcePickerData]);\n\n  // Request resources for an expanded resource group\n  const requestNestedRows = useCallback(\n    async (parentRow: ResourceRow) => {\n      // clear error message (also when loading cached resources)\n      setErrorMessage(undefined);\n\n      // If we already have children, we don't need to re-fetch them.\n      if (parentRow.children?.length) {\n        return;\n      }\n\n      try {\n        const nestedRows = await resourcePickerData.fetchAndAppendNestedRow(rows, parentRow, queryType);\n        setRows(nestedRows);\n      } catch (error) {\n        setErrorMessage(messageFromError(error));\n        throw error;\n      }\n    },\n    [resourcePickerData, rows, queryType]\n  );\n\n  const handleSelectionChanged = useCallback(\n    (row: ResourceRow, isSelected: boolean) => {\n      if (isSelected) {\n        const newRes = queryType === 'logs' ? row.uri : parseMultipleResourceDetails([row.uri], row.location)[0];\n        const newSelected = internalSelected ? internalSelected.concat(newRes) : [newRes];\n        setInternalSelected(newSelected.filter((r) => isValid(r)));\n      } else {\n        const newInternalSelected = internalSelected?.filter((r) => {\n          return !matchURI(resourceToString(r), row.uri);\n        });\n        setInternalSelected(newInternalSelected);\n      }\n    },\n    [queryType, internalSelected, setInternalSelected]\n  );\n\n  const handleApply = useCallback(() => {\n    if (internalSelected) {\n      onApply(queryType === 'logs' ? internalSelected : parseMultipleResourceDetails(internalSelected));\n    }\n  }, [queryType, internalSelected, onApply]);\n\n  const handleSearch = useCallback(\n    async (searchWord: string) => {\n      // clear errors and warnings\n      setErrorMessage(undefined);\n      setShouldShowLimitFlag(false);\n\n      if (!searchWord) {\n        loadInitialData();\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const searchResults = await resourcePickerData.search(searchWord, queryType);\n        setRows(searchResults);\n        if (searchResults.length >= resourcePickerData.resultLimit) {\n          setShouldShowLimitFlag(true);\n        }\n      } catch (err) {\n        setErrorMessage(messageFromError(err));\n      }\n      setIsLoading(false);\n    },\n    [loadInitialData, resourcePickerData, queryType]\n  );\n\n  return (\n    <>\n      <Search searchFn={handleSearch} />\n      {shouldShowLimitFlag ? (\n        <p className={styles.resultLimit}>Showing first {resourcePickerData.resultLimit} results</p>\n      ) : (\n        <Space v={2} />\n      )}\n\n      <table className={styles.table}>\n        <thead>\n          <tr className={cx(styles.row, styles.header)}>\n            <td className={styles.cell}>Scope</td>\n            <td className={styles.cell}>Type</td>\n            <td className={styles.cell}>Location</td>\n          </tr>\n        </thead>\n      </table>\n\n      <div className={cx(styles.scrollableTable, styles.tableScroller)}>\n        <table className={styles.table}>\n          <tbody>\n            {isLoading && (\n              <tr className={cx(styles.row)}>\n                <td className={styles.cell}>\n                  <LoadingPlaceholder text={'Loading...'} />\n                </td>\n              </tr>\n            )}\n            {!isLoading && rows.length === 0 && (\n              <tr className={cx(styles.row)}>\n                <td className={styles.cell} aria-live=\"polite\">\n                  No resources found\n                </td>\n              </tr>\n            )}\n            {!isLoading &&\n              rows.map((row) => (\n                <NestedRow\n                  key={row.uri}\n                  row={row}\n                  selectedRows={selectedRows}\n                  level={0}\n                  requestNestedRows={requestNestedRows}\n                  onRowSelectedChange={handleSelectionChanged}\n                  selectableEntryTypes={selectableEntryTypes}\n                  scrollIntoView={true}\n                  disableRow={disableRow}\n                />\n              ))}\n          </tbody>\n        </table>\n      </div>\n\n      <footer className={styles.selectionFooter}>\n        {selectedRows.length > 0 && (\n          <>\n            <h5>Selection</h5>\n\n            <div className={cx(styles.scrollableTable, styles.selectedTableScroller)}>\n              <table className={styles.table}>\n                <tbody>\n                  {selectedRows.map((row) => (\n                    <NestedRow\n                      key={row.uri}\n                      row={row}\n                      selectedRows={selectedRows}\n                      level={0}\n                      requestNestedRows={requestNestedRows}\n                      onRowSelectedChange={handleSelectionChanged}\n                      selectableEntryTypes={selectableEntryTypes}\n                      disableRow={() => false}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <Space v={2} />\n            {selectionNoticeText?.length ? (\n              <Alert title=\"\" severity=\"info\">\n                {selectionNoticeText}\n              </Alert>\n            ) : null}\n          </>\n        )}\n\n        <AdvancedMulti\n          resources={internalSelected}\n          onChange={(r) => setInternalSelected(r)}\n          renderAdvanced={renderAdvanced}\n        />\n\n        {errorMessage && (\n          <>\n            <Space v={2} />\n            <Alert severity=\"error\" title=\"An error occurred while requesting resources from Azure Monitor\">\n              {errorMessage}\n            </Alert>\n          </>\n        )}\n\n        <Modal.ButtonRow>\n          <Button onClick={onCancel} variant=\"secondary\" fill=\"outline\">\n            Cancel\n          </Button>\n          <Button\n            disabled={!!errorMessage || !internalSelected.every(isValid)}\n            onClick={handleApply}\n            data-testid={selectors.components.queryEditor.resourcePicker.apply.button}\n          >\n            Apply\n          </Button>\n        </Modal.ButtonRow>\n      </footer>\n    </>\n  );\n};\n\nexport default ResourcePicker;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Button, Icon, Modal, useStyles2, IconName } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureQueryEditorFieldProps, AzureMonitorResource } from '../../types';\nimport { Field } from '../Field';\nimport ResourcePicker from '../ResourcePicker';\nimport getStyles from '../ResourcePicker/styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseMultipleResourceDetails, setResources } from '../ResourcePicker/utils';\n\ninterface ResourceFieldProps<T> extends AzureQueryEditorFieldProps {\n  selectableEntryTypes: ResourceRowType[];\n  queryType: ResourcePickerQueryType;\n  resources: T[];\n  inlineField?: boolean;\n  labelWidth?: number;\n  disableRow: (row: ResourceRow, selectedRows: ResourceRowGroup) => boolean;\n  renderAdvanced: (resources: T[], onChange: (resources: T[]) => void) => React.ReactNode;\n  selectionNotice?: (selectedRows: ResourceRowGroup) => string;\n}\n\ntype Props = ResourceFieldProps<string | AzureMonitorResource>;\n\nconst ResourceField = ({\n  query,\n  datasource,\n  onQueryChange,\n  selectableEntryTypes,\n  queryType,\n  resources,\n  inlineField,\n  labelWidth,\n  disableRow,\n  renderAdvanced,\n  selectionNotice,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const [pickerIsOpen, setPickerIsOpen] = useState(false);\n\n  const handleOpenPicker = useCallback(() => {\n    setPickerIsOpen(true);\n  }, []);\n\n  const closePicker = useCallback(() => {\n    setPickerIsOpen(false);\n  }, []);\n\n  const handleApply = useCallback(\n    (resources: Array<string | AzureMonitorResource>) => {\n      onQueryChange(setResources(query, queryType, resources));\n      closePicker();\n    },\n    [closePicker, onQueryChange, query, queryType]\n  );\n\n  return (\n    <span data-testid={selectors.components.queryEditor.resourcePicker.select.button}>\n      <Modal\n        className={styles.modal}\n        title=\"Select a resource\"\n        isOpen={pickerIsOpen}\n        onDismiss={closePicker}\n        // The growing number of rows added to the modal causes a focus\n        // error in the modal, making it impossible to click on new elements\n        trapFocus={false}\n      >\n        <ResourcePicker\n          resourcePickerData={datasource.resourcePickerData}\n          resources={resources}\n          onApply={handleApply}\n          onCancel={closePicker}\n          selectableEntryTypes={selectableEntryTypes}\n          queryType={queryType}\n          disableRow={disableRow}\n          renderAdvanced={renderAdvanced}\n          selectionNotice={selectionNotice}\n        />\n      </Modal>\n      <Field label=\"Resource\" inlineField={inlineField} labelWidth={labelWidth}>\n        <Button className={styles.resourceFieldButton} variant=\"secondary\" onClick={handleOpenPicker} type=\"button\">\n          <ResourceLabel resources={resources} datasource={datasource} />\n        </Button>\n      </Field>\n    </span>\n  );\n};\n\ninterface ResourceLabelProps<T> {\n  resources: T[];\n  datasource: Datasource;\n}\n\nconst ResourceLabel = ({ resources, datasource }: ResourceLabelProps<string | AzureMonitorResource>) => {\n  const [resourcesComponents, setResourcesComponents] = useState(parseMultipleResourceDetails(resources));\n\n  useEffect(() => {\n    setResourcesComponents(parseMultipleResourceDetails(resources));\n  }, [resources]);\n\n  if (!resources.length) {\n    return <>Select a resource</>;\n  }\n\n  return <FormattedResource resources={resourcesComponents} />;\n};\n\ninterface FormattedResourceProps {\n  resources: AzureMonitorResource[];\n}\n\nconst FormattedResource = ({ resources }: FormattedResourceProps) => {\n  const styles = useStyles2(getStyles);\n\n  let icon: IconName = 'cube';\n  const items: string[] = [];\n  resources.forEach((resource) => {\n    if (resource.resourceName) {\n      items.push(resource.resourceName.split('/')[0]);\n      return;\n    }\n    if (resource.resourceGroup) {\n      icon = 'folder';\n      items.push(resource.resourceGroup);\n      return;\n    }\n    if (resource.subscription) {\n      icon = 'layer-group';\n      items.push(resource.subscription);\n      return;\n    }\n  });\n  return (\n    <span className={cx(styles.truncated, styles.resourceField)}>\n      <Icon name={icon} />\n      {items.join(', ')}\n    </span>\n  );\n};\n\nexport default ResourceField;\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { Icon, Input, Tooltip, Label, Button, useStyles2 } from '@grafana/ui';\n\nexport interface ResourcePickerProps<T> {\n  resources: T[];\n  onChange: (resources: T[]) => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  resourceList: css({ width: '100%', display: 'flex', marginBlock: theme.spacing(1) }),\n});\n\nconst AdvancedResourcePicker = ({ resources, onChange }: ResourcePickerProps<string>) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Ensure there is at least one resource\n    if (resources.length === 0) {\n      onChange(['']);\n    }\n  }, [resources, onChange]);\n\n  const onResourceChange = (index: number, resource: string) => {\n    const newResources = [...resources];\n    newResources[index] = resource;\n    onChange(newResources);\n  };\n\n  const removeResource = (index: number) => {\n    const newResources = [...resources];\n    newResources.splice(index, 1);\n    onChange(newResources);\n  };\n\n  const addResource = () => {\n    onChange(resources.concat(''));\n  };\n\n  return (\n    <>\n      <Label>\n        <h6>\n          Resource URI(s){' '}\n          <Tooltip\n            content={\n              <>\n                Manually edit the{' '}\n                <a\n                  href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/logs/log-standard-columns#_resourceid\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  resource uri\n                </a>\n                . Supports the use of multiple template variables (ex: /subscriptions/$subId/resourceGroups/$rg)\n              </>\n            }\n            placement=\"right\"\n            interactive={true}\n          >\n            <Icon name=\"info-circle\" />\n          </Tooltip>\n        </h6>\n      </Label>\n      {resources.map((resource, index) => (\n        <div key={`resource-${index + 1}`}>\n          <div className={styles.resourceList}>\n            <Input\n              id={`input-advanced-resource-picker-${index + 1}`}\n              value={resource}\n              onChange={(event) => onResourceChange(index, event.currentTarget.value)}\n              placeholder=\"ex: /subscriptions/$subId\"\n              data-testid={`input-advanced-resource-picker-${index + 1}`}\n            />\n            <AccessoryButton\n              aria-label=\"remove\"\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={() => removeResource(index)}\n              data-testid={`remove-resource`}\n              hidden={resources.length === 1}\n            />\n          </div>\n        </div>\n      ))}\n      <Button aria-label=\"Add\" icon=\"plus\" variant=\"secondary\" onClick={addResource} type=\"button\">\n        Add resource URI\n      </Button>\n    </>\n  );\n};\n\nexport default AdvancedResourcePicker;\n","import { AzureMonitorQuery, ResultFormat } from '../../types';\n\nexport function setKustoQuery(query: AzureMonitorQuery, kustoQuery: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      query: kustoQuery,\n    },\n  };\n}\n\nexport function setFormatAs(query: AzureMonitorQuery, formatAs: ResultFormat): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      resultFormat: formatAs,\n    },\n  };\n}\n\nexport function setDashboardTime(query: AzureMonitorQuery, dashboardTime: boolean): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      dashboardTime,\n    },\n  };\n}\n\nexport function setTimeColumn(query: AzureMonitorQuery, timeColumn: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      timeColumn,\n    },\n  };\n}\n","import { EngineSchema, Schema } from '@kusto/monaco-kusto';\nimport { Uri } from 'monaco-editor';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { CodeEditor, Monaco, MonacoEditor } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nimport { setKustoQuery } from './setQueryValue';\n\ninterface MonacoEditorValues {\n  editor: MonacoEditor;\n  monaco: Monaco;\n}\n\ninterface MonacoLanguages {\n  kusto: {\n    getKustoWorker: () => Promise<\n      (url: Uri) => Promise<{\n        setSchema: (schema: Schema) => void;\n      }>\n    >;\n  };\n}\n\nconst QueryField = ({ query, onQueryChange, schema }: AzureQueryEditorFieldProps) => {\n  const [monaco, setMonaco] = useState<MonacoEditorValues | undefined>();\n\n  useEffect(() => {\n    if (!schema || !monaco) {\n      return;\n    }\n\n    const setupEditor = async ({ monaco, editor }: MonacoEditorValues, schema: EngineSchema) => {\n      try {\n        const languages = monaco.languages as unknown as MonacoLanguages;\n        const model = editor.getModel();\n        if (model) {\n          const kustoWorker = await languages.kusto.getKustoWorker();\n          const kustoMode = await kustoWorker(model?.uri);\n          await kustoMode.setSchema(schema);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    setupEditor(monaco, schema).catch((err) => console.error(err));\n  }, [schema, monaco]);\n\n  const handleEditorMount = useCallback((editor: MonacoEditor, monaco: Monaco) => {\n    setMonaco({ monaco, editor });\n  }, []);\n\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange(setKustoQuery(query, newQuery));\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureLogAnalytics?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width=\"100%\"\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n      onEditorDidMount={handleEditorMount}\n    />\n  );\n};\n\nexport default QueryField;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nimport { setDashboardTime, setTimeColumn } from './setQueryValue';\n\nexport function TimeManagement({ query, onQueryChange: onChange, schema }: AzureQueryEditorFieldProps) {\n  const [defaultTimeColumns, setDefaultTimeColumns] = useState<SelectableValue[] | undefined>();\n  const [timeColumns, setTimeColumns] = useState<SelectableValue[] | undefined>();\n\n  const setDefaultColumn = useCallback((column: string) => onChange(setTimeColumn(query, column)), [query, onChange]);\n\n  useEffect(() => {\n    if (schema && query.azureLogAnalytics?.dashboardTime) {\n      const timeColumnOptions: SelectableValue[] = [];\n      const timeColumnsSet: Set<string> = new Set();\n      const defaultColumnsMap: Map<string, SelectableValue> = new Map();\n      const db = schema.database;\n      if (db) {\n        for (const table of db.tables) {\n          const cols = table.columns.reduce<SelectableValue[]>((prev, curr, i) => {\n            if (curr.type === 'datetime') {\n              if (!table.timespanColumn || table.timespanColumn !== curr.name) {\n                prev.push({ value: curr.name, label: `${table.name} > ${curr.name}` });\n                timeColumnsSet.add(curr.name);\n              }\n            }\n            return prev;\n          }, []);\n          timeColumnOptions.push(...cols);\n          if (table.timespanColumn && !defaultColumnsMap.has(table.timespanColumn)) {\n            defaultColumnsMap.set(table.timespanColumn, {\n              value: table.timespanColumn,\n              label: table.timespanColumn,\n            });\n          }\n        }\n      }\n      setTimeColumns(timeColumnOptions);\n      const defaultColumns = Array.from(defaultColumnsMap.values());\n      setDefaultTimeColumns(defaultColumns);\n\n      // Set default value\n      if (\n        !query.azureLogAnalytics.timeColumn ||\n        (query.azureLogAnalytics.timeColumn &&\n          !timeColumnsSet.has(query.azureLogAnalytics.timeColumn) &&\n          !defaultColumnsMap.has(query.azureLogAnalytics.timeColumn))\n      ) {\n        if (defaultColumns && defaultColumns.length) {\n          setDefaultColumn(defaultColumns[0].value);\n          setDefaultColumn(defaultColumns[0].value);\n          return;\n        } else if (timeColumnOptions && timeColumnOptions.length) {\n          setDefaultColumn(timeColumnOptions[0].value);\n          return;\n        } else {\n          setDefaultColumn('TimeGenerated');\n          return;\n        }\n      }\n    }\n  }, [schema, query.azureLogAnalytics?.dashboardTime, query.azureLogAnalytics?.timeColumn, setDefaultColumn]);\n\n  const handleTimeColumnChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setTimeColumn(query, change.value);\n      onChange(newQuery);\n    },\n    [onChange, query]\n  );\n  return (\n    <>\n      <InlineField\n        label=\"Time-range\"\n        tooltip={\n          <span>\n            Specifies the time-range used to query. The <code>Query</code> option will only use time-ranges specified in\n            the query. <code>Dashboard</code> will only use the Grafana time-range.\n          </span>\n        }\n      >\n        <RadioButtonGroup\n          options={[\n            { label: 'Query', value: false },\n            { label: 'Dashboard', value: true },\n          ]}\n          value={query.azureLogAnalytics?.dashboardTime ?? false}\n          size={'md'}\n          onChange={(val) => onChange(setDashboardTime(query, val))}\n        />\n      </InlineField>\n      {query.azureLogAnalytics?.dashboardTime && (\n        <InlineField\n          label=\"Time Column\"\n          tooltip={\n            <span>\n              Specifies the time column used for filtering. Defaults to the first tables <code>timeSpan</code> column,\n              the first <code>datetime</code> column found or <code>TimeGenerated</code>.\n            </span>\n          }\n        >\n          <Select\n            options={[\n              {\n                label: 'Default time columns',\n                options: defaultTimeColumns ?? [{ value: 'TimeGenerated', label: 'TimeGenerated' }],\n              },\n              {\n                label: 'Other time columns',\n                options: timeColumns ?? [],\n              },\n            ]}\n            onChange={handleTimeColumnChange}\n            value={\n              query.azureLogAnalytics?.timeColumn\n                ? query.azureLogAnalytics?.timeColumn\n                : defaultTimeColumns\n                  ? defaultTimeColumns[0]\n                  : timeColumns\n                    ? timeColumns[0]\n                    : { value: 'TimeGenerated', label: 'TimeGenerated' }\n            }\n            allowCustomValue\n          />\n        </InlineField>\n      )}\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorQuery } from '../../types';\nimport { isGUIDish } from '../ResourcePicker/utils';\n\nasync function migrateWorkspaceQueryToResourceQuery(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  if (query.azureLogAnalytics?.workspace !== undefined && !query.azureLogAnalytics.resources) {\n    const isWorkspaceGUID = isGUIDish(query.azureLogAnalytics.workspace);\n    let resource: string;\n\n    if (isWorkspaceGUID) {\n      resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(query.azureLogAnalytics.workspace);\n    } else {\n      // The value of workspace is probably a template variable so we just migrate it over as-is\n      resource = query.azureLogAnalytics.workspace;\n    }\n\n    const newQuery = {\n      ...query,\n      azureLogAnalytics: {\n        ...query.azureLogAnalytics,\n        resource: resource,\n        workspace: undefined,\n      },\n    };\n\n    delete newQuery.azureLogAnalytics.workspace;\n\n    onChange(newQuery);\n  }\n}\n\ninterface ErrorMessage {\n  title: string;\n  message: string;\n}\n\nexport default function useMigrations(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  const [migrationError, setMigrationError] = useState<ErrorMessage>();\n\n  useEffect(() => {\n    migrateWorkspaceQueryToResourceQuery(datasource, query, onChange).catch((err) =>\n      setMigrationError({\n        title: 'Unable to migrate workspace as a resource',\n        message: err.message,\n      })\n    );\n  }, [datasource, query, onChange]);\n\n  return migrationError;\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { PanelData, TimeRange } from '@grafana/data';\nimport { EditorFieldGroup, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Alert, LinkButton } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery, ResultFormat, EngineSchema } from '../../types';\nimport FormatAsField from '../FormatAsField';\nimport ResourceField from '../ResourceField';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceDetails } from '../ResourcePicker/utils';\n\nimport AdvancedResourcePicker from './AdvancedResourcePicker';\nimport QueryField from './QueryField';\nimport { TimeManagement } from './TimeManagement';\nimport { setFormatAs } from './setQueryValue';\nimport useMigrations from './useMigrations';\n\ninterface LogsQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n  hideFormatAs?: boolean;\n  timeRange?: TimeRange;\n  data?: PanelData;\n}\n\nconst LogsQueryEditor = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n  hideFormatAs,\n  timeRange,\n  data,\n}: LogsQueryEditorProps) => {\n  const migrationError = useMigrations(datasource, query, onChange);\n  const disableRow = (row: ResourceRow, selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      // Only if there is some resource(s) selected we should disable rows\n      return false;\n    }\n    const rowResourceNS = parseResourceDetails(row.uri, row.location).metricNamespace?.toLowerCase();\n    const selectedRowSampleNs = parseResourceDetails(\n      selectedRows[0].uri,\n      selectedRows[0].location\n    ).metricNamespace?.toLowerCase();\n    // Only resources with the same metricNamespace can be selected\n    return rowResourceNS !== selectedRowSampleNs;\n  };\n  const [schema, setSchema] = useState<EngineSchema | undefined>();\n\n  useEffect(() => {\n    if (query.azureLogAnalytics?.resources && query.azureLogAnalytics.resources.length) {\n      datasource.azureLogAnalyticsDatasource.getKustoSchema(query.azureLogAnalytics.resources[0]).then((schema) => {\n        setSchema(schema);\n      });\n    }\n  }, [query.azureLogAnalytics?.resources, datasource.azureLogAnalyticsDatasource]);\n\n  let portalLinkButton = null;\n\n  if (data?.series) {\n    const querySeries = data.series.find((result) => result.refId === query.refId);\n    if (querySeries && querySeries.meta?.custom?.azurePortalLink) {\n      portalLinkButton = (\n        <>\n          <LinkButton\n            size=\"md\"\n            target=\"_blank\"\n            style={{ marginTop: '22px' }}\n            href={querySeries.meta?.custom?.azurePortalLink}\n          >\n            View query in Azure Portal\n          </LinkButton>\n        </>\n      );\n    }\n  }\n\n  return (\n    <span data-testid={selectors.components.queryEditor.logsQueryEditor.container.input}>\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <ResourceField\n              query={query}\n              datasource={datasource}\n              inlineField={true}\n              labelWidth={10}\n              subscriptionId={subscriptionId}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              selectableEntryTypes={[\n                ResourceRowType.Subscription,\n                ResourceRowType.ResourceGroup,\n                ResourceRowType.Resource,\n                ResourceRowType.Variable,\n              ]}\n              resources={query.azureLogAnalytics?.resources ?? []}\n              queryType=\"logs\"\n              disableRow={disableRow}\n              renderAdvanced={(resources, onChange) => (\n                // It's required to cast resources because the resource picker\n                // specifies the type to string | AzureMonitorResource.\n                // eslint-disable-next-line\n                <AdvancedResourcePicker resources={resources as string[]} onChange={onChange} />\n              )}\n              selectionNotice={() => 'You may only choose items of the same resource type.'}\n            />\n            <TimeManagement\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              schema={schema}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <QueryField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n          schema={schema}\n        />\n        <EditorRow>\n          <EditorFieldGroup>\n            {!hideFormatAs && (\n              <FormatAsField\n                query={query}\n                datasource={datasource}\n                subscriptionId={subscriptionId}\n                variableOptionGroup={variableOptionGroup}\n                onQueryChange={onChange}\n                setError={setError}\n                inputId={'azure-monitor-logs'}\n                options={[\n                  { label: 'Log', value: ResultFormat.Logs },\n                  { label: 'Time series', value: ResultFormat.TimeSeries },\n                  { label: 'Table', value: ResultFormat.Table },\n                ]}\n                defaultValue={ResultFormat.Logs}\n                setFormatAs={setFormatAs}\n                resultFormat={query.azureLogAnalytics?.resultFormat}\n              />\n            )}\n            {portalLinkButton}\n            {migrationError && <Alert title={migrationError.title}>{migrationError.message}</Alert>}\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n    </span>\n  );\n};\n\nexport default LogsQueryEditor;\n","import { css, cx } from '@emotion/css';\nimport Prism, { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { useTheme2 } from '@grafana/ui/src';\n\nexport interface Props {\n  query: string;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  className?: string;\n}\nexport function RawQuery({ query, lang, className }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const highlighted = Prism.highlight(query, lang.grammar, lang.name);\n\n  return (\n    <div\n      className={cx(styles.editorField, 'prism-syntax-highlight', className)}\n      aria-label=\"selector\"\n      dangerouslySetInnerHTML={{ __html: highlighted }}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\nexport const QUERY_COMMANDS: CompletionItem[] = [\n  {\n    label: 'fields',\n    documentation: 'Retrieves the specified fields from log events',\n  },\n  { label: 'display', documentation: 'Specifies which fields to display in the query results' },\n  {\n    label: 'filter',\n    documentation: 'Filters the results of a query based on one or more conditions',\n  },\n  {\n    label: 'stats',\n    documentation: 'Calculates aggregate statistics based on the values of log fields',\n  },\n  { label: 'sort', documentation: 'Sorts the retrieved log events' },\n  { label: 'limit', documentation: 'Specifies the number of log events returned by the query' },\n  {\n    label: 'parse',\n    documentation:\n      'Extracts data from a log field, creating one or more ephemeral fields that you can process further in the query',\n  },\n];\n\nexport const COMPARISON_OPERATORS = ['=', '!=', '<', '<=', '>', '>='];\nexport const ARITHMETIC_OPERATORS = ['+', '-', '*', '/', '^', '%'];\n\nexport const NUMERIC_OPERATORS = [\n  {\n    label: 'abs',\n    detail: 'abs(a)',\n    documentation: 'Absolute value.',\n  },\n  {\n    label: 'ceil',\n    detail: 'ceil(a)',\n    documentation: 'Round to ceiling (the smallest integer that is greater than the value of a).',\n  },\n  {\n    label: 'floor',\n    detail: 'floor(a)',\n    documentation: 'Round to floor (the largest integer that is smaller than the value of a).',\n  },\n  {\n    label: 'greatest',\n    detail: 'greatest(a,b, ... z)',\n    documentation: 'Returns the largest value.',\n  },\n  {\n    label: 'least',\n    detail: 'least(a, b, ... z)',\n    documentation: 'Returns the smallest value.',\n  },\n  {\n    label: 'log',\n    detail: 'log(a)',\n    documentation: 'Natural logarithm.',\n  },\n  {\n    label: 'sqrt',\n    detail: 'sqrt(a)',\n    documentation: 'Square root.',\n  },\n];\n\nexport const GENERAL_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'coalesce',\n    detail: 'coalesce(fieldname1, fieldname2, ... fieldnamex)',\n    documentation: 'Returns the first non-null value from the list.',\n  },\n];\n\nexport const STRING_FUNCTIONS = [\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'concat',\n    detail: 'concat(string1, string2, ... stringz)',\n    documentation: 'Concatenates the strings.',\n  },\n  {\n    label: 'ltrim',\n    detail: 'ltrim(string) or ltrim(string1, string2)',\n    documentation:\n      'Remove white space from the left of the string. If the function has a second string argument, it removes the characters of string2 from the left of string1.',\n  },\n  {\n    label: 'rtrim',\n    detail: 'rtrim(string) or rtrim(string1, string2)',\n    documentation:\n      'Remove white space from the right of the string. If the function has a second string argument, it removes the characters of string2 from the right of string1.',\n  },\n  {\n    label: 'trim',\n    detail: 'trim(string) or trim(string1, string2)',\n    documentation:\n      'Remove white space from both ends of the string. If the function has a second string argument, it removes the characters of string2 from both sides of string1.',\n  },\n  {\n    label: 'strlen',\n    detail: 'strlen(string)',\n    documentation: 'Returns the length of the string in Unicode code points.',\n  },\n  {\n    label: 'toupper',\n    detail: 'toupper(string)',\n    documentation: 'Converts the string to uppercase.',\n  },\n  {\n    label: 'tolower',\n    detail: 'tolower(string)',\n    documentation: 'Converts the string to lowercase.',\n  },\n  {\n    label: 'substr',\n    detail: 'substr(string1, x), or substr(string1, x, y)',\n    documentation:\n      'Returns a substring from the index specified by the number argument to the end of the string. If the function has a second number argument, it contains the length of the substring to be retrieved.',\n  },\n  {\n    label: 'replace',\n    detail: 'replace(string1, string2, string3)',\n    documentation: 'Replaces all instances of string2 in string1 with string3.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n];\n\nexport const DATETIME_FUNCTIONS = [\n  {\n    label: 'bin',\n    detail: 'bin(period)',\n    documentation: 'Rounds the value of @timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'datefloor',\n    detail: 'datefloor(a, period)',\n    documentation: 'Truncates the timestamp to the given period.',\n  },\n  {\n    label: 'dateceil',\n    detail: 'dateceil(a, period)',\n    documentation: 'Rounds up the timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'fromMillis',\n    detail: 'fromMillis(fieldname)',\n    documentation:\n      'Interprets the input field as the number of milliseconds since the Unix epoch and converts it to a timestamp.',\n  },\n  {\n    label: 'toMillis',\n    detail: 'toMillis(fieldname)',\n    documentation:\n      'Converts the timestamp found in the named field into a number representing the milliseconds since the Unix epoch.',\n  },\n];\n\nexport const IP_FUNCTIONS = [\n  {\n    label: 'isValidIp',\n    detail: 'isValidIp(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address.',\n  },\n  {\n    label: 'isValidIpV4',\n    detail: 'isValidIpV4(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 IP address.',\n  },\n  {\n    label: 'isValidIpV6',\n    detail: 'isValidIpV6(fieldname)',\n    documentation: 'Returns true if the field is a valid v6 IP address.',\n  },\n  {\n    label: 'isIpInSubnet',\n    detail: 'isIpInSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address within the specified v4 or v6 subnet.',\n  },\n  {\n    label: 'isIpv4InSubnet',\n    detail: 'isIpv4InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 IP address within the specified v4 subnet.',\n  },\n  {\n    label: 'isIpv6InSubnet',\n    detail: 'isIpv6InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v6 IP address within the specified v6 subnet.',\n  },\n];\n\nexport const BOOLEAN_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n  ...IP_FUNCTIONS,\n];\n\nexport const AGGREGATION_FUNCTIONS_STATS = [\n  {\n    label: 'avg',\n    detail: 'avg(NumericFieldname)',\n    documentation: 'The average of the values in the specified field.',\n  },\n  {\n    label: 'count',\n    detail: 'count(fieldname) or count(*)',\n    documentation: 'Counts the log records.',\n  },\n  {\n    label: 'count_distinct',\n    detail: 'count_distinct(fieldname)',\n    documentation: 'Returns the number of unique values for the field.',\n  },\n  {\n    label: 'max',\n    detail: 'max(fieldname)',\n    documentation: 'The maximum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'min',\n    detail: 'min(fieldname)',\n    documentation: 'The minimum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'pct',\n    detail: 'pct(fieldname, value)',\n    documentation: 'A percentile indicates the relative standing of a value in a datas.',\n  },\n  {\n    label: 'stddev',\n    detail: 'stddev(NumericFieldname)',\n    documentation: 'The standard deviation of the values in the specified field.',\n  },\n  {\n    label: 'sum',\n    detail: 'sum(NumericFieldname)',\n    documentation: 'The sum of the values in the specified field.',\n  },\n];\n\nexport const NON_AGGREGATION_FUNCS_STATS = [\n  {\n    label: 'earliest',\n    detail: 'earliest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the earliest time stamp in the queried logs.',\n  },\n  {\n    label: 'latest',\n    detail: 'latest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the latest time stamp in the queried logs.',\n  },\n  {\n    label: 'sortsFirst',\n    detail: 'sortsFirst(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts first in the queried logs.',\n  },\n  {\n    label: 'sortsLast',\n    detail: 'sortsLast(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts last in the queried logs.',\n  },\n];\n\nexport const STATS_FUNCS = [...AGGREGATION_FUNCTIONS_STATS, ...NON_AGGREGATION_FUNCS_STATS];\n\nexport const KEYWORDS = ['as', 'like', 'by', 'in', 'desc', 'asc'];\nexport const FIELD_AND_FILTER_FUNCTIONS = [\n  ...NUMERIC_OPERATORS,\n  ...GENERAL_FUNCTIONS,\n  ...STRING_FUNCTIONS,\n  ...DATETIME_FUNCTIONS,\n  ...IP_FUNCTIONS,\n];\n\nexport const FUNCTIONS = [...FIELD_AND_FILTER_FUNCTIONS, ...STATS_FUNCS];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /^#.*/,\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`.*?`/,\n    alias: 'string',\n    greedy: true,\n  },\n  quote: {\n    pattern: /\".*?\"/,\n    alias: 'string',\n    greedy: true,\n  },\n  regex: {\n    pattern: /\\/.*?\\/(?=\\||\\s*$|,)/,\n    greedy: true,\n  },\n  'query-command': {\n    pattern: new RegExp(`\\\\b(?:${QUERY_COMMANDS.map((command) => command.label).join('|')})\\\\b`, 'i'),\n    alias: 'function',\n  },\n  function: {\n    pattern: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})\\\\b`, 'i'),\n  },\n  keyword: {\n    pattern: new RegExp(`(\\\\s+)(${KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n    lookbehind: true,\n  },\n  'log-group-name': {\n    pattern: /[\\.\\-_/#A-Za-z0-9]+/,\n  },\n  'field-name': {\n    pattern: /(@?[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/,\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  'command-separator': {\n    pattern: /\\|/,\n    alias: 'punctuation',\n  },\n  'comparison-operator': {\n    pattern: /([<>]=?)|(!?=)/,\n  },\n  punctuation: /[{}()`,.]/,\n  whitespace: /\\s+/,\n};\n\nexport default tokenizer;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  Card,\n  Collapse,\n  CustomScrollbar,\n  Field,\n  Input,\n  LoadingPlaceholder,\n  Select,\n  useStyles2,\n} from '@grafana/ui';\n\nimport AzureLogAnalyticsDatasource from '../azure_log_analytics/azure_log_analytics_datasource';\nimport {\n  AzureMonitorQuery,\n  AzureQueryType,\n  Category,\n  CheatsheetQueries,\n  CheatsheetQuery,\n  DropdownCategories,\n} from '../types';\n\nimport { RawQuery } from './RawQuery';\nimport tokenizer from './syntax';\n\nexport interface AzureCheatSheetProps {\n  onChange: (query: AzureMonitorQuery) => void;\n  query: AzureMonitorQuery;\n  datasource: AzureLogAnalyticsDatasource;\n}\n\nconst AzureCheatSheet = (props: AzureCheatSheetProps) => {\n  const [cheatsheetQueries, setCheatsheetQueries] = useState<CheatsheetQueries | null>(null);\n  const [areDropdownsOpen, setAreDropdownsOpen] = useState<DropdownCategories>({});\n  const [visibleQueries, setVisibleQueries] = useState<CheatsheetQueries | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: tokenizer, name: 'kql' };\n  const dropdownMenu = useMemo(() => {\n    if (cheatsheetQueries) {\n      return Object.keys(cheatsheetQueries).map((category): SelectableValue<string> => {\n        return {\n          label: category,\n          value: category,\n        };\n      });\n    }\n    return [];\n  }, [cheatsheetQueries]);\n\n  const getCheatsheetQueries = async () => {\n    await props.datasource.getAzureLogAnalyticsCheatsheetQueries().then((result) => {\n      result.categories.sort((a: Category, b: Category) => {\n        return a.displayName.toLowerCase() === b.displayName.toLowerCase()\n          ? 0\n          : a.displayName.toLowerCase() < b.displayName.toLowerCase()\n            ? -1\n            : 1;\n      });\n      const alphabetizedQueries = result.categories.reduce(\n        (queriesByCategory: CheatsheetQueries, category: Category) => {\n          const categoryQueries = category.related.queries.map((queryId: string) => {\n            return result.queries.find((query: CheatsheetQuery) => query.id === queryId);\n          });\n          queriesByCategory[category.displayName] = categoryQueries;\n          setAreDropdownsOpen({ ...areDropdownsOpen, [category.id]: false });\n          return queriesByCategory;\n        },\n        {}\n      );\n      setCheatsheetQueries(alphabetizedQueries);\n      setVisibleQueries(alphabetizedQueries);\n      setIsLoading(false);\n      return alphabetizedQueries;\n    });\n  };\n\n  useEffect(() => {\n    if (!cheatsheetQueries) {\n      getCheatsheetQueries();\n    }\n  });\n\n  const filterQueriesBySearch = (searchValue: string) => {\n    const visibleQueriesCategories = Object.keys(visibleQueries!);\n    if (searchValue.length > 0 && cheatsheetQueries) {\n      const filteredQueries: CheatsheetQueries = Object.keys(cheatsheetQueries).reduce(\n        (filteredQueriesBySearch: CheatsheetQueries, category) => {\n          const filters = cheatsheetQueries![category]!.filter((query) => {\n            return query.displayName.toLowerCase().includes(searchValue.toLowerCase());\n          });\n          if (visibleQueriesCategories.includes(category)) {\n            filteredQueriesBySearch[category] = filters;\n          }\n          return filteredQueriesBySearch;\n        },\n        {}\n      );\n\n      setVisibleQueries(filteredQueries);\n      return filteredQueries;\n    } else {\n      if (Object.keys(visibleQueries!).length !== Object.keys(cheatsheetQueries!).length) {\n        setVisibleQueries(visibleQueries);\n        return visibleQueries;\n      } else {\n        setVisibleQueries(cheatsheetQueries);\n        return cheatsheetQueries;\n      }\n    }\n  };\n\n  const filterQueriesByCategory = (categories: SelectableValue<string>) => {\n    if (categories.length > 0) {\n      const selectedCategories = categories.map((selectedCategory: SelectableValue) => selectedCategory.label);\n      const updatedVisibleQueries = selectedCategories.reduce(\n        (updatedVisibleQueries: CheatsheetQueries, queryCategory: string) => {\n          updatedVisibleQueries[queryCategory] = cheatsheetQueries![queryCategory]!;\n          return updatedVisibleQueries;\n        },\n        {}\n      );\n      setVisibleQueries(updatedVisibleQueries);\n    } else {\n      setVisibleQueries(cheatsheetQueries);\n    }\n  };\n\n  return (\n    <div>\n      {!isLoading && visibleQueries ? (\n        <div>\n          <div className={styles.filterAlignment}>\n            <Input\n              value={searchInputValue}\n              onChange={(e) => {\n                setSearchInputValue(e.currentTarget.value);\n                const filteredQueries = filterQueriesBySearch(e.currentTarget.value);\n                setVisibleQueries(filteredQueries);\n              }}\n              placeholder=\"Search Logs queries\"\n              width={40}\n            />\n            <Field label=\"Categories\" className={styles.categoryDropdown}>\n              <Select\n                options={dropdownMenu}\n                value={''}\n                onChange={(a) => filterQueriesByCategory(a)}\n                allowCustomValue={false}\n                backspaceRemovesValue={true}\n                placeholder=\"All categories\"\n                isClearable={true}\n                noOptionsMessage=\"Unable to list all categories\"\n                formatCreateLabel={(input: string) => `Category: ${input}`}\n                isSearchable={true}\n                isMulti={true}\n                width={40}\n              />\n            </Field>\n          </div>\n          <div className={styles.spacing}>\n            Query results:{' '}\n            {Object.keys(visibleQueries).reduce((totalQueries: number, category) => {\n              totalQueries = visibleQueries[category]!.length + totalQueries;\n              return totalQueries;\n            }, 0)}\n          </div>\n          <CustomScrollbar showScrollIndicators={true} autoHeightMax=\"350px\">\n            {Object.keys(visibleQueries).map((category: string) => {\n              if (visibleQueries[category]!.length) {\n                return (\n                  <Collapse\n                    label={category + ' ' + `(${visibleQueries[category]!.length})`}\n                    collapsible={true}\n                    isOpen={areDropdownsOpen[category]}\n                    onToggle={(isOpen) => setAreDropdownsOpen({ ...areDropdownsOpen, [category]: isOpen })}\n                    key={category}\n                  >\n                    {visibleQueries[category]!.map((query) => {\n                      return (\n                        <Card className={styles.card} key={query.id}>\n                          <Card.Heading>{query.displayName}</Card.Heading>\n                          <CustomScrollbar showScrollIndicators={true} autoHeightMax=\"100px\">\n                            <RawQuery\n                              aria-label={`${query.displayName} raw query`}\n                              query={query.body}\n                              lang={lang}\n                              className={styles.rawQuery}\n                            />\n                          </CustomScrollbar>\n                          <Card.Actions>\n                            <Button\n                              size=\"sm\"\n                              aria-label=\"use this query button\"\n                              onClick={() => {\n                                props.onChange({\n                                  refId: 'A',\n                                  queryType: AzureQueryType.LogAnalytics,\n                                  azureLogAnalytics: { query: query.body },\n                                  datasource: props.datasource,\n                                });\n                                reportInteraction('grafana_azure_cheatsheet_logs_query_selected', {\n                                  id: query.id,\n                                  queryName: query.displayName,\n                                  query: query.body,\n                                  queryCategories: query.related.categories,\n                                });\n                              }}\n                            >\n                              Use this query\n                            </Button>\n                          </Card.Actions>\n                        </Card>\n                      );\n                    })}\n                  </Collapse>\n                );\n              }\n              return;\n            })}\n          </CustomScrollbar>\n        </div>\n      ) : (\n        <LoadingPlaceholder text=\"Loading...\" />\n      )}\n    </div>\n  );\n};\n\nexport default AzureCheatSheet;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      width: '90%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    rawQuery: css({\n      backgroundColor: `${theme.colors.background.primary}`,\n      padding: `${theme.spacing(1)}`,\n      marginTop: `${theme.spacing(1)}`,\n    }),\n    spacing: css({\n      marginBottom: `${theme.spacing(1)}`,\n    }),\n    filterAlignment: css({\n      display: 'flex',\n    }),\n    categoryDropdown: css({\n      margin: '0 0 10px 10px',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { CoreApp } from '@grafana/data';\nimport { Modal } from '@grafana/ui';\n\nimport AzureLogAnalyticsDatasource from '../../azure_log_analytics/azure_log_analytics_datasource';\nimport { AzureMonitorQuery } from '../../dataquery.gen';\nimport AzureCheatSheet from '../AzureCheatSheet';\n\ntype Props = {\n  isOpen: boolean;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: AzureMonitorQuery) => void;\n  onAddQuery?: (query: AzureMonitorQuery) => void;\n  datasource: AzureLogAnalyticsDatasource;\n};\n\nexport const AzureCheatSheetModal = (props: Props) => {\n  const { isOpen, onClose, datasource, onChange } = props;\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <AzureCheatSheet\n        onChange={(a) => {\n          onChange(a);\n          onClose();\n        }}\n        query={{ refId: 'A' }}\n        datasource={datasource}\n      ></AzureCheatSheet>\n    </Modal>\n  );\n};\n","/**\nThis list is obtained parsing https://docs.microsoft.com/en-us/azure/governance/resource-graph/reference/supported-tables-resources\nTo programatically get the list, execute in the browser console:\n \n const i = {};\n document.querySelectorAll('li').forEach((li) => { \n    const m = li.textContent.match(/(.*\\..*\\/.*?)\\s\\((.*)\\)/);\n    if (m) {\n      i[m[1].toLowerCase()] = m[2];\n    }\n  });\n  i;\n \nNote: Validate that the output makes sense, the format of the page may change.\n */\nexport const resourceTypeDisplayNames: { [k: string]: string } = {\n  'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems': 'Backup Items',\n  'microsoft.resources/subscriptions': 'Subscriptions',\n  'microsoft.resources/subscriptions/resourcegroups': 'Resource groups',\n  'citrix.services/xenappessentials': 'Citrix Virtual Apps Essentials',\n  'citrix.services/xendesktopessentials': 'Citrix Virtual Desktops Essentials',\n  'dynatrace.observability/monitors': 'Dynatrace',\n  'github.enterprise/accounts': 'GitHub AE',\n  'microsoft.aad/domainservices': 'Azure AD Domain Services',\n  'microsoft.aadiam/privatelinkforazuread': 'Private Link for Azure AD',\n  'microsoft.agfoodplatform/farmbeats': 'Azure FarmBeats',\n  'microsoft.analysisservices/servers': 'Analysis Services',\n  'microsoft.anybuild/clusters': 'AnyBuild clusters',\n  'microsoft.apimanagement/service': 'API Management services',\n  'microsoft.appconfiguration/configurationstores': 'App Configuration',\n  'microsoft.appplatform/spring': 'Azure Spring Cloud',\n  'microsoft.attestation/attestationproviders': 'Attestation providers',\n  'microsoft.authorization/resourcemanagementprivatelinks': 'Resource management private links',\n  'microsoft.automation/automationaccounts': 'Automation Accounts',\n  'microsoft.automation/automationaccounts/runbooks': 'Runbook',\n  'microsoft.autonomoussystems/workspaces': 'Bonsai',\n  'microsoft.avs/privateclouds': 'AVS Private clouds',\n  'microsoft.azureactivedirectory/b2cdirectories': 'B2C Tenants',\n  'microsoft.azureactivedirectory/guestusages': 'Guest Usages',\n  'microsoft.azurearcdata/datacontrollers': 'Azure Arc data controllers',\n  'microsoft.azurearcdata/postgresinstances': 'Azure Arc-enabled PostgreSQL Hyperscale server groups',\n  'microsoft.azurearcdata/sqlmanagedinstances': 'SQL managed instances - Azure Arc',\n  'microsoft.azurearcdata/sqlserverinstances': 'SQL Server - Azure Arc',\n  'microsoft.azuredata/sqlserverregistrations': 'SQL Server registries',\n  'microsoft.azurepercept/accounts': 'Azure Percept accounts',\n  'microsoft.azurestackhci/clusters': 'Azure Stack HCI',\n  'microsoft.azurestackhci/virtualmachines': 'Azure Stack HCI virtual machine - Azure Arc',\n  'microsoft.baremetal/crayservers': 'Cray Servers',\n  'microsoft.baremetal/monitoringservers': 'Monitoring Servers',\n  'microsoft.baremetalinfrastructure/baremetalinstances': 'BareMetal Instances',\n  'microsoft.batch/batchaccounts': 'Batch accounts',\n  'microsoft.bing/accounts': 'Bing Resources',\n  'microsoft.botservice/botservices': 'Bot Services',\n  'microsoft.cache/redis': 'Azure Cache for Redis',\n  'microsoft.cache/redisenterprise': 'Redis Enterprise',\n  'microsoft.cdn/cdnwebapplicationfirewallpolicies': 'Content Delivery Network WAF policies',\n  'microsoft.cdn/profiles (front doors standard/premium': 'Preview)',\n  'microsoft.cdn/profiles/afdendpoints': 'Endpoints',\n  'microsoft.cdn/profiles/endpoints': 'Endpoints',\n  'microsoft.certificateregistration/certificateorders': 'App Service Certificates',\n  'microsoft.chaos/chaosexperiments': 'Chaos Experiments (Classic)',\n  'microsoft.chaos/experiments': 'Chaos Experiments',\n  'microsoft.classiccompute/domainnames': 'Cloud services (classic)',\n  'microsoft.classiccompute/virtualmachines': 'Virtual machines (classic)',\n  'microsoft.classicnetwork/networksecuritygroups': 'Network security groups (classic)',\n  'microsoft.classicnetwork/reservedips': 'Reserved IP addresses (classic)',\n  'microsoft.classicnetwork/virtualnetworks': 'Virtual networks (classic)',\n  'microsoft.classicstorage/storageaccounts': 'Storage accounts (classic)',\n  'microsoft.cloudtest/accounts': 'CloudTest Accounts',\n  'microsoft.cloudtest/hostedpools': '1ES Hosted Pools',\n  'microsoft.cloudtest/images': 'CloudTest Images',\n  'microsoft.cloudtest/pools': 'CloudTest Pools',\n  'microsoft.clusterstor/nodes': 'ClusterStors',\n  'microsoft.cognitiveservices/accounts': 'Cognitive Services',\n  'microsoft.compute/availabilitysets': 'Availability sets',\n  'microsoft.compute/capacityreservationgroups': 'Capacity Reservation Groups',\n  'microsoft.compute/cloudservices': 'Cloud services (extended support)',\n  'microsoft.compute/diskaccesses': 'Disk Accesses',\n  'microsoft.compute/diskencryptionsets': 'Disk Encryption Sets',\n  'microsoft.compute/disks': 'Disks',\n  'microsoft.compute/galleries': 'Azure compute galleries',\n  'microsoft.compute/galleries/applications': 'VM application definitions',\n  'microsoft.compute/galleries/applications/versions': 'VM application versions',\n  'microsoft.compute/galleries/images': 'VM image definitions',\n  'microsoft.compute/galleries/images/versions': 'VM image versions',\n  'microsoft.compute/hostgroups': 'Host groups',\n  'microsoft.compute/hostgroups/hosts': 'Hosts',\n  'microsoft.compute/images': 'Images',\n  'microsoft.compute/proximityplacementgroups': 'Proximity placement groups',\n  'microsoft.compute/restorepointcollections': 'Restore Point Collections',\n  'microsoft.compute/snapshots': 'Snapshots',\n  'microsoft.compute/sshpublickeys': 'SSH keys',\n  'microsoft.compute/virtualmachines': 'Virtual machines',\n  'microsoft.compute/virtualmachinescalesets': 'Virtual machine scale sets',\n  'microsoft.confidentialledger/ledgers': 'Confidential Ledgers',\n  'microsoft.confluent/organizations': 'Confluent organizations',\n  'microsoft.connectedcache/cachenodes': 'Connected Cache Resources',\n  'microsoft.connectedcache/enterprisecustomers': 'Connected Cache Resources',\n  'microsoft.connectedvehicle/platformaccounts': 'Connected Vehicle Platforms',\n  'microsoft.connectedvmwarevsphere/vcenters': 'VMware vCenters',\n  'microsoft.connectedvmwarevsphere/virtualmachines': 'VMware + AVS virtual machines',\n  'microsoft.containerinstance/containergroups': 'Container instances',\n  'microsoft.containerregistry/registries': 'Container registries',\n  'microsoft.containerregistry/registries/replications': 'Container registry replications',\n  'microsoft.containerregistry/registries/webhooks': 'Container registry webhooks',\n  'microsoft.containerservice/managedclusters': 'Kubernetes services',\n  'microsoft.dashboard/grafana': 'Grafana Workspaces',\n  'microsoft.databox/jobs': 'Azure Data Box',\n  'microsoft.databoxedge/databoxedgedevices': 'Azure Stack Edge / Data Box Gateway',\n  'microsoft.databricks/workspaces': 'Azure Databricks Services',\n  'microsoft.datacatalog/catalogs': 'Data Catalog',\n  'microsoft.datacollaboration/workspaces': 'Project CI',\n  'microsoft.datadog/monitors': 'Datadog',\n  'microsoft.datafactory/datafactories': 'Data factories',\n  'microsoft.datafactory/factories': 'Data factories (V2)',\n  'microsoft.datalakeanalytics/accounts': 'Data Lake Analytics',\n  'microsoft.datalakestore/accounts': 'Data Lake Storage Gen1',\n  'microsoft.datamigration/services': 'Azure Database Migration Services',\n  'microsoft.datamigration/services/projects': 'Azure Database Migration Projects',\n  'microsoft.datamigration/sqlmigrationservices': 'Azure Database Migration Services',\n  'microsoft.dataprotection/backupvaults': 'Backup vaults',\n  'microsoft.dataprotection/resourceguards': 'Resource Guards (Preview)',\n  'microsoft.datareplication/replicationvaults': 'Site Recovery Vaults',\n  'microsoft.datashare/accounts': 'Data Shares',\n  'microsoft.dbformariadb/servers': 'Azure Database for MariaDB servers',\n  'microsoft.dbformysql/flexibleservers': 'Azure Database for MySQL flexible servers',\n  'microsoft.dbformysql/servers': 'Azure Database for MySQL servers',\n  'microsoft.dbforpostgresql/flexibleservers': 'Azure Database for PostgreSQL flexible servers',\n  'microsoft.dbforpostgresql/servergroups': 'Azure Database for PostgreSQL server groups',\n  'microsoft.dbforpostgresql/servergroupsv2': 'Azure Database for PostgreSQL server groups',\n  'microsoft.dbforpostgresql/servers': 'Azure Database for PostgreSQL servers',\n  'microsoft.dbforpostgresql/serversv2': 'Azure Database for PostgreSQL servers v2',\n  'microsoft.deploymentmanager/rollouts': 'Rollouts',\n  'microsoft.desktopvirtualization/applicationgroups': 'Application groups',\n  'microsoft.desktopvirtualization/hostpools': 'Host pools',\n  'microsoft.desktopvirtualization/scalingplans': 'Scaling plans',\n  'microsoft.desktopvirtualization/workspaces': 'Workspaces',\n  'microsoft.devices/iothubs': 'IoT Hub',\n  'microsoft.devices/provisioningservices': 'Device Provisioning Services',\n  'microsoft.deviceupdate/accounts': 'Device Update for IoT Hubs',\n  'microsoft.devops/pipelines': 'DevOps Starter',\n  'microsoft.devtestlab/labs': 'DevTest Labs',\n  'microsoft.devtestlab/labs/virtualmachines': 'Virtual machines',\n  'microsoft.digitaltwins/digitaltwinsinstances': 'Azure Digital Twins',\n  'microsoft.documentdb/cassandraclusters': 'Azure Managed Instance for Apache Cassandra',\n  'microsoft.documentdb/databaseaccounts': 'Azure Cosmos DB accounts',\n  'microsoft.domainregistration/domains': 'App Service Domains',\n  'microsoft.edgeorder/addresses': 'Azure Edge Hardware Center Address',\n  'microsoft.edgeorder/orderitems': 'Azure Edge Hardware Center',\n  'microsoft.elastic/monitors': 'Elasticsearch (Elastic Cloud)',\n  'microsoft.eventgrid/domains': 'Event Grid Domains',\n  'microsoft.eventgrid/partnernamespaces': 'Event Grid Partner Namespaces',\n  'microsoft.eventgrid/partnerregistrations': 'Event Grid Partner Registrations',\n  'microsoft.eventgrid/partnertopics': 'Event Grid Partner Topics',\n  'microsoft.eventgrid/systemtopics': 'Event Grid System Topics',\n  'microsoft.eventgrid/topics': 'Event Grid Topics',\n  'microsoft.eventhub/clusters': 'Event Hubs Clusters',\n  'microsoft.eventhub/namespaces': 'Event Hubs Namespaces',\n  'microsoft.experimentation/experimentworkspaces': 'Experiment Workspaces',\n  'microsoft.extendedlocation/customlocations': 'Custom locations',\n  'microsoft.fidalgo/devcenters': 'Fidalgo DevCenters',\n  'microsoft.fidalgo/networksettings': 'Network Configurations',\n  'microsoft.fidalgo/projects': 'Fidalgo Projects',\n  'microsoft.fidalgo/projects/environments': 'Fidalgo Environments',\n  'microsoft.fluidrelay/fluidrelayservers': 'Fluid Relay',\n  'microsoft.genomics/accounts': 'Genomics accounts',\n  'microsoft.hanaonazure/hanainstances': 'SAP HANA on Azure',\n  'microsoft.hanaonazure/sapmonitors': 'Azure Monitors for SAP Solutions',\n  'microsoft.hdinsight/clusterpools': 'HDInsight cluster pools',\n  'microsoft.hdinsight/clusterpools/clusters': 'HDInsight gen2 clusters',\n  'microsoft.hdinsight/clusterpools/clusters/sessionclusters': 'HDInsight session clusters',\n  'microsoft.hdinsight/clusters': 'HDInsight clusters',\n  'microsoft.healthbot/healthbots': 'Azure Health Bot',\n  'microsoft.healthcareapis/services': 'Azure API for FHIR',\n  'microsoft.healthcareapis/workspaces': 'Healthcare APIs Workspaces',\n  'microsoft.healthcareapis/workspaces/dicomservices': 'DICOM services',\n  'microsoft.healthcareapis/workspaces/fhirservices': 'FHIR services',\n  'microsoft.healthcareapis/workspaces/iotconnectors': 'IoT connectors',\n  'microsoft.hpcworkbench/instances': 'HPC Workbenches (preview)',\n  'microsoft.hpcworkbench/instances/chambers': 'Chambers (preview)',\n  'microsoft.hpcworkbench/instances/chambers/accessprofiles': 'Chamber Profiles (preview)',\n  'microsoft.hpcworkbench/instances/chambers/workloads': 'Chamber VMs (preview)',\n  'microsoft.hpcworkbench/instances/consortiums': 'Consortiums (preview)',\n  'microsoft.hybridcompute/machines': 'Servers - Azure Arc',\n  'microsoft.hybridcompute/privatelinkscopes': 'Azure Arc Private Link Scopes',\n  'microsoft.hybridcontainerservice/provisionedclusters': 'Provisioned clusters',\n  'microsoft.hybriddata/datamanagers': 'StorSimple Data Managers',\n  'microsoft.hybridnetwork/devices': 'Azure Network Function Manager – Devices',\n  'microsoft.hybridnetwork/networkfunctions': 'Azure Network Function Manager – Network Functions',\n  'microsoft.importexport/jobs': 'Import/export jobs',\n  'microsoft.insights/components': 'Application Insights',\n  'microsoft.insights/datacollectionendpoints': 'Data collection endpoints',\n  'microsoft.insights/datacollectionrules': 'Data collection rules',\n  'microsoft.insights/privatelinkscopes': 'Azure Monitor Private Link Scopes',\n  'microsoft.insights/webtests': 'Availability tests',\n  'microsoft.insights/workbooks': 'Azure Workbooks',\n  'microsoft.insights/workbooktemplates': 'Azure Workbook Templates',\n  'microsoft.iotcentral/iotapps': 'IoT Central Applications',\n  'microsoft.keyvault/vaults': 'Key vaults',\n  'microsoft.kubernetes/connectedclusters': 'Kubernetes - Azure Arc',\n  'microsoft.kusto/clusters': 'Azure Data Explorer Clusters',\n  'microsoft.kusto/clusters/databases': 'Azure Data Explorer Databases',\n  'microsoft.labservices/labaccounts': 'Lab accounts',\n  'microsoft.labservices/labplans': 'Lab plans',\n  'microsoft.labservices/labs': 'Labs',\n  'microsoft.loadtestservice/loadtests': 'Azure Load Testing',\n  'microsoft.logic/integrationaccounts': 'Integration accounts',\n  'microsoft.logic/integrationserviceenvironments': 'Integration Service Environments',\n  'microsoft.logic/integrationserviceenvironments/managedapis': 'Managed Connector',\n  'microsoft.logic/workflows': 'Logic apps',\n  'microsoft.logz/monitors': 'Logz main account',\n  'microsoft.logz/monitors/accounts': 'Logz sub account',\n  'microsoft.logz/monitors/metricssource': 'Logz metrics data source',\n  'microsoft.machinelearning/commitmentplans': 'Machine Learning Studio (classic) web service plans',\n  'microsoft.machinelearning/webservices': 'Machine Learning Studio (classic) web services',\n  'microsoft.machinelearning/workspaces': 'Machine Learning Studio (classic) workspaces',\n  'microsoft.machinelearningservices/workspaces': 'Machine learning',\n  'microsoft.machinelearningservices/workspaces/onlineendpoints': 'Machine learning online endpoints',\n  'microsoft.machinelearningservices/workspaces/onlineendpoints/deployments': 'Machine learning online deployments',\n  'microsoft.maintenance/maintenanceconfigurations': 'Maintenance Configurations',\n  'microsoft.managedidentity/userassignedidentities': 'Managed Identities',\n  'microsoft.maps/accounts': 'Azure Maps Accounts',\n  'microsoft.maps/accounts/creators': 'Azure Maps Creator Resources',\n  'microsoft.media/mediaservices': 'Media Services',\n  'microsoft.media/mediaservices/liveevents': 'Live events',\n  'microsoft.media/mediaservices/streamingendpoints': 'Streaming Endpoints',\n  'microsoft.media/videoanalyzers': 'Video Analyzers',\n  'microsoft.migrate/projects': 'Migration projects',\n  'microsoft.mixedreality/objectanchorsaccounts': 'Object Anchors Accounts',\n  'microsoft.mixedreality/objectunderstandingaccounts': 'Object Understanding Accounts',\n  'microsoft.mixedreality/remoterenderingaccounts': 'Remote Rendering Accounts',\n  'microsoft.mixedreality/spatialanchorsaccounts': 'Spatial Anchors Accounts',\n  'microsoft.mobilenetwork/mobilenetworks': 'Mobile Networks',\n  'microsoft.mobilenetwork/mobilenetworks/datanetworks': 'Data Networks',\n  'microsoft.mobilenetwork/mobilenetworks/services': 'Services',\n  'microsoft.mobilenetwork/mobilenetworks/simpolicies': 'Sim Policies',\n  'microsoft.mobilenetwork/mobilenetworks/sites': 'Mobile Network Sites',\n  'microsoft.mobilenetwork/mobilenetworks/slices': 'Slices',\n  'microsoft.mobilenetwork/packetcorecontrolplanes': 'Packet Core Control Planes',\n  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes': 'Packet Core Data Planes',\n  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attacheddatanetworks': 'Attached Data Networks',\n  'microsoft.mobilenetwork/sims': 'Sims',\n  'microsoft.netapp/netappaccounts': 'NetApp accounts',\n  'microsoft.netapp/netappaccounts/capacitypools': 'Capacity pools',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes': 'Volumes',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes/snapshots': 'Snapshots',\n  'microsoft.netapp/netappaccounts/snapshotpolicies': 'Snapshot policies',\n  'microsoft.network/applicationgateways': 'Application gateways',\n  'microsoft.network/applicationgatewaywebapplicationfirewallpolicies': 'Application Gateway WAF policies',\n  'microsoft.network/applicationsecuritygroups': 'Application security groups',\n  'microsoft.network/azurefirewalls': 'Firewalls',\n  'microsoft.network/bastionhosts': 'Bastions',\n  'microsoft.network/connections': 'Connections',\n  'microsoft.network/customipprefixes': 'Custom IP Prefixes',\n  'microsoft.network/ddosprotectionplans': 'DDoS protection plans',\n  'microsoft.network/dnsforwardingrulesets': 'Dns Forwarding Rulesets',\n  'microsoft.network/dnsresolvers': 'DNS Private Resolvers',\n  'microsoft.network/dnszones': 'DNS zones',\n  'microsoft.network/expressroutecircuits': 'ExpressRoute circuits',\n  'microsoft.network/expressrouteports': 'ExpressRoute Direct',\n  'microsoft.network/firewallpolicies': 'Firewall Policies',\n  'microsoft.network/frontdoors': 'Front Doors',\n  'microsoft.network/frontdoorwebapplicationfirewallpolicies': 'Web Application Firewall policies (WAF)',\n  'microsoft.network/ipgroups': 'IP Groups',\n  'microsoft.network/loadbalancers': 'Load balancers',\n  'microsoft.network/localnetworkgateways': 'Local network gateways',\n  'microsoft.network/natgateways': 'NAT gateways',\n  'microsoft.network/networkexperimentprofiles': 'Internet Analyzer profiles',\n  'microsoft.network/networkinterfaces': 'Network interfaces',\n  'microsoft.network/networkmanagers': 'Network Managers',\n  'microsoft.network/networksecuritygroups': 'Network security groups',\n  'microsoft.network/networkwatchers': 'Network Watchers',\n  'microsoft.network/networkwatchers/connectionmonitors': 'Connection Monitors',\n  'microsoft.network/networkwatchers/flowlogs': 'NSG Flow Logs',\n  'microsoft.network/privatednszones': 'Private DNS zones',\n  'microsoft.network/privateendpoints': 'Private endpoints',\n  'microsoft.network/privatelinkservices': 'Private link services',\n  'microsoft.network/publicipaddresses': 'Public IP addresses',\n  'microsoft.network/publicipprefixes': 'Public IP Prefixes',\n  'microsoft.network/routefilters': 'Route filters',\n  'microsoft.network/routetables': 'Route tables',\n  'microsoft.network/serviceendpointpolicies': 'Service endpoint policies',\n  'microsoft.network/trafficmanagerprofiles': 'Traffic Manager profiles',\n  'microsoft.network/virtualnetworkgateways': 'Virtual network gateways',\n  'microsoft.network/virtualnetworks': 'Virtual networks',\n  'microsoft.network/virtualwans': 'Virtual WANs',\n  'microsoft.notificationhubs/namespaces': 'Notification Hub Namespaces',\n  'microsoft.notificationhubs/namespaces/notificationhubs': 'Notification Hubs',\n  'microsoft.openenergyplatform/energyservices': 'Project Oak Forest',\n  'microsoft.openlogisticsplatform/workspaces': 'Open Supply Chain Platform',\n  'microsoft.operationalinsights/querypacks': 'Log Analytics query packs',\n  'microsoft.operationalinsights/workspaces': 'Log Analytics workspaces',\n  'microsoft.operationsmanagement/solutions': 'Solutions',\n  'microsoft.orbital/contactprofiles': 'Contact Profiles',\n  'microsoft.orbital/edgesites': 'Edge Sites',\n  'microsoft.orbital/groundstations': 'Ground Stations',\n  'microsoft.orbital/l2connections': 'L2 Connections',\n  'microsoft.orbital/spacecrafts': 'Spacecrafts',\n  'microsoft.peering/peerings': 'Peerings',\n  'microsoft.peering/peeringservices': 'Peering Services',\n  'microsoft.playfab/playeraccountpools': 'PlayFab player account pools',\n  'microsoft.playfab/titles': 'PlayFab titles',\n  'microsoft.portal/dashboards': 'Shared dashboards',\n  'microsoft.powerbidedicated/capacities': 'Power BI Embedded',\n  'microsoft.purview/accounts': 'Microsoft Purview accounts',\n  'microsoft.quantum/workspaces': 'Quantum Workspaces',\n  'microsoft.recommendationsservice/accounts': 'Intelligent Recommendations Accounts',\n  'microsoft.recommendationsservice/accounts/modeling': 'Modeling',\n  'microsoft.recommendationsservice/accounts/serviceendpoints': 'Service Endpoints',\n  'microsoft.recoveryservices/vaults': 'Recovery Services vaults',\n  'microsoft.redhatopenshift/openshiftclusters': 'Azure Red Hat OpenShift',\n  'microsoft.relay/namespaces': 'Relays',\n  'microsoft.resourceconnector/appliances': 'Resource bridges',\n  'microsoft.resourcegraph/queries': 'Resource Graph queries',\n  'microsoft.resources/deploymentscripts': 'Deployment Scripts',\n  'microsoft.resources/templatespecs': 'Template specs',\n  'microsoft.saas/applications': 'Software as a Service (classic)',\n  'microsoft.saas/resources': 'SaaS',\n  'microsoft.scom/managedinstances': 'Aquila Instances',\n  'microsoft.scvmm/virtualmachines': 'SCVMM virtual machine - Azure Arc',\n  'microsoft.scvmm/vmmservers': 'SCVMM management servers',\n  'microsoft.search/searchservices': 'Search services',\n  'microsoft.securitydetonation/chambers': 'Security Detonation Chambers',\n  'microsoft.servicebus/namespaces': 'Service Bus Namespaces',\n  'microsoft.servicefabric/clusters': 'Service Fabric clusters',\n  'microsoft.servicefabric/managedclusters': 'Service Fabric managed clusters',\n  'microsoft.serviceshub/connectors': 'Services Hub Connectors',\n  'microsoft.signalrservice/signalr': 'SignalR',\n  'microsoft.signalrservice/webpubsub': 'Web PubSub Service',\n  'microsoft.solutions/applicationdefinitions': 'Service catalog managed application definitions',\n  'microsoft.solutions/applications': 'Managed applications',\n  'microsoft.sql/instancepools': 'Instance pools',\n  'microsoft.sql/managedinstances': 'SQL managed instances',\n  'microsoft.sql/managedinstances/databases': 'Managed databases',\n  'microsoft.sql/servers': 'SQL servers',\n  'microsoft.sql/servers/databases': 'SQL databases',\n  'microsoft.sql/servers/elasticpools': 'SQL elastic pools',\n  'microsoft.sql/servers/jobagents': 'Elastic Job agents',\n  'microsoft.sql/virtualclusters': 'Virtual clusters',\n  'microsoft.sqlvirtualmachine/sqlvirtualmachines': 'SQL virtual machines',\n  'microsoft.storage/storageaccounts': 'Storage accounts',\n  'microsoft.storagecache/amlfilesystems': 'Lustre File Systems',\n  'microsoft.storagecache/caches': 'HPC caches',\n  'microsoft.storagepool/diskpools': 'Disk Pools',\n  'microsoft.storagesync/storagesyncservices': 'Storage Sync Services',\n  'microsoft.storagesyncdev/storagesyncservices': 'Storage Sync Services',\n  'microsoft.storagesyncint/storagesyncservices': 'Storage Sync Services',\n  'microsoft.storsimple/managers': 'StorSimple Device Managers',\n  'microsoft.streamanalytics/clusters': 'Stream Analytics clusters',\n  'microsoft.streamanalytics/streamingjobs': 'Stream Analytics jobs',\n  'microsoft.synapse/privatelinkhubs': 'Azure Synapse Analytics (private link hubs)',\n  'microsoft.synapse/workspaces': 'Azure Synapse Analytics',\n  'microsoft.synapse/workspaces/bigdatapools': 'Apache Spark pools',\n  'microsoft.synapse/workspaces/kustopools': 'Data Explorer pools (preview)',\n  'microsoft.synapse/workspaces/sqlpools': 'Dedicated SQL pools',\n  'microsoft.testbase/testbaseaccounts': 'Test Base Accounts',\n  'microsoft.testbase/testbaseaccounts/packages': 'Test Base Packages',\n  'microsoft.timeseriesinsights/environments': 'Time Series Insights environments',\n  'microsoft.timeseriesinsights/environments/eventsources': 'Time Series Insights event sources',\n  'microsoft.timeseriesinsights/environments/referencedatasets': 'Time Series Insights reference data sets',\n  'microsoft.videoindexer/accounts': 'Video Analyzer for Media',\n  'microsoft.virtualmachineimages/imagetemplates': 'Image Templates',\n  'microsoft.visualstudio/account': 'Azure DevOps organizations',\n  'microsoft.visualstudio/account/project': 'DevOps Starter',\n  'microsoft.vmwarecloudsimple/dedicatedcloudnodes': 'CloudSimple Nodes',\n  'microsoft.vmwarecloudsimple/dedicatedcloudservices': 'CloudSimple Services',\n  'microsoft.vmwarecloudsimple/virtualmachines': 'CloudSimple Virtual Machines',\n  'microsoft.vsonline/plans': 'Visual Studio Online Plans',\n  'microsoft.web/connectiongateways': 'On-premises data gateways',\n  'microsoft.web/connections': 'API Connections',\n  'microsoft.web/containerapps': 'Container Apps',\n  'microsoft.web/customapis': 'Logic Apps Custom Connector',\n  'microsoft.web/hostingenvironments': 'App Service Environments',\n  'microsoft.web/kubeenvironments': 'App Service Kubernetes Environments',\n  'microsoft.web/serverfarms': 'App Service plans',\n  'microsoft.web/sites': 'App Services',\n  'microsoft.web/sites/slots': 'App Service (Slots)',\n  'microsoft.web/staticsites': 'Static Web Apps',\n  'microsoft.windowsesu/multipleactivationkeys': 'Windows Multiple Activation Keys',\n  'microsoft.windowsiot/deviceservices': 'Windows 10 IoT Core Services',\n  'microsoft.workloads/monitors': 'Azure Monitors for SAP Solutions (v2)',\n  'microsoft.workloads/phpworkloads': 'Scalable WordPress on Linux',\n  'microsoft.workloads/sapvirtualinstances': 'SAP Virtual Instances',\n  'microsoft.workloads/sapvirtualinstances/applicationinstances': 'SAP app server instances',\n  'microsoft.workloads/sapvirtualinstances/centralinstances': 'SAP central server instances',\n  'microsoft.workloads/sapvirtualinstances/databaseinstances': 'SAP database server instances',\n  'nginx.nginxplus/nginxdeployments': 'NGINX Deployment',\n  'providers.test/statefulibizaengines': 'VLCentral Help',\n  'wandisco.fusion/fusiongroups': 'LiveData Planes',\n  'wandisco.fusion/fusiongroups/azurezones': 'Azure Zones',\n  'wandisco.fusion/fusiongroups/azurezones/plugins': 'Plugins',\n  'wandisco.fusion/fusiongroups/hivereplicationrules': 'Hive Replication Rules',\n  'wandisco.fusion/fusiongroups/managedonpremzones': 'On-premises Zones',\n  'wandisco.fusion/fusiongroups/replicationrules': 'Replication Rules',\n  'wandisco.fusion/migrators': 'LiveData Migrators',\n  'wandisco.fusion/migrators/exclusiontemplates': 'Exclusions',\n  'wandisco.fusion/migrators/livedatamigrations': 'Migrations',\n  'wandisco.fusion/migrators/metadatamigrations': 'Metadata Migrations',\n  'wandisco.fusion/migrators/metadatatargets': 'Metadata Targets',\n  'wandisco.fusion/migrators/pathmappings': 'Path Mappings',\n  'wandisco.fusion/migrators/targets': 'Targets',\n  'microsoft.security/insights/classification': 'Data Sensitivity Security Insights (Preview)',\n  'microsoft.security/locations/alerts': 'Security Alerts',\n};\n\n// This list has been manually written using the Azure Portal as the source.\n// Visit https://portal.azure.com/#view/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/~/metrics\n// and go to Select a scope > Resource types > Multi-resource compatible (preview)\nexport const multiResourceCompatibleTypes: { [ns: string]: boolean } = {\n  'microsoft.cache/redis': true, // 'Azure Cache for Redis'\n  'microsoft.dbforpostgresql/flexibleservers': true, // 'Azure Database for PostgreSQL flexible servers'\n  'microsoft.storagecache/amlfilesystems': true, // 'Lustre File Systems'\n  'microsoft.databoxedge/databoxedgedevices': true, // 'Azure Stack Edge / Data Box Gateway'\n  'microsoft.dataprotection/backupvaults': true, // 'Backup vaults'\n  'microsoft.netapp/netappaccounts/capacitypools': true, // 'Capacity pools'\n  'microsoft.network/networkwatchers/connectionmonitors': true, // 'Connection Monitors'\n  'microsoft.keyvault/vaults': true, // 'Key vaults'\n  'microsoft.recoveryservices/vaults': true, // 'Recovery Services vaults'\n  'microsoft.sql/servers/databases': true, // 'SQL databases'\n  'microsoft.sql/servers/elasticpools': true, // 'SQL elastic pools'\n  'microsoft.compute/virtualmachinescalesets': true, // 'Virtual machine scale sets'\n  'microsoft.compute/virtualmachines': true, // 'Virtual machines'\n  'microsoft.signalrservice/webpubsub': true, // 'Web PubSub Service'\n};\n\nexport const resourceTypes = [\n  'microsoft.aad/domainservices',\n  'microsoft.aadiam/azureadmetrics',\n  'microsoft.analysisservices/servers',\n  'microsoft.apimanagement/service',\n  'microsoft.app/containerapps',\n  'microsoft.app/managedenvironments',\n  'microsoft.appconfiguration/configurationstores',\n  'microsoft.appplatform/spring',\n  'microsoft.automation/automationaccounts',\n  'microsoft.avs/privateclouds',\n  'microsoft.azuresphere/catalogs',\n  'microsoft.azurestackhci/clusters',\n  'microsoft.azurestackresourcemonitor/storageaccountmonitor',\n  'microsoft.batch/batchaccounts',\n  'microsoft.batchai/workspaces',\n  'microsoft.bing/accounts',\n  'microsoft.botservice/botservices',\n  'microsoft.botservice/botservices/channels',\n  'microsoft.botservice/botservices/connections',\n  'microsoft.botservice/checknameavailability',\n  'microsoft.botservice/hostsettings',\n  'microsoft.botservice/listauthserviceproviders',\n  'microsoft.botservice/listqnamakerendpointkeys',\n  'microsoft.cache/redis',\n  'microsoft.cache/redisenterprise',\n  'microsoft.cdn/cdnwebapplicationfirewallpolicies',\n  'microsoft.cdn/profiles',\n  'microsoft.classiccompute/domainnames',\n  'microsoft.classiccompute/domainnames/slots/roles',\n  'microsoft.classiccompute/virtualmachines',\n  'microsoft.classicstorage/storageaccounts',\n  'microsoft.classicstorage/storageaccounts/blobservices',\n  'microsoft.classicstorage/storageaccounts/fileservices',\n  'microsoft.classicstorage/storageaccounts/queueservices',\n  'microsoft.classicstorage/storageaccounts/tableservices',\n  'microsoft.cloudtest/hostedpools',\n  'microsoft.cloudtest/pools',\n  'microsoft.clusterstor/nodes',\n  'microsoft.codesigning/codesigningaccounts',\n  'microsoft.cognitiveservices/accounts',\n  'microsoft.communication/communicationservices',\n  'microsoft.compute/cloudservices',\n  'microsoft.compute/cloudservices/roles',\n  'microsoft.compute/disks',\n  'microsoft.compute/virtualmachines',\n  'microsoft.compute/virtualmachinescalesets',\n  'microsoft.compute/virtualmachinescalesets/virtualmachines',\n  'microsoft.connectedcache/cachenodes',\n  'microsoft.connectedcache/enterprisemcccustomers',\n  'microsoft.connectedcache/ispcustomers',\n  'microsoft.connectedvehicle/platformaccounts',\n  'microsoft.containerinstance/containergroups',\n  'microsoft.containerinstance/containerscalesets',\n  'microsoft.containerregistry/registries',\n  'microsoft.containerservice/managedclusters',\n  'microsoft.customerinsights/hubs',\n  'microsoft.customproviders/resourceproviders',\n  'microsoft.dashboard/grafana',\n  'microsoft.databoxedge/databoxedgedevices',\n  'microsoft.datacollaboration/workspaces',\n  'microsoft.datafactory/datafactories',\n  'microsoft.datafactory/factories',\n  'microsoft.datalakeanalytics/accounts',\n  'microsoft.datalakestore/accounts',\n  'microsoft.dataprotection/backupvaults',\n  'microsoft.datashare/accounts',\n  'microsoft.dbformariadb/servers',\n  'microsoft.dbformysql/flexibleservers',\n  'microsoft.dbformysql/servers',\n  'microsoft.dbforpostgresql/flexibleservers',\n  'microsoft.dbforpostgresql/servergroupsv2',\n  'microsoft.dbforpostgresql/servers',\n  'microsoft.dbforpostgresql/serversv2',\n  'microsoft.devices/iothubs',\n  'microsoft.devices/provisioningservices',\n  'microsoft.digitaltwins/digitaltwinsinstances',\n  'microsoft.documentdb/cassandraclusters',\n  'microsoft.documentdb/databaseaccounts',\n  'microsoft.documentdb/mongoclusters',\n  'microsoft.edgezones/edgezones',\n  'microsoft.enterpriseknowledgegraph/services',\n  'microsoft.eventgrid/domains',\n  'microsoft.eventgrid/eventsubscriptions',\n  'microsoft.eventgrid/extensiontopics',\n  'microsoft.eventgrid/namespaces',\n  'microsoft.eventgrid/partnernamespaces',\n  'microsoft.eventgrid/partnertopics',\n  'microsoft.eventgrid/systemtopics',\n  'microsoft.eventgrid/topics',\n  'microsoft.eventhub/clusters',\n  'microsoft.eventhub/namespaces',\n  'microsoft.fabric.admin/fabriclocations',\n  'microsoft.hdinsight/clusters',\n  'microsoft.healthcareapis/services',\n  'microsoft.healthcareapis/workspaces/dicomservices',\n  'microsoft.healthcareapis/workspaces/fhirservices',\n  'microsoft.healthcareapis/workspaces/iotconnectors',\n  'microsoft.healthmodel/healthmodels',\n  'microsoft.hybridcontainerservice/provisionedclusters',\n  'microsoft.hybridnetwork/networkfunctions',\n  'microsoft.hybridnetwork/virtualnetworkfunctions',\n  'microsoft.insights/autoscalesettings',\n  'microsoft.insights/components',\n  'microsoft.iotcentral/iotapps',\n  'microsoft.iotspaces/graph',\n  'microsoft.keyvault/managedhsms',\n  'microsoft.keyvault/vaults',\n  'microsoft.kubernetes/connectedclusters',\n  'microsoft.kubernetesconfiguration/extensions',\n  'microsoft.kusto/clusters',\n  'microsoft.logic/integrationserviceenvironments',\n  'microsoft.logic/workflows',\n  'microsoft.machinelearningservices/workspaces',\n  'microsoft.machinelearningservices/workspaces/onlineendpoints',\n  'microsoft.machinelearningservices/workspaces/onlineendpoints/deployments',\n  'microsoft.managednetworkfabric/internetgateways',\n  'microsoft.managednetworkfabric/l3isolationdomains',\n  'microsoft.managednetworkfabric/networkdevices',\n  'microsoft.maps/accounts',\n  'microsoft.media/mediaservices',\n  'microsoft.media/mediaservices/liveevents',\n  'microsoft.media/mediaservices/streamingendpoints',\n  'microsoft.media/videoanalyzers',\n  'microsoft.mixedreality/remoterenderingaccounts',\n  'microsoft.mixedreality/spatialanchorsaccounts',\n  'microsoft.mobilenetwork/packetcorecontrolplanes',\n  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes',\n  'microsoft.monitor/accounts',\n  'microsoft.netapp/netappaccounts/capacitypools',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes',\n  'microsoft.network/applicationgateways',\n  'microsoft.network/azurefirewalls',\n  'microsoft.network/bastionhosts',\n  'microsoft.network/connections',\n  'microsoft.network/dnsforwardingrulesets',\n  'microsoft.network/dnsresolvers',\n  'microsoft.network/dnszones',\n  'microsoft.network/expressroutecircuits',\n  'microsoft.network/expressroutecircuits/peerings',\n  'microsoft.network/expressroutegateways',\n  'microsoft.network/expressrouteports',\n  'microsoft.network/frontdoors',\n  'microsoft.network/loadbalancers',\n  'microsoft.network/natgateways',\n  'microsoft.network/networkinterfaces',\n  'microsoft.network/networkmanagers/ipampools',\n  'microsoft.network/networkvirtualappliances',\n  'microsoft.network/networkwatchers',\n  'microsoft.network/networkwatchers/connectionmonitors',\n  'microsoft.network/p2svpngateways',\n  'microsoft.network/privatednszones',\n  'microsoft.network/privateendpoints',\n  'microsoft.network/privatelinkservices',\n  'microsoft.network/publicipaddresses',\n  'microsoft.network/publicipprefixes',\n  'microsoft.network/trafficmanagerprofiles',\n  'microsoft.network/virtualhubs',\n  'microsoft.network/virtualnetworkgateways',\n  'microsoft.network/virtualnetworks',\n  'microsoft.network/virtualrouters',\n  'microsoft.network/vpngateways',\n  'microsoft.networkanalytics/dataconnectors',\n  'microsoft.networkcloud/baremetalmachines',\n  'microsoft.networkcloud/clusters',\n  'microsoft.networkcloud/storageappliances',\n  'microsoft.networkfunction/azuretrafficcollectors',\n  'microsoft.notificationhubs/namespaces/notificationhubs',\n  'microsoft.operationalinsights/workspaces',\n  'microsoft.operationsmanagement/solutions',\n  'microsoft.orbital/contactprofiles',\n  'microsoft.orbital/l2connections',\n  'microsoft.orbital/spacecrafts',\n  'microsoft.orbital/terminals',\n  'microsoft.peering/peerings',\n  'microsoft.peering/peeringservices',\n  'microsoft.playfab/titles',\n  'microsoft.powerbidedicated/capacities',\n  'microsoft.purview/accounts',\n  'microsoft.recoveryservices/vaults',\n  'microsoft.relay/namespaces',\n  'microsoft.resources/subscriptions',\n  'microsoft.search/searchservices',\n  'microsoft.securitydetonation/chambers',\n  'microsoft.securitydetonation/securitydetonationchambers',\n  'microsoft.servicebus/namespaces',\n  'microsoft.servicefabricmesh/applications',\n  'microsoft.servicenetworking/trafficcontrollers',\n  'microsoft.signalrservice/signalr',\n  'microsoft.signalrservice/signalr/replicas',\n  'microsoft.signalrservice/webpubsub',\n  'microsoft.signalrservice/webpubsub/replicas',\n  'microsoft.singularity/accounts',\n  'microsoft.sql/managedinstances',\n  'microsoft.sql/servers/databases',\n  'microsoft.sql/servers/elasticpools',\n  'microsoft.sql/servers/jobagents',\n  'microsoft.storage/storageaccounts',\n  'microsoft.storage/storageaccounts/blobservices',\n  'microsoft.storage/storageaccounts/fileservices',\n  'microsoft.storage/storageaccounts/objectreplicationpolicies',\n  'microsoft.storage/storageaccounts/queueservices',\n  'microsoft.storage/storageaccounts/storagetasks',\n  'microsoft.storage/storageaccounts/tableservices',\n  'microsoft.storage/storagetasks',\n  'microsoft.storagecache/amlfilesystems',\n  'microsoft.storagecache/caches',\n  'microsoft.storagemover/storagemovers',\n  'microsoft.storagesync/storagesyncservices',\n  'microsoft.storagetasks/storagetasks',\n  'microsoft.streamanalytics/streamingjobs',\n  'microsoft.synapse/workspaces',\n  'microsoft.synapse/workspaces/bigdatapools',\n  'microsoft.synapse/workspaces/kustopools',\n  'microsoft.synapse/workspaces/scopepools',\n  'microsoft.synapse/workspaces/sqlpools',\n  'microsoft.timeseriesinsights/environments',\n  'microsoft.timeseriesinsights/environments/eventsources',\n  'microsoft.vmwarecloudsimple/virtualmachines',\n  'microsoft.voiceservices/communicationsgateways',\n  'microsoft.web/containerapps',\n  'microsoft.web/hostingenvironments',\n  'microsoft.web/hostingenvironments/multirolepools',\n  'microsoft.web/hostingenvironments/workerpools',\n  'microsoft.web/serverfarms',\n  'microsoft.web/sites',\n  'microsoft.web/sites/slots',\n  'microsoft.web/staticsites',\n  'nginx.nginxplus/nginxdeployments',\n  'wandisco.fusion/migrators',\n  'wandisco.fusion/migrators/datatransferagents',\n  'wandisco.fusion/migrators/livedatamigrations',\n  'wandisco.fusion/migrators/metadatamigrations',\n];\n","/**\nThis list is obtained parsing https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-categories\nTo programatically get the list, execute in the browser console:\n \n const i = [];\n document.querySelectorAll('*[id]').forEach((el) => { \n  if(el.textContent.match(/^(microsoft|Microsoft|Wandisco)/)) {\n    i.push(el.textContent.toLowerCase())\n  }});\n  i;\n \nNote: Validate that the output makes sense, the format of the page may change.\n \nThat list is not complete so we should merge it with the one below. You can do with a node console:\n \n  const u = require('lodash')\n  const new = [list from above]\n  const logsResourceTypes = [this list]\n  console.dir(u.uniq(logsResourceTypes.concat(new)).sort(), {'maxArrayLength': null})\n \n */\n\nexport const logsResourceTypes = [\n  'microsoft.aad/domainservices',\n  'microsoft.aadiam/azureadmetrics',\n  'microsoft.aadiam/tenants',\n  'microsoft.agfoodplatform/farmbeats',\n  'microsoft.analysisservices/servers',\n  'microsoft.apimanagement/service',\n  'microsoft.appconfiguration/configurationstores',\n  'microsoft.appplatform/spring',\n  'microsoft.attestation/attestationproviders',\n  'microsoft.automation/automationaccounts',\n  'microsoft.autonomousdevelopmentplatform/accounts',\n  'microsoft.autonomousdevelopmentplatform/datapools',\n  'microsoft.autonomousdevelopmentplatform/workspaces',\n  'microsoft.avs/privateclouds',\n  'microsoft.azurestackresourcemonitor/storageaccountmonitor',\n  'microsoft.batch/batchaccounts',\n  'microsoft.batchai/workspaces',\n  'microsoft.blockchain/blockchainmembers',\n  'microsoft.blockchain/cordamembers',\n  'microsoft.botservice/botservices',\n  'microsoft.cache/redis',\n  'microsoft.cache/redisenterprise',\n  'microsoft.cdn/cdnwebapplicationfirewallpolicies',\n  'microsoft.cdn/profiles',\n  'microsoft.cdn/profiles/endpoints',\n  'microsoft.classiccompute/domainnames',\n  'microsoft.classiccompute/virtualmachines',\n  'microsoft.classicnetwork/networksecuritygroups',\n  'microsoft.classicstorage/storageaccounts',\n  'microsoft.cognitiveservices/accounts',\n  'microsoft.communication/communicationservices',\n  'microsoft.compute/disks',\n  'microsoft.compute/virtualmachines',\n  'microsoft.compute/virtualmachinescalesets',\n  'microsoft.connectedcache/cachenodes',\n  'microsoft.connectedvehicle/platformaccounts',\n  'microsoft.containerinstance/containergroups',\n  'microsoft.containerregistry/registries',\n  'microsoft.containerservice/managedclusters',\n  'microsoft.customerinsights/hubs',\n  'microsoft.customproviders/resourceproviders',\n  'microsoft.d365customerinsights/instances',\n  'microsoft.dashboard/grafana',\n  'microsoft.databoxedge/databoxedgedevices',\n  'microsoft.databricks/workspaces',\n  'microsoft.datacollaboration/workspaces',\n  'microsoft.datafactory/datafactories',\n  'microsoft.datafactory/factories',\n  'microsoft.datalakeanalytics/accounts',\n  'microsoft.datalakestore/accounts',\n  'microsoft.datashare/accounts',\n  'microsoft.dbformariadb/servers',\n  'microsoft.dbformysql/flexibleservers',\n  'microsoft.dbformysql/servers',\n  'microsoft.dbforpostgresql/flexibleservers',\n  'microsoft.dbforpostgresql/servergroupsv2',\n  'microsoft.dbforpostgresql/servers',\n  'microsoft.dbforpostgresql/serversv2',\n  'microsoft.desktopvirtualization/applicationgroups',\n  'microsoft.desktopvirtualization/hostpools',\n  'microsoft.desktopvirtualization/scalingplans',\n  'microsoft.desktopvirtualization/workspaces',\n  'microsoft.devices/elasticpools/iothubtenants',\n  'microsoft.devices/iothubs',\n  'microsoft.devices/provisioningservices',\n  'microsoft.digitaltwins/digitaltwinsinstances',\n  'microsoft.documentdb/cassandraclusters',\n  'microsoft.documentdb/databaseaccounts',\n  'microsoft.eventgrid/domains',\n  'microsoft.eventgrid/partnernamespaces',\n  'microsoft.eventgrid/partnertopics',\n  'microsoft.eventgrid/systemtopics',\n  'microsoft.eventgrid/topics',\n  'microsoft.eventhub/clusters',\n  'microsoft.eventhub/namespaces',\n  'microsoft.experimentation/experimentworkspaces',\n  'microsoft.fabric.admin/fabriclocations',\n  'microsoft.hdinsight/clusters',\n  'microsoft.healthcareapis/services',\n  'microsoft.healthcareapis/workspaces/dicomservices',\n  'microsoft.healthcareapis/workspaces/fhirservices',\n  'microsoft.insights/autoscalesettings',\n  'microsoft.insights/components',\n  'microsoft.insights/qos',\n  'microsoft.iotcentral/iotapps',\n  'microsoft.keyvault/managedhsms',\n  'microsoft.keyvault/vaults',\n  'microsoft.kubernetes/connectedclusters',\n  'microsoft.kusto/clusters',\n  'microsoft.loadtestservice/loadtests',\n  'microsoft.logic/integrationaccounts',\n  'microsoft.logic/integrationserviceenvironments',\n  'microsoft.logic/workflows',\n  'microsoft.machinelearningservices/workspaces',\n  'microsoft.media/mediaservices',\n  'microsoft.media/mediaservices/liveevents',\n  'microsoft.media/mediaservices/streamingendpoints',\n  'microsoft.media/videoanalyzers',\n  'microsoft.netapp/netappaccounts/capacitypools',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes',\n  'microsoft.network/applicationgateways',\n  'microsoft.network/azurefirewalls',\n  'microsoft.network/bastionhosts',\n  'microsoft.network/connections',\n  'microsoft.network/dnszones',\n  'microsoft.network/expressroutecircuits',\n  'microsoft.network/expressroutegateways',\n  'microsoft.network/expressrouteports',\n  'microsoft.network/frontdoors',\n  'microsoft.network/loadbalancers',\n  'microsoft.network/natgateways',\n  'microsoft.network/networkinterfaces',\n  'microsoft.network/networksecuritygroups',\n  'microsoft.network/networksecurityperimeters',\n  'microsoft.network/networkvirtualappliances',\n  'microsoft.network/networkwatchers',\n  'microsoft.network/networkwatchers/connectionmonitors',\n  'microsoft.network/p2svpngateways',\n  'microsoft.network/privateendpoints',\n  'microsoft.network/privatelinkservices',\n  'microsoft.network/publicipaddresses',\n  'microsoft.network/trafficmanagerprofiles',\n  'microsoft.network/virtualnetworkgateways',\n  'microsoft.network/virtualnetworks',\n  'microsoft.network/vpngateways',\n  'microsoft.networkfunction/azuretrafficcollectors',\n  'microsoft.notificationhubs/namespaces',\n  'microsoft.notificationhubs/namespaces/notificationhubs',\n  'microsoft.openlogisticsplatform/workspaces',\n  'microsoft.operationalinsights/workspaces',\n  'microsoft.operationsmanagement/solutions',\n  'microsoft.peering/peeringservices',\n  'microsoft.powerbi/tenants',\n  'microsoft.powerbi/tenants/workspaces',\n  'microsoft.powerbidedicated/capacities',\n  'microsoft.purview/accounts',\n  'microsoft.recoveryservices/vaults',\n  'microsoft.relay/namespaces',\n  'microsoft.resources/subscriptions',\n  'microsoft.resources/subscriptions/resourcegroups',\n  'microsoft.search/searchservices',\n  'microsoft.security/antimalwaresettings',\n  'microsoft.securityinsights/settings',\n  'microsoft.servicebus/namespaces',\n  'microsoft.signalrservice/signalr',\n  'microsoft.signalrservice/webpubsub',\n  'microsoft.singularity/accounts',\n  'microsoft.sql/managedinstances',\n  'microsoft.sql/managedinstances/databases',\n  'microsoft.sql/servers/databases',\n  'microsoft.sql/servers/elasticpools',\n  'microsoft.storage/storageaccounts',\n  'microsoft.storage/storageaccounts/blobservices',\n  'microsoft.storage/storageaccounts/fileservices',\n  'microsoft.storage/storageaccounts/queueservices',\n  'microsoft.storage/storageaccounts/tableservices',\n  'microsoft.storagecache/caches',\n  'microsoft.storagesync/storagesyncservices',\n  'microsoft.streamanalytics/streamingjobs',\n  'microsoft.synapse/workspaces',\n  'microsoft.synapse/workspaces/bigdatapools',\n  'microsoft.synapse/workspaces/kustopools',\n  'microsoft.synapse/workspaces/scopepools',\n  'microsoft.synapse/workspaces/sqlpools',\n  'microsoft.timeseriesinsights/environments',\n  'microsoft.timeseriesinsights/environments/eventsources',\n  'microsoft.videoindexer/accounts',\n  'microsoft.vmwarecloudsimple/virtualmachines',\n  'microsoft.web/hostingenvironments',\n  'microsoft.web/hostingenvironments/workerpools',\n  'microsoft.web/serverfarms',\n  'microsoft.web/sites',\n  'microsoft.web/sites/slots',\n];\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { Input, Label, InlineField, Button, useStyles2 } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorResource } from '../../types';\n\nexport interface ResourcePickerProps<T> {\n  resources: T[];\n  onChange: (resources: T[]) => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  resourceList: css({ display: 'flex', columnGap: theme.spacing(1), flexWrap: 'wrap', marginBottom: theme.spacing(1) }),\n  resource: css({ flex: '0 0 auto' }),\n  resourceLabel: css({ padding: theme.spacing(1) }),\n  resourceGroupAndName: css({ display: 'flex', columnGap: theme.spacing(0.5) }),\n});\n\nconst AdvancedResourcePicker = ({ resources, onChange }: ResourcePickerProps<AzureMonitorResource>) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Ensure there is at least one resource\n    if (resources.length === 0) {\n      onChange([{}]);\n    }\n  }, [resources, onChange]);\n\n  const onResourceChange = (index: number, resource: AzureMonitorResource) => {\n    const newResources = [...resources];\n    newResources[index] = resource;\n    onChange(newResources);\n  };\n\n  const removeResource = (index: number) => {\n    const newResources = [...resources];\n    newResources.splice(index, 1);\n    onChange(newResources);\n  };\n\n  const addResource = () => {\n    onChange(\n      resources.concat({\n        subscription: resources[0]?.subscription,\n        metricNamespace: resources[0]?.metricNamespace,\n        resourceGroup: '',\n        resourceName: '',\n      })\n    );\n  };\n\n  const onCommonPropChange = (r: Partial<AzureMonitorResource>) => {\n    onChange(resources.map((resource) => ({ ...resource, ...r })));\n  };\n\n  return (\n    <>\n      <InlineField\n        label=\"Subscription\"\n        grow\n        transparent\n        htmlFor={`input-advanced-resource-picker-subscription`}\n        labelWidth={15}\n        data-testid={selectors.components.queryEditor.resourcePicker.advanced.subscription.input}\n      >\n        <Input\n          id={`input-advanced-resource-picker-subscription`}\n          value={resources[0]?.subscription ?? ''}\n          onChange={(event) => onCommonPropChange({ subscription: event.currentTarget.value })}\n          placeholder=\"aaaaaaaa-bbbb-cccc-dddd-eeeeeeee\"\n        />\n      </InlineField>\n      <InlineField\n        label=\"Namespace\"\n        grow\n        transparent\n        htmlFor={`input-advanced-resource-picker-metricNamespace`}\n        labelWidth={15}\n        data-testid={selectors.components.queryEditor.resourcePicker.advanced.namespace.input}\n        invalid={resources[0]?.metricNamespace?.endsWith('/')}\n        error={'Namespace cannot end with a \"/\"'}\n      >\n        <Input\n          id={`input-advanced-resource-picker-metricNamespace`}\n          value={resources[0]?.metricNamespace ?? ''}\n          onChange={(event) => onCommonPropChange({ metricNamespace: event.currentTarget.value })}\n          placeholder=\"Microsoft.Insights/metricNamespaces\"\n        />\n      </InlineField>\n      <InlineField\n        label=\"Region\"\n        grow\n        transparent\n        htmlFor={`input-advanced-resource-picker-region`}\n        labelWidth={15}\n        data-testid={selectors.components.queryEditor.resourcePicker.advanced.region.input}\n        tooltip=\"The code region of the resource. Optional for one resource but mandatory when selecting multiple ones.\"\n      >\n        <Input\n          id={`input-advanced-resource-picker-region`}\n          value={resources[0]?.region ?? ''}\n          onChange={(event) => onCommonPropChange({ region: event.currentTarget.value })}\n          placeholder=\"northeurope\"\n        />\n      </InlineField>\n      <div className={styles.resourceList}>\n        {resources.map((resource, index) => (\n          <div key={`resource-${index + 1}`} className={styles.resource}>\n            {resources.length !== 1 && <Label className={styles.resourceLabel}>Resource {index + 1}</Label>}\n            <InlineField\n              label=\"Resource Group\"\n              transparent\n              htmlFor={`input-advanced-resource-picker-resourceGroup-${index + 1}`}\n              labelWidth={15}\n              data-testid={selectors.components.queryEditor.resourcePicker.advanced.resourceGroup.input}\n            >\n              <div className={styles.resourceGroupAndName}>\n                <Input\n                  id={`input-advanced-resource-picker-resourceGroup-${index + 1}`}\n                  value={resource?.resourceGroup ?? ''}\n                  onChange={(event) =>\n                    onResourceChange(index, { ...resource, resourceGroup: event.currentTarget.value })\n                  }\n                  placeholder=\"resource-group\"\n                />\n                <AccessoryButton\n                  aria-label=\"remove\"\n                  icon=\"times\"\n                  variant=\"secondary\"\n                  onClick={() => removeResource(index)}\n                  hidden={resources.length === 1}\n                  data-testid={'remove-resource'}\n                />\n              </div>\n            </InlineField>\n\n            <InlineField\n              label=\"Resource Name\"\n              transparent\n              htmlFor={`input-advanced-resource-picker-resourceName-${index + 1}`}\n              labelWidth={15}\n              data-testid={selectors.components.queryEditor.resourcePicker.advanced.resource.input}\n            >\n              <Input\n                id={`input-advanced-resource-picker-resourceName-${index + 1}`}\n                value={resource?.resourceName ?? ''}\n                onChange={(event) => onResourceChange(index, { ...resource, resourceName: event.currentTarget.value })}\n                placeholder=\"name\"\n              />\n            </InlineField>\n          </div>\n        ))}\n      </div>\n      <Button aria-label=\"Add\" icon=\"plus\" variant=\"secondary\" onClick={addResource} type=\"button\">\n        Add resource\n      </Button>\n    </>\n  );\n};\n\nexport default AdvancedResourcePicker;\n","import { AzureMetricDimension, AzureMonitorQuery } from '../../types';\n\nexport function setCustomNamespace(query: AzureMonitorQuery, selection: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.customNamespace === selection) {\n    return query;\n  }\n\n  if (selection?.toLowerCase().startsWith('microsoft.storage/storageaccounts/')) {\n    return {\n      ...query,\n      azureMonitor: {\n        ...query.azureMonitor,\n        metricNamespace: selection,\n        metricName: undefined,\n        aggregation: undefined,\n        timeGrain: '',\n        dimensionFilters: [],\n      },\n    };\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      customNamespace: selection,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setMetricName(query: AzureMonitorQuery, metricName: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricName === metricName) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricName: metricName,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setAggregation(query: AzureMonitorQuery, aggregation: string): AzureMonitorQuery {\n  if (query.azureMonitor?.aggregation === aggregation) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      aggregation: aggregation,\n    },\n  };\n}\n\nexport function setTimeGrain(query: AzureMonitorQuery, timeGrain: string): AzureMonitorQuery {\n  if (query.azureMonitor?.timeGrain === timeGrain) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      timeGrain: timeGrain,\n    },\n  };\n}\n\nexport function setDimensionFilters(query: AzureMonitorQuery, dimensions: AzureMetricDimension[]): AzureMonitorQuery {\n  if (query.azureMonitor?.dimensionFilters === dimensions) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      dimensionFilters: dimensions,\n    },\n  };\n}\n\nexport function appendDimensionFilter(\n  query: AzureMonitorQuery,\n  dimension = '',\n  operator = 'eq',\n  filters: string[] = []\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n\n  return setDimensionFilters(query, [\n    ...existingFilters,\n    {\n      dimension,\n      operator,\n      filters,\n    },\n  ]);\n}\n\nexport function removeDimensionFilter(query: AzureMonitorQuery, indexToRemove: number): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  newFilters.splice(indexToRemove, 1);\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setDimensionFilterValue<Key extends keyof AzureMetricDimension>(\n  query: AzureMonitorQuery,\n  index: number,\n  fieldName: Key,\n  value: AzureMetricDimension[Key]\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  const newFilter = newFilters[index];\n  newFilter[fieldName] = value;\n  if (fieldName === 'dimension' || fieldName === 'operator') {\n    newFilter.filters = [];\n  }\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setTop(query: AzureMonitorQuery, top: string): AzureMonitorQuery {\n  if (query.azureMonitor?.top === top) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      top: top,\n    },\n  };\n}\n\nexport function setLegendAlias(query: AzureMonitorQuery, alias: string): AzureMonitorQuery {\n  if (query.azureMonitor?.alias === alias) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      alias: alias,\n    },\n  };\n}\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setAggregation } from './setQueryValue';\n\ninterface AggregationFieldProps extends AzureQueryEditorFieldProps {\n  aggregationOptions: AzureMonitorOption[];\n  isLoading: boolean;\n}\n\nconst AggregationField = ({\n  query,\n  variableOptionGroup,\n  onQueryChange,\n  aggregationOptions,\n  isLoading,\n}: AggregationFieldProps) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setAggregation(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = addValueToOptions(aggregationOptions, variableOptionGroup, query.azureMonitor?.aggregation);\n\n  return (\n    <Field label=\"Aggregation\">\n      <Select\n        inputId=\"azure-monitor-metrics-aggregation-field\"\n        value={query.azureMonitor?.aggregation || null}\n        onChange={handleChange}\n        options={options}\n        isLoading={isLoading}\n      />\n    </Field>\n  );\n};\n\nexport default AggregationField;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, DataFrame, PanelData, Labels } from '@grafana/data';\nimport { EditorList, AccessoryButton } from '@grafana/experimental';\nimport { Select, HorizontalGroup, MultiSelect } from '@grafana/ui';\n\nimport { AzureMetricDimension, AzureMonitorOption, AzureMonitorQuery, AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setDimensionFilters } from './setQueryValue';\n\ninterface DimensionFieldsProps extends AzureQueryEditorFieldProps {\n  dimensionOptions: AzureMonitorOption[];\n}\n\ninterface DimensionLabels {\n  [key: string]: Set<string>;\n}\n\nconst useDimensionLabels = (data: PanelData | undefined, query: AzureMonitorQuery) => {\n  const [dimensionLabels, setDimensionLabels] = useState<DimensionLabels>({});\n  useEffect(() => {\n    let labelsObj: DimensionLabels = {};\n    if (data?.series?.length) {\n      // Identify which series' in the dataframe are relevant to the current query\n      const series: DataFrame[] = data.series.flat().filter((series) => series.refId === query.refId);\n      const fields = series.flatMap((series) => series.fields);\n      // Retrieve labels for series fields\n      const labels = fields\n        .map((fields) => fields.labels)\n        .flat()\n        .filter((item): item is Labels => item !== null && item !== undefined);\n      for (const label of labels) {\n        // Labels only exist for series that have a dimension selected\n        for (const [dimension, value] of Object.entries(label)) {\n          const dimensionLower = dimension.toLowerCase();\n          if (labelsObj[dimensionLower]) {\n            labelsObj[dimensionLower].add(value);\n          } else {\n            labelsObj[dimensionLower] = new Set([value]);\n          }\n        }\n      }\n    }\n    setDimensionLabels((prevLabels) => {\n      const newLabels: DimensionLabels = {};\n      const currentLabels = Object.keys(labelsObj);\n      if (currentLabels.length === 0) {\n        return prevLabels;\n      }\n      for (const label of currentLabels) {\n        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {\n          newLabels[label] = prevLabels[label];\n        } else {\n          newLabels[label] = labelsObj[label];\n        }\n      }\n      return newLabels;\n    });\n  }, [data?.series, query.refId]);\n  return dimensionLabels;\n};\n\nconst DimensionFields = ({ data, query, dimensionOptions, onQueryChange }: DimensionFieldsProps) => {\n  const dimensionFilters = useMemo(\n    () => query.azureMonitor?.dimensionFilters ?? [],\n    [query.azureMonitor?.dimensionFilters]\n  );\n\n  const dimensionLabels = useDimensionLabels(data, query);\n\n  const dimensionOperators: Array<SelectableValue<string>> = [\n    { label: '==', value: 'eq' },\n    { label: '!=', value: 'ne' },\n    { label: 'starts with', value: 'sw' },\n  ];\n\n  const validDimensionOptions = useMemo(() => {\n    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.\n    // The Azure portal also doesn't support this feature so it makes sense for consistency.\n    let t = dimensionOptions;\n    if (dimensionFilters.length) {\n      t = dimensionOptions.filter(\n        (val) => !dimensionFilters.some((dimensionFilter) => dimensionFilter.dimension === val.value)\n      );\n    }\n    return t;\n  }, [dimensionFilters, dimensionOptions]);\n\n  const onFieldChange = <Key extends keyof AzureMetricDimension>(\n    fieldName: Key,\n    item: Partial<AzureMetricDimension>,\n    value: AzureMetricDimension[Key],\n    onChange: (item: Partial<AzureMetricDimension>) => void\n  ) => {\n    item[fieldName] = value;\n    onChange(item);\n  };\n\n  const getValidDimensionOptions = (selectedDimension: string) => {\n    return validDimensionOptions.concat(dimensionOptions.filter((item) => item.value === selectedDimension));\n  };\n\n  const getValidFilterOptions = (selectedFilter: string | undefined, dimension: string) => {\n    const dimensionFilters = Array.from(dimensionLabels[dimension.toLowerCase()] ?? []);\n    if (dimensionFilters.find((filter) => filter === selectedFilter)) {\n      return dimensionFilters.map((filter) => ({ value: filter, label: filter }));\n    }\n    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map((item) => ({\n      value: item,\n      label: item,\n    }));\n  };\n\n  const getValidMultiSelectOptions = (selectedFilters: string[] | undefined, dimension: string) => {\n    const labelOptions = getValidFilterOptions(undefined, dimension);\n    if (selectedFilters) {\n      for (const filter of selectedFilters) {\n        if (!labelOptions.find((label) => label.value === filter)) {\n          labelOptions.push({ value: filter, label: filter });\n        }\n      }\n    }\n    return labelOptions;\n  };\n  const getValidOperators = (selectedOperator: string) => {\n    if (dimensionOperators.find((operator: SelectableValue) => operator.value === selectedOperator)) {\n      return dimensionOperators;\n    }\n    return [...dimensionOperators, ...(selectedOperator ? [{ label: selectedOperator, value: selectedOperator }] : [])];\n  };\n\n  const changedFunc = (changed: Array<Partial<AzureMetricDimension>>) => {\n    const properData: AzureMetricDimension[] = changed.map((x) => {\n      return {\n        dimension: x.dimension ?? '',\n        operator: x.operator ?? 'eq',\n        filters: x.filters ?? [],\n      };\n    });\n    onQueryChange(setDimensionFilters(query, properData));\n  };\n\n  const renderFilters = (\n    item: Partial<AzureMetricDimension>,\n    onChange: (item: Partial<AzureMetricDimension>) => void,\n    onDelete: () => void\n  ) => {\n    return (\n      <HorizontalGroup spacing=\"none\">\n        <Select\n          menuShouldPortal\n          placeholder=\"Field\"\n          value={item.dimension}\n          options={getValidDimensionOptions(item.dimension || '')}\n          onChange={(e) => onFieldChange('dimension', item, e.value ?? '', onChange)}\n        />\n        <Select\n          menuShouldPortal\n          placeholder=\"Operation\"\n          value={item.operator}\n          options={getValidOperators(item.operator || 'eq')}\n          onChange={(e) => onFieldChange('operator', item, e.value ?? '', onChange)}\n          allowCustomValue\n        />\n        {item.operator === 'eq' || item.operator === 'ne' ? (\n          <MultiSelect\n            menuShouldPortal\n            placeholder=\"Select value(s)\"\n            value={item.filters}\n            options={getValidMultiSelectOptions(item.filters, item.dimension ?? '')}\n            onChange={(e) =>\n              onFieldChange(\n                'filters',\n                item,\n                e.map((x) => x.value ?? ''),\n                onChange\n              )\n            }\n            aria-label={'dimension-labels-select'}\n            allowCustomValue\n          />\n        ) : (\n          // The API does not currently allow for multiple \"starts with\" clauses to be used.\n          <Select\n            menuShouldPortal\n            placeholder=\"Select value\"\n            value={item.filters ? item.filters[0] : ''}\n            allowCustomValue\n            options={getValidFilterOptions(item.filters ? item.filters[0] : '', item.dimension ?? '')}\n            onChange={(e) => onFieldChange('filters', item, [e?.value ?? ''], onChange)}\n            isClearable\n          />\n        )}\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <Field label=\"Dimensions\">\n      <EditorList items={dimensionFilters} onChange={changedFunc} renderItem={renderFilters} />\n    </Field>\n  );\n};\n\nexport default DimensionFields;\n","import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setLegendAlias } from './setQueryValue';\n\nconst LegendFormatField = ({ onQueryChange, query }: AzureQueryEditorFieldProps) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.alias ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setLegendAlias(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Legend format\">\n      <Input\n        id=\"azure-monitor-metrics-legend-field\"\n        placeholder=\"Alias patterns\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default LegendFormatField;\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setMetricName } from './setQueryValue';\n\ninterface MetricNameProps extends AzureQueryEditorFieldProps {\n  metricNames: AzureMonitorOption[];\n}\n\nconst MetricNameField = ({ metricNames, query, variableOptionGroup, onQueryChange }: MetricNameProps) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setMetricName(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = addValueToOptions(metricNames, variableOptionGroup, query.azureMonitor?.metricName);\n\n  return (\n    <Field label=\"Metric\" data-testid={selectors.components.queryEditor.metricsQueryEditor.metricName.input}>\n      <Select\n        inputId=\"azure-monitor-metrics-metric-field\"\n        value={query.azureMonitor?.metricName ?? null}\n        onChange={handleChange}\n        options={options}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNameField;\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setCustomNamespace } from './setQueryValue';\n\ninterface MetricNamespaceFieldProps extends AzureQueryEditorFieldProps {\n  metricNamespaces: AzureMonitorOption[];\n}\n\nconst MetricNamespaceField = ({\n  metricNamespaces,\n  query,\n  variableOptionGroup,\n  onQueryChange,\n}: MetricNamespaceFieldProps) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setCustomNamespace(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const value = query.azureMonitor?.customNamespace || query.azureMonitor?.metricNamespace;\n  const options = addValueToOptions(metricNamespaces, variableOptionGroup, value);\n\n  return (\n    <Field label=\"Metric namespace\">\n      <Select\n        inputId=\"azure-monitor-metrics-metric-namespace-field\"\n        value={value || null}\n        onChange={handleChange}\n        options={options}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNamespaceField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport TimegrainConverter from '../../time_grain_converter';\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setTimeGrain } from './setQueryValue';\n\ninterface TimeGrainFieldProps extends AzureQueryEditorFieldProps {\n  timeGrainOptions: AzureMonitorOption[];\n}\n\nconst TimeGrainField = ({ query, timeGrainOptions, variableOptionGroup, onQueryChange }: TimeGrainFieldProps) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setTimeGrain(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const timeGrains = useMemo(() => {\n    const autoInterval = TimegrainConverter.findClosestTimeGrain(\n      '1m',\n      timeGrainOptions.map((o) => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n        '1m',\n        '5m',\n        '15m',\n        '30m',\n        '1h',\n        '6h',\n        '12h',\n        '1d',\n      ]\n    );\n\n    const baseTimeGrains = timeGrainOptions.map((v) => (v.value === 'auto' ? { ...v, description: autoInterval } : v));\n\n    const options = addValueToOptions(baseTimeGrains, variableOptionGroup, query.azureMonitor?.timeGrain);\n\n    return options;\n  }, [timeGrainOptions, variableOptionGroup, query.azureMonitor?.timeGrain]);\n\n  return (\n    <Field label=\"Time grain\">\n      <Select\n        inputId=\"azure-monitor-metrics-time-grain-field\"\n        value={query.azureMonitor?.timeGrain}\n        onChange={handleChange}\n        options={timeGrains}\n      />\n    </Field>\n  );\n};\n\nexport default TimeGrainField;\n","import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setTop } from './setQueryValue';\n\nconst TopField = ({ onQueryChange, query }: AzureQueryEditorFieldProps) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.top ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setTop(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Top\">\n      <Input\n        id=\"azure-monitor-metrics-top-field\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={16}\n      />\n    </Field>\n  );\n};\n\nexport default TopField;\n","import { useEffect, useMemo, useState } from 'react';\n\nexport function useAsyncState<T>(asyncFn: () => Promise<T>, setError: Function, dependencies: unknown[]) {\n  // Use the lazy initial state functionality of useState to assign a random ID to the API call\n  // to track where errors come from. See useLastError.\n  const [errorSource] = useState(() => Math.random());\n  const [value, setValue] = useState<T>();\n\n  const finalValue = useMemo(() => value ?? [], [value]);\n\n  useEffect(() => {\n    asyncFn()\n      .then((results) => {\n        setValue(results);\n        setError(errorSource, undefined);\n      })\n      .catch((err) => {\n        setError(errorSource, err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  return finalValue;\n}\n","import { useEffect, useState } from 'react';\n\nimport { rangeUtil } from '@grafana/data';\n\nimport Datasource from '../../datasource';\nimport TimegrainConverter from '../../time_grain_converter';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery, AzureMonitorResource } from '../../types';\nimport { toOption } from '../../utils/common';\nimport { useAsyncState } from '../../utils/useAsyncState';\n\nimport { setCustomNamespace } from './setQueryValue';\n\ntype SetErrorFn = (source: string, error: AzureMonitorErrorish | undefined) => void;\n\nexport type DataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn,\n  setError: SetErrorFn\n) => AzureMonitorOption[];\n\nexport type MetricsMetadataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn\n) => MetricMetadata;\n\nexport interface MetricMetadata {\n  aggOptions: AzureMonitorOption[];\n  timeGrains: AzureMonitorOption[];\n  dimensions: AzureMonitorOption[];\n  isLoading: boolean;\n\n  // These two properties are only used within the hook, and not elsewhere\n  supportedAggTypes: string[];\n  primaryAggType: string | undefined;\n}\n\ntype OnChangeFn = (newQuery: AzureMonitorQuery) => void;\n\nconst getResourceGroupAndName = (resources?: AzureMonitorResource[]) => {\n  if (!resources || !resources.length) {\n    return { resourceGroup: '', resourceName: '' };\n  }\n  return {\n    resourceGroup: resources[0].resourceGroup ?? '',\n    resourceName: resources[0].resourceName ?? '',\n  };\n};\n\nexport const useMetricNamespaces: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { metricNamespace, resources } = query.azureMonitor ?? {};\n  const { resourceGroup, resourceName } = getResourceGroupAndName(resources);\n\n  const metricNamespaces = useAsyncState(\n    async () => {\n      if (!subscription || !resourceGroup || !resourceName) {\n        return;\n      }\n\n      const results = await datasource.azureMonitorDatasource.getMetricNamespaces(\n        {\n          subscription,\n          metricNamespace,\n          resourceGroup,\n          resourceName,\n        },\n        false\n      );\n      const options = formatOptions(results, metricNamespace);\n\n      // Do some cleanup of the query state if need be\n      if (!metricNamespace && options.length) {\n        onChange(setCustomNamespace(query, options[0].value));\n      }\n\n      return options;\n    },\n    setError,\n    [subscription, metricNamespace, resourceGroup, resourceName]\n  );\n\n  return metricNamespaces;\n};\n\nexport const useMetricNames: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { metricNamespace, metricName, resources, customNamespace } = query.azureMonitor ?? {};\n  const { resourceGroup, resourceName } = getResourceGroupAndName(resources);\n  const multipleResources = (resources && resources.length > 1) ?? false;\n  const region = query.azureMonitor?.region ?? '';\n\n  return useAsyncState(\n    async () => {\n      if (!subscription || !metricNamespace || !resourceGroup || !resourceName) {\n        return;\n      }\n      const results = await datasource.azureMonitorDatasource.getMetricNames(\n        {\n          subscription,\n          resourceGroup,\n          resourceName,\n          metricNamespace,\n          customNamespace,\n        },\n        multipleResources,\n        region\n      );\n      const options = formatOptions(results, metricName);\n\n      return options;\n    },\n    setError,\n    [subscription, resourceGroup, resourceName, metricNamespace, customNamespace, multipleResources]\n  );\n};\n\nconst defaultMetricMetadata: MetricMetadata = {\n  aggOptions: [],\n  timeGrains: [],\n  dimensions: [],\n  isLoading: false,\n  supportedAggTypes: [],\n  primaryAggType: undefined,\n};\n\nexport const useMetricMetadata = (query: AzureMonitorQuery, datasource: Datasource, onChange: OnChangeFn) => {\n  const [metricMetadata, setMetricMetadata] = useState<MetricMetadata>(defaultMetricMetadata);\n  const { subscription } = query;\n  const { resources, metricNamespace, metricName, aggregation, timeGrain, customNamespace, region } =\n    query.azureMonitor ?? {};\n  const { resourceGroup, resourceName } = getResourceGroupAndName(resources);\n  const multipleResources = (resources && resources.length > 1) ?? false;\n\n  // Fetch new metric metadata when the fields change\n  useEffect(() => {\n    if (!subscription || !resourceGroup || !resourceName || !metricNamespace || !metricName) {\n      setMetricMetadata(defaultMetricMetadata);\n      return;\n    }\n    datasource.azureMonitorDatasource\n      .getMetricMetadata(\n        { subscription, resourceGroup, resourceName, metricNamespace, metricName, customNamespace },\n        multipleResources,\n        region\n      )\n      .then((metadata) => {\n        // TODO: Move the aggregationTypes and timeGrain defaults into `getMetricMetadata`\n        const aggregations = (metadata.supportedAggTypes || [metadata.primaryAggType]).map((v) => ({\n          label: v,\n          value: v,\n        }));\n\n        setMetricMetadata({\n          aggOptions: aggregations,\n          timeGrains: metadata.supportedTimeGrains,\n          dimensions: metadata.dimensions,\n          isLoading: false,\n          supportedAggTypes: metadata.supportedAggTypes ?? [],\n          primaryAggType: metadata.primaryAggType,\n        });\n      });\n  }, [\n    region,\n    datasource,\n    subscription,\n    resourceGroup,\n    resourceName,\n    metricNamespace,\n    metricName,\n    customNamespace,\n    multipleResources,\n  ]);\n\n  // Update the query state in response to the meta data changing\n  useEffect(() => {\n    const newAggregation = aggregation || metricMetadata.primaryAggType;\n    const newTimeGrain = timeGrain || 'auto';\n\n    if (newAggregation !== aggregation || newTimeGrain !== timeGrain) {\n      onChange({\n        ...query,\n        azureMonitor: {\n          ...query.azureMonitor,\n          aggregation: newAggregation,\n          timeGrain: newTimeGrain,\n          allowedTimeGrainsMs: metricMetadata.timeGrains\n            .filter((timeGrain) => timeGrain.value !== 'auto')\n            .map((timeGrain) =>\n              rangeUtil.intervalToMs(TimegrainConverter.createKbnUnitFromISO8601Duration(timeGrain.value))\n            ),\n        },\n      });\n    }\n  }, [onChange, metricMetadata, aggregation, timeGrain, query]);\n\n  return metricMetadata;\n};\n\nfunction formatOptions(\n  rawResults: Array<{\n    text: string;\n    value: string;\n  }>,\n  selectedValue?: string\n) {\n  const options = rawResults.map(toOption);\n\n  // account for custom values that might have been set in json file like ones crafted with a template variable (ex: \"cloud-datasource-resource-$Environment\")\n  if (selectedValue && !options.find((option) => option.value === selectedValue.toLowerCase())) {\n    options.push({ label: selectedValue, value: selectedValue });\n  }\n\n  return options;\n}\n","import React from 'react';\n\nimport { PanelData } from '@grafana/data/src/types';\nimport { EditorRows, EditorRow, EditorFieldGroup } from '@grafana/experimental';\n\nimport { multiResourceCompatibleTypes } from '../../azureMetadata';\nimport type Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport type { AzureMonitorQuery, AzureMonitorOption, AzureMonitorErrorish, AzureMonitorResource } from '../../types';\nimport ResourceField from '../ResourceField';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceDetails } from '../ResourcePicker/utils';\n\nimport AdvancedResourcePicker from './AdvancedResourcePicker';\nimport AggregationField from './AggregationField';\nimport DimensionFields from './DimensionFields';\nimport LegendFormatField from './LegendFormatField';\nimport MetricNameField from './MetricNameField';\nimport MetricNamespaceField from './MetricNamespaceField';\nimport TimeGrainField from './TimeGrainField';\nimport TopField from './TopField';\nimport { useMetricNames, useMetricNamespaces, useMetricMetadata } from './dataHooks';\n\ninterface MetricsQueryEditorProps {\n  data: PanelData | undefined;\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst MetricsQueryEditor = ({\n  data,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError,\n}: MetricsQueryEditorProps) => {\n  const metricsMetadata = useMetricMetadata(query, datasource, onChange);\n  const metricNamespaces = useMetricNamespaces(query, datasource, onChange, setError);\n  const metricNames = useMetricNames(query, datasource, onChange, setError);\n  const resources =\n    query.azureMonitor?.resources?.map((r) => ({\n      subscription: query.subscription,\n      resourceGroup: r.resourceGroup,\n      metricNamespace: query.azureMonitor?.metricNamespace,\n      resourceName: r.resourceName,\n      region: query.azureMonitor?.region,\n    })) ?? [];\n\n  const supportMultipleResource = (namespace?: string) => {\n    return multiResourceCompatibleTypes[namespace?.toLocaleLowerCase() ?? ''] ?? false;\n  };\n\n  const disableRow = (row: ResourceRow, selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      // Only if there is some resource(s) selected we should disable rows\n      return false;\n    }\n\n    const rowResource = parseResourceDetails(row.uri, row.location);\n    const selectedRowSample = parseResourceDetails(selectedRows[0].uri, selectedRows[0].location);\n    // Only resources:\n    // - in the same subscription\n    // - in the same region\n    // - with the same metric namespace\n    // - with a metric namespace that is compatible with multi-resource queries\n    return (\n      rowResource.subscription !== selectedRowSample.subscription ||\n      rowResource.region !== selectedRowSample.region ||\n      rowResource.metricNamespace?.toLocaleLowerCase() !== selectedRowSample.metricNamespace?.toLocaleLowerCase() ||\n      !supportMultipleResource(rowResource.metricNamespace)\n    );\n  };\n\n  const selectionNotice = (selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      return '';\n    }\n    const selectedRowSample = parseResourceDetails(selectedRows[0].uri, selectedRows[0].location);\n    return supportMultipleResource(selectedRowSample.metricNamespace)\n      ? 'You can select items of the same resource type and location. To select resources of a different resource type or location, please first uncheck your current selection.'\n      : '';\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.metricsQueryEditor.container.input}>\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <ResourceField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              selectableEntryTypes={[ResourceRowType.Resource]}\n              resources={resources ?? []}\n              queryType={'metrics'}\n              disableRow={disableRow}\n              renderAdvanced={(resources, onChange) => (\n                // It's required to cast resources because the resource picker\n                // specifies the type to string | AzureMonitorResource.\n                // eslint-disable-next-line\n                <AdvancedResourcePicker resources={resources as AzureMonitorResource[]} onChange={onChange} />\n              )}\n              selectionNotice={selectionNotice}\n            />\n            <MetricNamespaceField\n              metricNamespaces={metricNamespaces}\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n            <MetricNameField\n              metricNames={metricNames}\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n            <AggregationField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              aggregationOptions={metricsMetadata?.aggOptions ?? []}\n              isLoading={metricsMetadata.isLoading}\n            />\n            <TimeGrainField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              timeGrainOptions={metricsMetadata?.timeGrains ?? []}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <DimensionFields\n              data={data}\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              dimensionOptions={metricsMetadata?.dimensions ?? []}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <TopField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n            <LegendFormatField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n    </span>\n  );\n};\n\nexport default MetricsQueryEditor;\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorHeader, InlineSelect } from '@grafana/experimental';\n\nimport { selectors } from '../e2e/selectors';\nimport { AzureMonitorQuery, AzureQueryType } from '../types';\n\ninterface QueryTypeFieldProps {\n  query: AzureMonitorQuery;\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n}\n\nexport const QueryHeader = ({ query, onQueryChange }: QueryTypeFieldProps) => {\n  const queryTypes: Array<{ value: AzureQueryType; label: string }> = [\n    { value: AzureQueryType.AzureMonitor, label: 'Metrics' },\n    { value: AzureQueryType.LogAnalytics, label: 'Logs' },\n    { value: AzureQueryType.AzureTraces, label: 'Traces' },\n    { value: AzureQueryType.AzureResourceGraph, label: 'Azure Resource Graph' },\n  ];\n\n  const handleChange = useCallback(\n    (change: SelectableValue<AzureQueryType>) => {\n      if (change.value && change.value !== query.queryType) {\n        onQueryChange({\n          refId: query.refId,\n          datasource: query.datasource,\n          queryType: change.value,\n        });\n      }\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <span data-testid={selectors.components.queryEditor.header.select}>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Service\"\n          value={query.queryType}\n          placeholder=\"Service...\"\n          allowCustomValue\n          options={queryTypes}\n          onChange={handleChange}\n        />\n      </EditorHeader>\n    </span>\n  );\n};\n","import { cx } from '@emotion/css';\nimport React, { RefCallback, SyntheticEvent, useState } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { CoreApp, DataFrame, getDefaultTimeRange, SelectableValue, TimeRange } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport {\n  HorizontalGroup,\n  Select,\n  ButtonSelect,\n  AsyncMultiSelect,\n  getSelectStyles,\n  useTheme2,\n  Checkbox,\n} from '@grafana/ui';\n\nimport { AzureMonitorQuery, AzureQueryType, AzureTracesFilter } from '../../dataquery.gen';\nimport Datasource from '../../datasource';\nimport { VariableOptionGroup } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\n\nexport interface FilterProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  propertyMap: Map<string, SelectableValue[]>;\n  setPropertyMap: React.Dispatch<React.SetStateAction<Map<string, Array<SelectableValue<string>>>>>;\n  queryTraceTypes: string[];\n  properties: string[];\n  variableOptionGroup: VariableOptionGroup;\n  range?: TimeRange;\n}\n\nconst onFieldChange = <Key extends keyof AzureTracesFilter>(\n  fieldName: Key,\n  item: Partial<AzureTracesFilter>,\n  selected: SelectableValue<AzureTracesFilter[Key]>,\n  onChange: (item: Partial<AzureTracesFilter>) => void\n) => {\n  if (fieldName === 'filters') {\n    item[fieldName] = selected.map((item: SelectableValue<string>) => item.value);\n  } else {\n    item[fieldName] = selected.value;\n    if (fieldName === 'property') {\n      item.filters = [];\n    }\n  }\n  onChange(item);\n};\n\nconst getTraceProperties = async (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  traceTypes: string[],\n  propertyMap: Map<string, SelectableValue[]>,\n  setPropertyMap: React.Dispatch<React.SetStateAction<Map<string, Array<SelectableValue<string>>>>>,\n  filter?: Partial<AzureTracesFilter>,\n  range?: TimeRange\n): Promise<SelectableValue[]> => {\n  const { azureTraces } = query;\n  if (!azureTraces) {\n    return [];\n  }\n\n  const { resources } = azureTraces;\n\n  if (!resources || !filter) {\n    return [];\n  }\n\n  const property = filter.property;\n  if (!property) {\n    return [];\n  }\n\n  const queryString = `let ${property} = toscalar(union isfuzzy=true ${traceTypes.join(',')}\n  | where $__timeFilter(timestamp)\n  | summarize count=count() by ${property}\n  | summarize make_list(pack_all()));\n  print properties = bag_pack(\"${property}\", ${property});`;\n\n  const results = await lastValueFrom(\n    datasource.azureLogAnalyticsDatasource.query({\n      requestId: 'azure-traces-properties-req',\n      interval: '',\n      intervalMs: 0,\n      scopedVars: {},\n      timezone: '',\n      startTime: 0,\n      app: CoreApp.Unknown,\n      targets: [\n        {\n          ...query,\n          azureLogAnalytics: {\n            resources,\n            query: queryString,\n          },\n          queryType: AzureQueryType.LogAnalytics,\n        },\n      ],\n      range: range || getDefaultTimeRange(),\n    })\n  );\n  if (results.data.length > 0) {\n    const result: DataFrame = results.data[0];\n    if (result.fields.length > 0) {\n      const properties: { [key: string]: Array<{ [key: string]: string | number; count: number }> } = JSON.parse(\n        result.fields[0].values.toArray()[0]\n      );\n      const values = properties[property].map((value) => {\n        let label = value[property];\n        if (value[property] === '') {\n          label = '<Empty>';\n        }\n        return { label: label.toString(), value: value[property].toString(), count: value.count };\n      });\n      propertyMap.set(property, values);\n      setPropertyMap(propertyMap);\n      return values;\n    }\n  }\n\n  return [];\n};\n\nexport function makeRenderItem(props: FilterProps) {\n  function renderItem(\n    item: Partial<AzureTracesFilter>,\n    onChange: (item: Partial<AzureTracesFilter>) => void,\n    onDelete: () => void\n  ) {\n    return <Filter {...props} item={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderItem;\n}\n\ninterface OptionProps {\n  isFocused: boolean;\n  isSelected: boolean;\n  innerProps: JSX.IntrinsicElements['div'];\n  innerRef: RefCallback<HTMLDivElement>;\n  data: SelectableValue<string>;\n  selectOption: (data: SelectableValue<string>) => void;\n}\n\nconst Option = (props: React.PropsWithChildren<OptionProps>) => {\n  const { data, innerProps, innerRef, isFocused, isSelected } = props;\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n\n  const onClickMultiOption = (e: SyntheticEvent) => {\n    props.selectOption({ ...data });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  return (\n    <div\n      ref={innerRef}\n      className={cx(\n        styles.option,\n        isFocused && styles.optionFocused,\n        isSelected && styles.optionSelected,\n        data.isDisabled && styles.optionDisabled\n      )}\n      {...innerProps}\n      aria-label=\"Select option\"\n      title={data.title}\n      onClick={onClickMultiOption}\n      onKeyDown={onClickMultiOption}\n      role=\"checkbox\"\n      aria-checked={isSelected}\n      tabIndex={0}\n    >\n      <div className={styles.optionBody}>\n        <Checkbox value={isSelected} label={data.label ? `${data.label} - (${data.count})` : ''} />\n      </div>\n    </div>\n  );\n};\n\nconst Filter = (\n  props: FilterProps & {\n    item: Partial<AzureTracesFilter>;\n    onChange: (item: Partial<AzureTracesFilter>) => void;\n    onDelete: () => void;\n  }\n) => {\n  const {\n    query,\n    datasource,\n    propertyMap,\n    setPropertyMap,\n    queryTraceTypes,\n    properties,\n    item,\n    onChange,\n    onDelete,\n    variableOptionGroup,\n    range,\n  } = props;\n  const [loading, setLoading] = useState(false);\n  const [values, setValues] = useState<Array<SelectableValue<string> | VariableOptionGroup>>(\n    addValueToOptions(propertyMap.get(item.property ?? '') ?? [], variableOptionGroup)\n  );\n  const [selected, setSelected] = useState<SelectableValue[]>(\n    item.filters ? item.filters.map((filter) => ({ value: filter, label: filter === '' ? '<Empty>' : filter })) : []\n  );\n\n  const loadOptions = async () => {\n    setLoading(true);\n    if (item.property && item.property !== '') {\n      const vals = propertyMap.get(item.property ?? '');\n      if (!vals) {\n        const promise = await getTraceProperties(\n          query,\n          datasource,\n          queryTraceTypes,\n          propertyMap,\n          setPropertyMap,\n          item,\n          range\n        );\n        setValues(addValueToOptions(promise, variableOptionGroup));\n        setLoading(false);\n        return promise;\n      } else {\n        setValues(addValueToOptions(vals, variableOptionGroup));\n        setLoading(false);\n        return Promise.resolve(vals);\n      }\n    }\n    const empty: Array<SelectableValue<string>> = [];\n    return Promise.resolve(empty);\n  };\n\n  return (\n    <HorizontalGroup spacing=\"none\">\n      <Select\n        menuShouldPortal\n        placeholder=\"Property\"\n        value={item.property ? { value: item.property, label: item.property } : null}\n        options={addValueToOptions(\n          properties.map((type) => ({ label: type, value: type })),\n          variableOptionGroup\n        )}\n        onChange={(e) => onFieldChange('property', item, e, onChange)}\n        width={25}\n      />\n      <ButtonSelect<string>\n        value={item.operation ? { label: item.operation === 'eq' ? '=' : '!=', value: item.operation } : undefined}\n        options={[\n          { label: '=', value: 'eq' },\n          { label: '!=', value: 'ne' },\n        ]}\n        onChange={(e) => onFieldChange('operation', item, e, onChange)}\n        defaultValue={'eq'}\n      />\n      <AsyncMultiSelect\n        blurInputOnSelect={false}\n        menuShouldPortal\n        placeholder=\"Value\"\n        value={selected}\n        loadOptions={loadOptions}\n        isLoading={loading}\n        onOpenMenu={loadOptions}\n        onChange={(e: Array<SelectableValue<string>>) => {\n          setSelected(e);\n          if (e.length === 0) {\n            onFieldChange('filters', item, selected, onChange);\n          }\n        }}\n        width={35}\n        defaultOptions={values}\n        isClearable\n        components={{ Option }}\n        closeMenuOnSelect={false}\n        onCloseMenu={() => onFieldChange('filters', item, selected, onChange)}\n        hideSelectedOptions={false}\n      />\n      <AccessoryButton aria-label=\"Remove filter\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n    </HorizontalGroup>\n  );\n};\n\nexport default Filter;\n","import { omit } from 'lodash';\n\nexport const Tables = {\n  availabilityResults: { label: 'Availablity Results', description: 'Availability test results.' },\n  dependencies: {\n    label: 'Dependencies',\n    description: 'Calls your application makes to other services such as databases or REST APIs.',\n  },\n  customEvents: { label: 'Custom Events', description: 'Calls to TrackEvent that are inserted to monitor usage.' },\n  exceptions: {\n    label: 'Exceptions',\n    description: 'Exceptions that are logged via TrackException, or uncaught exceptions.',\n  },\n  pageViews: { label: 'Page Views', description: 'Web client telemetry to create page view reports.' },\n  requests: { label: 'Requests', description: 'HTTP requests received by the application.' },\n  traces: {\n    label: 'Traces',\n    description:\n      'Diagnostic logs emitted using TrackTrace and similar methods. Note: Traces are not visualised if the result format is set to Trace',\n  },\n};\n\n// Resource centric tables mapped to legacy tables\nexport const tables = {\n  AppAvailabilityResults: 'availabilityResults',\n  AppDependencies: 'dependencies',\n  AppEvents: 'events',\n  AppExceptions: 'exceptions',\n  AppPageViews: 'pageViews',\n  AppRequests: 'requests',\n  AppTraces: 'traces',\n};\n\n// Properties to omit when generating the attributes bag\nexport const attributesOmit = [\n  'operationId',\n  'duration',\n  'id',\n  'name',\n  'problemId',\n  'operation_ParentId',\n  'timestamp',\n  'customDimensions',\n  'operation_Name',\n];\n\n// Common resource centric properties mapped to legacy property names\nexport const common = {\n  appId: 'ResourceGUID',\n  application_Version: 'AppVersion',\n  appName: '_ResourceId',\n  client_Browser: 'ClientBrowser',\n  client_City: 'ClientCity',\n  client_CountryOrRegion: 'ClientCountryOrRegion',\n  client_IP: 'ClientIP',\n  client_Model: 'ClientModel',\n  client_OS: 'ClientOS',\n  client_StateOrProvince: 'ClientStateOrProvince',\n  client_Type: 'ClientType',\n  cloud_RoleInstance: 'AppRoleInstance',\n  cloud_RoleName: 'AppRoleName',\n  customDimensions: 'Properties',\n  customMeasurements: 'Measurements',\n  duration: 'DurationMs',\n  id: 'Id',\n  iKey: 'IKey',\n  itemCount: 'ItemCount',\n  itemId: '_ItemId',\n  itemType: 'Type',\n  name: 'Name',\n  operation_Id: 'OperationId',\n  operation_Name: 'OperationName',\n  operation_ParentId: 'OperationParentId',\n  operation_SyntheticSource: 'OperationSyntheticSource',\n  performanceBucket: 'PerformanceBucket',\n  sdkVersion: 'SDKVersion',\n  session_Id: 'SessionId',\n  success: 'Success',\n  timestamp: 'TimeGenerated',\n  user_AccountId: 'UserAccountId',\n  user_AuthenticatedId: 'UserAuthenticatedId',\n  user_Id: 'UserId',\n};\n\n// Additional properties for availabilityResults\nexport const availabilityResultsSchema = {\n  ...common,\n  location: 'Location',\n  message: 'Message',\n  size: 'Size',\n};\n\n// Additional properties for dependencies\nexport const dependenciesSchema = {\n  ...common,\n  data: 'Data',\n  resultCode: 'ResultCode',\n  target: 'Target',\n  type: 'DependencyType',\n};\n\n// Additional properties for events\nexport const eventsSchema = omit(common, ['duration', 'id', 'success', 'performanceBucket']);\n\n// Additional properties for pageVies\nexport const pageViewsSchema = omit(\n  {\n    ...common,\n    url: 'Url',\n  },\n  ['success']\n);\n\n// Additional properties for requests\nexport const requestsSchema = {\n  resultCode: 'ResultCode',\n  source: 'Source',\n  url: 'Url',\n};\n\n// Additional properties for exceptions\nexport const exceptionsSchema = omit(\n  {\n    ...common,\n    assembly: 'Assembly',\n    details: 'Details',\n    handledAt: 'HandledAt',\n    innermostAssembly: 'InnermostAssembly',\n    innermostMessage: 'InnermostMessage',\n    innermostMethod: 'InnermostMethod',\n    innermostType: 'InnermostType',\n    message: 'Message',\n    method: 'Method',\n    outerAssembly: 'OuterAssembly',\n    outerMessage: 'OuterMessage',\n    outerMethod: 'OuterMethod',\n    outerType: 'OuterType',\n    problemId: 'ProblemId',\n    severityLevel: 'SeverityLevel',\n    type: 'ExceptionType',\n  },\n  ['duration', 'id', 'name', 'performanceBucket', 'success']\n);\n\n// Additional properties for traces\nexport const tracesSchema = omit(\n  {\n    message: 'Message',\n    severityLevel: 'SeverityLevel',\n  },\n  ['duration', 'id', 'name', 'performanceBucket', 'success']\n);\n\nexport const tablesSchema: { [key: string]: { [key: string]: string } } = {\n  availabilityResults: availabilityResultsSchema,\n  dependencies: dependenciesSchema,\n  customEvents: eventsSchema,\n  exceptions: exceptionsSchema,\n  pageViews: pageViewsSchema,\n  requests: requestsSchema,\n  traces: tracesSchema,\n};\n\nexport const tableTags = Object.entries(tablesSchema).reduce(\n  (val, [k, v]) => ({ ...val, [k]: Object.keys(omit(v, attributesOmit)).join(',') }),\n  {}\n);\n","import { AzureMonitorQuery, AzureTracesFilter, ResultFormat } from '../../types';\n\nexport function setQueryOperationId(query: AzureMonitorQuery, operationId?: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureTraces: {\n      ...query.azureTraces,\n      operationId,\n    },\n  };\n}\n\nexport function setFormatAs(query: AzureMonitorQuery, formatAs: ResultFormat): AzureMonitorQuery {\n  return {\n    ...query,\n    azureTraces: {\n      ...query.azureTraces,\n      resultFormat: formatAs,\n    },\n  };\n}\n\nexport function setTraceTypes(query: AzureMonitorQuery, traceTypes: string[]): AzureMonitorQuery {\n  return {\n    ...query,\n    azureTraces: {\n      ...query.azureTraces,\n      traceTypes,\n    },\n  };\n}\n\nexport function setFilters(query: AzureMonitorQuery, filters: AzureTracesFilter[]): AzureMonitorQuery {\n  return {\n    ...query,\n    azureTraces: {\n      ...query.azureTraces,\n      filters,\n    },\n  };\n}\n","import { uniq } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorList } from '@grafana/experimental';\nimport { Field } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureTracesFilter } from '../../types';\n\nimport { makeRenderItem } from './Filter';\nimport { tablesSchema } from './consts';\nimport { setFilters } from './setQueryValue';\n\nconst Filters = ({ query, datasource, onQueryChange, variableOptionGroup, range }: AzureQueryEditorFieldProps) => {\n  const { azureTraces } = query;\n  const queryTraceTypes = azureTraces?.traceTypes ? azureTraces.traceTypes : Object.keys(tablesSchema);\n\n  const excludedProperties = new Set([\n    'customDimensions',\n    'customMeasurements',\n    'details',\n    'duration',\n    'id',\n    'itemId',\n    'operation_Id',\n    'operation_ParentId',\n    'timestamp',\n  ]);\n  const properties = uniq(queryTraceTypes.map((type) => Object.keys(tablesSchema[type])).flat()).filter(\n    (item) => !excludedProperties.has(item)\n  );\n\n  const [propertyMap, setPropertyMap] = useState(new Map<string, Array<SelectableValue<string>>>());\n  const queryFilters = useMemo(() => query.azureTraces?.filters ?? [], [query.azureTraces?.filters]);\n  const [filters, updateFilters] = useState(queryFilters);\n\n  useEffect(() => {\n    setPropertyMap(new Map<string, Array<SelectableValue<string>>>());\n  }, [query.azureTraces?.resources, query.azureTraces?.traceTypes, query.azureTraces?.operationId]);\n\n  const changedFunc = (changed: Array<Partial<AzureTracesFilter>>) => {\n    let updateQuery = false;\n    const properData: AzureTracesFilter[] = changed.map((x) => {\n      if (x.property !== '' && x.filters && x.filters.length > 0 && x.operation !== '') {\n        updateQuery = true;\n      } else {\n        updateQuery = false;\n      }\n      return {\n        property: x.property ?? '',\n        filters: x.filters ?? [],\n        operation: x.operation ?? 'eq',\n      };\n    });\n    updateFilters(properData);\n    if (updateQuery || (queryFilters.length > 0 && properData.length === 0)) {\n      onQueryChange(setFilters(query, properData));\n    }\n  };\n\n  return (\n    <Field label=\"Filters\">\n      <EditorList\n        items={filters}\n        onChange={changedFunc}\n        renderItem={makeRenderItem({\n          query,\n          datasource,\n          propertyMap,\n          setPropertyMap,\n          queryTraceTypes,\n          properties,\n          variableOptionGroup,\n          range,\n        })}\n      />\n    </Field>\n  );\n};\n\nexport default Filters;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { findOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { Tables } from './consts';\nimport { setTraceTypes } from './setQueryValue';\n\nconst TraceTypeField = ({ query, variableOptionGroup, onQueryChange }: AzureQueryEditorFieldProps) => {\n  const tables: AzureMonitorOption[] = Object.entries(Tables).map(([key, value]) => ({\n    label: value.label,\n    description: value.description,\n    value: key,\n  }));\n  const handleChange = useCallback(\n    (change: Array<SelectableValue<string>>) => {\n      const newQuery = setTraceTypes(\n        query,\n        change.map((type) => type.value ?? '')\n      );\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...tables, variableOptionGroup], [tables, variableOptionGroup]);\n\n  // Select all trace event ypes by default\n  const getDefaultOptions = () => {\n    const allEventTypes = tables.map((t) => t.value);\n    const defaultQuery = setTraceTypes(query, allEventTypes);\n    onQueryChange(defaultQuery);\n    return allEventTypes;\n  };\n\n  return (\n    <Field label=\"Event Type\">\n      <MultiSelect\n        placeholder=\"Choose event types\"\n        inputId=\"azure-monitor-traces-type-field\"\n        value={findOptions(\n          [...tables, ...variableOptionGroup.options],\n          query.azureTraces?.traceTypes ?? getDefaultOptions()\n        )}\n        onChange={handleChange}\n        options={options}\n        allowCustomValue\n        isClearable\n        aria-label={selectors.components.queryEditor.tracesQueryEditor.traceTypes.select}\n      />\n    </Field>\n  );\n};\n\nexport default TraceTypeField;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { TimeRange } from '@grafana/data';\nimport { EditorFieldGroup, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery, ResultFormat } from '../../types';\nimport { Field } from '../Field';\nimport FormatAsField from '../FormatAsField';\nimport AdvancedResourcePicker from '../LogsQueryEditor/AdvancedResourcePicker';\nimport ResourceField from '../ResourceField';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceDetails } from '../ResourcePicker/utils';\n\nimport Filters from './Filters';\nimport TraceTypeField from './TraceTypeField';\nimport { setFormatAs, setQueryOperationId } from './setQueryValue';\n\ninterface TracesQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n  range?: TimeRange;\n}\n\nconst TracesQueryEditor = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n  range,\n}: TracesQueryEditorProps) => {\n  const disableRow = (row: ResourceRow, selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      // Only if there is some resource(s) selected we should disable rows\n      return false;\n    }\n    const rowResourceNS = parseResourceDetails(row.uri, row.location).metricNamespace?.toLowerCase();\n    const selectedRowSampleNs = parseResourceDetails(\n      selectedRows[0].uri,\n      selectedRows[0].location\n    ).metricNamespace?.toLowerCase();\n    // Only resources with the same metricNamespace can be selected\n    return rowResourceNS !== selectedRowSampleNs;\n  };\n\n  const [operationId, setOperationId] = useState<string>(query.azureTraces?.operationId ?? '');\n  const previousOperationId = usePrevious(query.azureTraces?.operationId);\n\n  useEffect(() => {\n    if (query.azureTraces?.operationId) {\n      if (previousOperationId !== query.azureTraces.operationId) {\n        setOperationId(query.azureTraces.operationId);\n      }\n    }\n  }, [setOperationId, previousOperationId, query, operationId]);\n\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setOperationId(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(\n    (ev: React.FormEvent) => {\n      const newQuery = setQueryOperationId(query, operationId);\n      onChange(newQuery);\n    },\n    [onChange, operationId, query]\n  );\n\n  return (\n    <span data-testid={selectors.components.queryEditor.tracesQueryEditor.container.input}>\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <ResourceField\n              query={query}\n              datasource={datasource}\n              subscriptionId={subscriptionId}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              selectableEntryTypes={[\n                ResourceRowType.Subscription,\n                ResourceRowType.ResourceGroup,\n                ResourceRowType.Resource,\n                ResourceRowType.Variable,\n              ]}\n              resources={query.azureTraces?.resources ?? []}\n              queryType=\"traces\"\n              disableRow={disableRow}\n              renderAdvanced={(resources, onChange) => (\n                // It's required to cast resources because the resource picker\n                // specifies the type to string | AzureMonitorResource.\n                // eslint-disable-next-line\n                <AdvancedResourcePicker resources={resources as string[]} onChange={onChange} />\n              )}\n              selectionNotice={() => 'You may only choose items of the same resource type.'}\n              range={range}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <TraceTypeField\n              datasource={datasource}\n              onQueryChange={onChange}\n              query={query}\n              setError={setError}\n              variableOptionGroup={variableOptionGroup}\n              range={range}\n            />\n            <Field label=\"Operation ID\">\n              <Input\n                id=\"azure-monitor-traces-operation-id-field\"\n                value={operationId}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                width={40}\n              />\n            </Field>\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <Filters\n              datasource={datasource}\n              onQueryChange={onChange}\n              query={query}\n              setError={setError}\n              variableOptionGroup={variableOptionGroup}\n              range={range}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <FormatAsField\n              datasource={datasource}\n              setError={setError}\n              query={query}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              inputId=\"azure-monitor-traces\"\n              options={[\n                { label: 'Table', value: ResultFormat.Table },\n                { label: 'Trace', value: ResultFormat.Trace },\n              ]}\n              defaultValue={ResultFormat.Table}\n              setFormatAs={setFormatAs}\n              resultFormat={query.azureTraces?.resultFormat}\n              range={range}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n    </span>\n  );\n};\n\nexport default TracesQueryEditor;\n","import { setKustoQuery } from '../components/LogsQueryEditor/setQueryValue';\nimport {\n  appendDimensionFilter,\n  setTimeGrain as setMetricsTimeGrain,\n} from '../components/MetricsQueryEditor/setQueryValue';\nimport { parseResourceDetails } from '../components/ResourcePicker/utils';\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureMetricDimension, AzureMonitorQuery, AzureQueryType } from '../types';\n\nconst OLD_DEFAULT_DROPDOWN_VALUE = 'select';\n\nexport default function migrateQuery(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (!workingQuery.queryType) {\n    workingQuery = {\n      ...workingQuery,\n      queryType: AzureQueryType.AzureMonitor,\n    };\n  }\n\n  workingQuery = migrateLogAnalyticsToFromTimes(workingQuery);\n  if (workingQuery.queryType === AzureQueryType.AzureMonitor && workingQuery.azureMonitor) {\n    workingQuery = migrateTimeGrains(workingQuery);\n    workingQuery = migrateToDefaultNamespace(workingQuery);\n    workingQuery = migrateDimensionToDimensionFilter(workingQuery);\n    workingQuery = migrateDimensionFilterToArray(workingQuery);\n    workingQuery = migrateResourceUriToResourceObj(workingQuery);\n  }\n\n  if (workingQuery.azureMonitor?.resourceGroup || workingQuery.azureMonitor?.resourceName) {\n    workingQuery = migrateResourceGroupAndName(workingQuery);\n  }\n\n  if (workingQuery.azureLogAnalytics?.resource) {\n    workingQuery = {\n      ...workingQuery,\n      azureLogAnalytics: {\n        ...workingQuery.azureLogAnalytics,\n        resources: [workingQuery.azureLogAnalytics.resource],\n      },\n    };\n\n    delete workingQuery.azureLogAnalytics?.resource;\n  }\n\n  if (workingQuery.azureLogAnalytics && workingQuery.azureLogAnalytics.dashboardTime === undefined) {\n    if (workingQuery.azureLogAnalytics.intersectTime) {\n      workingQuery = {\n        ...workingQuery,\n        azureLogAnalytics: {\n          ...workingQuery.azureLogAnalytics,\n          dashboardTime: true,\n        },\n      };\n    } else {\n      workingQuery = {\n        ...workingQuery,\n        azureLogAnalytics: {\n          ...workingQuery.azureLogAnalytics,\n          dashboardTime: false,\n        },\n      };\n    }\n  }\n\n  return workingQuery;\n}\n\nfunction migrateTimeGrains(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureMonitor?.timeGrainUnit && workingQuery.azureMonitor.timeGrain !== 'auto') {\n    const newTimeGrain = TimegrainConverter.createISO8601Duration(\n      workingQuery.azureMonitor.timeGrain ?? 'auto',\n      workingQuery.azureMonitor.timeGrainUnit\n    );\n    workingQuery = setMetricsTimeGrain(workingQuery, newTimeGrain);\n\n    delete workingQuery.azureMonitor?.timeGrainUnit;\n  }\n\n  return workingQuery;\n}\n\nfunction migrateLogAnalyticsToFromTimes(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__from\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ')\n    );\n  }\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__to\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ')\n    );\n  }\n\n  return workingQuery;\n}\n\nfunction migrateToDefaultNamespace(query: AzureMonitorQuery): AzureMonitorQuery {\n  const haveMetricNamespace =\n    query.azureMonitor?.metricNamespace && query.azureMonitor.metricNamespace !== OLD_DEFAULT_DROPDOWN_VALUE;\n\n  if (!haveMetricNamespace && query.azureMonitor?.metricDefinition) {\n    return {\n      ...query,\n      azureMonitor: {\n        ...query.azureMonitor,\n        metricNamespace: query.azureMonitor.metricDefinition,\n        metricDefinition: undefined,\n      },\n    };\n  }\n\n  return query;\n}\n\nfunction migrateDimensionToDimensionFilter(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  const oldDimension = workingQuery.azureMonitor?.dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    workingQuery = appendDimensionFilter(workingQuery, oldDimension, 'eq', [\n      workingQuery.azureMonitor?.dimensionFilter || '',\n    ]);\n  }\n\n  delete workingQuery.azureMonitor?.dimension;\n  delete workingQuery.azureMonitor?.dimensionFilter;\n\n  return workingQuery;\n}\n\nfunction migrateDimensionFilterToArray(query: AzureMonitorQuery): AzureMonitorQuery {\n  const azureMonitorQuery = query.azureMonitor;\n\n  if (!azureMonitorQuery) {\n    return query;\n  }\n\n  const newFilters: AzureMetricDimension[] = [];\n  const dimensionFilters = azureMonitorQuery.dimensionFilters;\n  if (dimensionFilters && dimensionFilters.length > 0) {\n    dimensionFilters.forEach((filter) => {\n      const staticProps = { dimension: filter.dimension, operator: filter.operator };\n      if (!filter.filters && filter.filter) {\n        newFilters.push({ ...staticProps, filters: [filter.filter] });\n      } else {\n        let hasFilter = false;\n        if (filter.filters && filter.filter) {\n          for (const oldFilter of filter.filters) {\n            if (filter.filter === oldFilter) {\n              hasFilter = true;\n              break;\n            }\n          }\n          if (!hasFilter && filter.filter !== '*') {\n            filter.filters.push(filter.filter);\n          }\n          newFilters.push({ ...staticProps, filters: filter.filters });\n        }\n      }\n    });\n    if (newFilters.length > 0) {\n      return { ...query, azureMonitor: { ...azureMonitorQuery, dimensionFilters: newFilters } };\n    }\n  }\n  return query;\n}\n\nfunction migrateResourceUriToResourceObj(query: AzureMonitorQuery): AzureMonitorQuery {\n  if (query.azureMonitor?.resourceUri && !query.azureMonitor.resourceUri.startsWith('$')) {\n    const details = parseResourceDetails(query.azureMonitor.resourceUri);\n    const isWellFormedUri = details?.subscription && details?.resourceGroup && details?.resourceName;\n    return {\n      ...query,\n      subscription: details?.subscription,\n      azureMonitor: {\n        ...query.azureMonitor,\n        resources: [{ resourceGroup: details?.resourceGroup, resourceName: details?.resourceName }],\n        metricNamespace: details?.metricNamespace,\n        resourceUri: isWellFormedUri ? undefined : query.azureMonitor.resourceUri,\n      },\n    };\n  }\n\n  return query;\n}\n\nfunction migrateResourceGroupAndName(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureMonitor?.resourceGroup && workingQuery.azureMonitor?.resourceName) {\n    workingQuery = {\n      ...workingQuery,\n      azureMonitor: {\n        ...workingQuery.azureMonitor,\n        resources: [\n          {\n            resourceGroup: workingQuery.azureMonitor.resourceGroup,\n            resourceName: workingQuery.azureMonitor.resourceName,\n          },\n        ],\n      },\n    };\n\n    delete workingQuery.azureMonitor?.resourceGroup;\n    delete workingQuery.azureMonitor?.resourceName;\n  }\n\n  return workingQuery;\n}\n","import deepEqual from 'fast-deep-equal';\nimport { defaults } from 'lodash';\nimport { useEffect, useMemo } from 'react';\n\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\nimport migrateQuery from '../../utils/migrateQuery';\n\nconst DEFAULT_QUERY = {\n  queryType: AzureQueryType.AzureMonitor,\n};\n\nconst prepareQuery = (query: AzureMonitorQuery) => {\n  // Note: _.defaults does not apply default values deeply.\n  const withDefaults = defaults({}, query, DEFAULT_QUERY);\n  const migratedQuery = migrateQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedQuery = (query: AzureMonitorQuery, onChangeQuery: (newQuery: AzureMonitorQuery) => void) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedQuery;\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, CodeEditor, Space } from '@grafana/ui';\n\nimport AzureMonitorDatasource from '../../datasource';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorErrorish,\n  AzureMonitorOption,\n  AzureMonitorQuery,\n  AzureQueryType,\n} from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport { AzureCheatSheetModal } from '../LogsQueryEditor/AzureCheatSheetModal';\nimport NewMetricsQueryEditor from '../MetricsQueryEditor/MetricsQueryEditor';\nimport { QueryHeader } from '../QueryHeader';\nimport TracesQueryEditor from '../TracesQueryEditor';\n\nimport usePreparedQuery from './usePreparedQuery';\n\nexport type AzureMonitorQueryEditorProps = QueryEditorProps<\n  AzureMonitorDatasource,\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n>;\n\nconst QueryEditor = ({\n  query: baseQuery,\n  datasource,\n  onChange,\n  onRunQuery: baseOnRunQuery,\n  data,\n  range,\n}: AzureMonitorQueryEditorProps) => {\n  const [errorMessage, setError] = useLastError();\n  const onRunQuery = useMemo(() => debounce(baseOnRunQuery, 500), [baseOnRunQuery]);\n  const [azureLogsCheatSheetModalOpen, setAzureLogsCheatSheetModalOpen] = useState(false);\n\n  const onQueryChange = useCallback(\n    (newQuery: AzureMonitorQuery) => {\n      onChange(newQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const query = usePreparedQuery(baseQuery, onQueryChange);\n\n  const subscriptionId = query.subscription || datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map((v) => ({ label: v, value: v })),\n  };\n\n  return (\n    <div data-testid=\"azure-monitor-query-editor\">\n      <AzureCheatSheetModal\n        datasource={datasource.azureLogAnalyticsDatasource}\n        isOpen={azureLogsCheatSheetModalOpen}\n        onClose={() => setAzureLogsCheatSheetModalOpen(false)}\n        onChange={(a) => onChange({ ...a, queryType: AzureQueryType.LogAnalytics })}\n      />\n      <div className={css({ display: 'flex', alignItems: 'center' })}>\n        <QueryHeader query={query} onQueryChange={onQueryChange} />\n        {query.queryType === AzureQueryType.LogAnalytics && (\n          <Button\n            aria-label=\"Azure logs kick start your query button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => {\n              setAzureLogsCheatSheetModalOpen((prevValue) => !prevValue);\n\n              reportInteraction('grafana_azure_logs_query_patterns_opened', {\n                version: 'v2',\n                editorMode: query.azureLogAnalytics,\n              });\n            }}\n          >\n            Kick start your query\n          </Button>\n        )}\n      </div>\n      <EditorForQueryType\n        data={data}\n        subscriptionId={subscriptionId}\n        query={query}\n        datasource={datasource}\n        onChange={onQueryChange}\n        variableOptionGroup={variableOptionGroup}\n        setError={setError}\n        range={range}\n      />\n\n      {errorMessage && (\n        <>\n          <Space v={2} />\n          <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n            {errorMessage instanceof Error ? errorMessage.message : errorMessage}\n          </Alert>\n        </>\n      )}\n    </div>\n  );\n};\n\ninterface EditorForQueryTypeProps extends Omit<AzureMonitorQueryEditorProps, 'onRunQuery'> {\n  subscriptionId?: string;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst EditorForQueryType = ({\n  data,\n  subscriptionId,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError,\n  range,\n}: EditorForQueryTypeProps) => {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return (\n        <NewMetricsQueryEditor\n          data={data}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.LogAnalytics:\n      return (\n        <LogsQueryEditor\n          data={data}\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n          timeRange={range}\n        />\n      );\n\n    case AzureQueryType.AzureResourceGraph:\n      return (\n        <ArgQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.AzureTraces:\n      return (\n        <TracesQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n          range={range}\n        />\n      );\n\n    default:\n      const type = query.queryType as unknown;\n      return (\n        <Alert title=\"Unknown query type\">\n          {(type === 'Application Insights' || type === 'Insights Analytics') && (\n            <>\n              {type} was deprecated in Grafana 9. See the{' '}\n              <a\n                href=\"https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                deprecation notice\n              </a>{' '}\n              to get more information about how to migrate your queries. This is the current query definition:\n              <CodeEditor height=\"200px\" readOnly language=\"json\" value={JSON.stringify(query, null, 4)} />\n            </>\n          )}\n        </Alert>\n      );\n  }\n};\n\nexport default QueryEditor;\n","import { TypedVariableModel } from '@grafana/data';\n\nimport { EngineSchema } from '../types';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\n\n// matches (name):(type) = (defaultValue)\n// e.g. fromRangeStart:datetime = datetime(null)\n//  - name: fromRangeStart\n//  - type: datetime\n//  - defaultValue: datetime(null)\nconst METADATA_FUNCTION_PARAMS = /([\\w\\W]+):([\\w]+)(?:\\s?=\\s?([\\w\\W]+))?/;\n\nfunction transformMetadataFunction(sourceSchema: AzureLogAnalyticsMetadata) {\n  if (!sourceSchema.functions) {\n    return [];\n  }\n\n  return sourceSchema.functions.map((fn) => {\n    const params =\n      fn.parameters &&\n      fn.parameters\n        .split(', ')\n        .map((arg) => {\n          const match = arg.match(METADATA_FUNCTION_PARAMS);\n          if (!match) {\n            return;\n          }\n\n          const [, name, type, defaultValue] = match;\n\n          return {\n            name,\n            type,\n            defaultValue,\n            cslDefaultValue: defaultValue,\n          };\n        })\n        .filter(<T>(v: T): v is Exclude<T, undefined> => !!v);\n\n    return {\n      name: fn.name,\n      body: fn.body,\n      inputParameters: params || [],\n    };\n  });\n}\n\nexport function transformMetadataToKustoSchema(\n  sourceSchema: AzureLogAnalyticsMetadata,\n  nameOrIdOrSomething: string,\n  templateVariables: TypedVariableModel[]\n): EngineSchema {\n  const database = {\n    name: nameOrIdOrSomething,\n    tables: sourceSchema.tables,\n    functions: transformMetadataFunction(sourceSchema),\n    majorVersion: 0,\n    minorVersion: 0,\n  };\n\n  // Adding macros as known functions\n  database.functions.push(\n    {\n      name: '$__timeFilter',\n      body: '{ true }',\n      inputParameters: [\n        {\n          name: 'timeColumn',\n          type: 'System.String',\n          defaultValue: '\"\"',\n          cslDefaultValue: '\"\"',\n        },\n      ],\n    },\n    {\n      name: '$__timeFrom',\n      body: '{ datetime(2018-06-05T18:09:58.907Z) }',\n      inputParameters: [],\n    },\n    {\n      name: '$__timeTo',\n      body: '{ datetime(2018-06-05T20:09:58.907Z) }',\n      inputParameters: [],\n    },\n    {\n      name: '$__escapeMulti',\n      body: `{ @'\\\\grafana-vm\\Network(eth0)\\Total', @'\\\\hello!'}`,\n      inputParameters: [\n        {\n          name: '$myVar',\n          type: 'System.String',\n          defaultValue: '$myVar',\n          cslDefaultValue: '$myVar',\n        },\n      ],\n    },\n    {\n      name: '$__contains',\n      body: `{ colName in ('value1','value2') }`,\n      inputParameters: [\n        {\n          name: 'colName',\n          type: 'System.String',\n          defaultValue: 'colName',\n          cslDefaultValue: 'colName',\n        },\n        {\n          name: '$myVar',\n          type: 'System.String',\n          defaultValue: '$myVar',\n          cslDefaultValue: '$myVar',\n        },\n      ],\n    }\n  );\n\n  // Adding macros as global parameters\n  const globalScalarParameters = templateVariables.map((v) => {\n    return {\n      name: `$${v.name}`,\n      type: 'dynamic',\n    };\n  });\n\n  return {\n    clusterType: 'Engine',\n    cluster: {\n      connectionString: nameOrIdOrSomething,\n      databases: [database],\n    },\n    database: database,\n    globalScalarParameters,\n  };\n}\n","import { map } from 'lodash';\n\nimport { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport {\n  AzureAPIResponse,\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n  Subscription,\n  Workspace,\n} from '../types';\nimport { interpolateVariable, routeNames } from '../utils/common';\n\nimport { transformMetadataToKustoSchema } from './utils';\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorPath: string;\n  firstWorkspace?: string;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return (\n      item.hide !== true &&\n      ((!!item.azureLogAnalytics?.query &&\n        (!!item.azureLogAnalytics.resources?.length || !!item.azureLogAnalytics.workspace)) ||\n        !!item.azureTraces?.resources?.length)\n    );\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource<AzureAPIResponse<Subscription>>(path).then((result) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.value, (val: Workspace) => {\n        return {\n          text: val.name,\n          value: val.id,\n        };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<AzureAPIResponse<Workspace>> {\n    const subscriptionId = this.templateSrv.replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorPath +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource<AzureAPIResponse<Workspace>>(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const interpolatedUri = this.templateSrv.replace(resourceUri, {}, interpolateVariable);\n    const metadata = await this.getMetadata(interpolatedUri);\n    return transformMetadataToKustoSchema(metadata, interpolatedUri, this.templateSrv.getVariables());\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    let item;\n    if (target.queryType === AzureQueryType.LogAnalytics && target.azureLogAnalytics) {\n      item = target.azureLogAnalytics;\n      const resources = this.expandResourcesForMultipleVariables(item.resources, scopedVars);\n      let workspace = this.templateSrv.replace(item.workspace, scopedVars);\n\n      if (!workspace && !resources && this.firstWorkspace) {\n        workspace = this.firstWorkspace;\n      }\n\n      const query = this.templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n      return {\n        ...target,\n        queryType: target.queryType || AzureQueryType.LogAnalytics,\n\n        azureLogAnalytics: {\n          resultFormat: item.resultFormat,\n          query,\n          resources,\n          // Workspace was removed in Grafana 8, but remains for backwards compat\n          workspace,\n          dashboardTime: item.dashboardTime,\n          timeColumn: this.templateSrv.replace(item.timeColumn, scopedVars),\n        },\n      };\n    }\n\n    if (target.queryType === AzureQueryType.AzureTraces && target.azureTraces) {\n      item = target.azureTraces;\n      const resources = this.expandResourcesForMultipleVariables(item.resources, scopedVars);\n      const query = this.templateSrv.replace(item.query, scopedVars, interpolateVariable);\n      const traceTypes = item.traceTypes?.map((t) => this.templateSrv.replace(t, scopedVars));\n      const filters = (item.filters ?? [])\n        .filter((f) => !!f.property)\n        .map((f) => {\n          const filtersReplaced = f.filters?.map((filter) => this.templateSrv.replace(filter ?? '', scopedVars));\n          return {\n            property: this.templateSrv.replace(f.property, scopedVars),\n            operation: f.operation || 'eq',\n            filters: filtersReplaced || [],\n          };\n        });\n\n      return {\n        ...target,\n        queryType: target.queryType || AzureQueryType.AzureTraces,\n\n        azureTraces: {\n          resultFormat: item.resultFormat,\n          query,\n          resources,\n          operationId: this.templateSrv.replace(target.azureTraces?.operationId, scopedVars),\n          filters,\n          traceTypes,\n        },\n      };\n    }\n\n    return target;\n  }\n\n  private expandResourcesForMultipleVariables(\n    resources: string[] | undefined,\n    scopedVars: ScopedVars\n  ): string[] | undefined {\n    if (!resources) {\n      return undefined;\n    }\n    const expandedResources: string[] = [];\n    resources.forEach((r: string) => {\n      const tempVars = this.templateSrv.replace(r, scopedVars, 'raw');\n      const values = tempVars.split(',');\n      values.forEach((value) => {\n        expandedResources.push(value);\n      });\n    });\n    return expandedResources;\n  }\n\n  /*\n    In 7.5.x it used to be possible to set a default workspace id in the config on the auth page.\n    This has been deprecated, however is still used by a few legacy template queries.\n  */\n  getDeprecatedDefaultWorkSpace() {\n    return this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getFirstWorkspace(): Promise<string | undefined> {\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n  async getAzureLogAnalyticsCheatsheetQueries() {\n    return await this.getResource(`${this.resourcePath}/v1/metadata`);\n  }\n}\n","import { Namespace } from 'i18next';\nimport { find, startsWith } from 'lodash';\n\nimport { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n  GetMetricNamespacesQuery,\n  GetMetricNamesQuery,\n  GetMetricMetadataQuery,\n  AzureMetricQuery,\n  AzureMonitorLocations,\n  AzureMonitorProvidersResponse,\n  AzureAPIResponse,\n  AzureGetResourceNamesQuery,\n  Subscription,\n  Location,\n  ResourceGroup,\n  Metric,\n} from '../types';\nimport { routeNames } from '../utils/common';\nimport migrateQuery from '../utils/migrateQuery';\n\nimport ResponseParser from './response_parser';\nimport UrlBuilder from './url_builder';\n\nconst defaultDropdownValue = 'select';\n\nfunction hasValue(item?: string) {\n  return !!(item && item !== defaultDropdownValue);\n}\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  listByResourceGroupApiVersion = '2021-04-01';\n  providerApiVersion = '2021-04-01';\n  locationsApiVersion = '2020-01-01';\n  defaultSubscriptionId?: string;\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare resourceGroup: string;\n  declare resourceName: string;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = routeNames.azureMonitor;\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    const hasResource =\n      item?.azureMonitor?.resources &&\n      item.azureMonitor.resources.length > 0 &&\n      item.azureMonitor.resources.every((r) => hasValue(r.resourceGroup) && hasValue(r.resourceName)) &&\n      hasValue(item?.azureMonitor?.metricDefinition || item?.azureMonitor?.metricNamespace);\n    const hasResourceUri = hasValue(item.azureMonitor?.resourceUri);\n\n    return !!(\n      item.hide !== true &&\n      (hasResource || hasResourceUri) &&\n      hasValue(item?.azureMonitor?.metricName) &&\n      hasValue(item?.azureMonitor?.aggregation)\n    );\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const preMigrationQuery = target.azureMonitor;\n\n    if (!preMigrationQuery) {\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    // These properties need to be replaced pre-migration to ensure values are correctly interpolated\n    if (preMigrationQuery.resourceUri) {\n      preMigrationQuery.resourceUri = this.templateSrv.replace(preMigrationQuery.resourceUri, scopedVars);\n    }\n    if (preMigrationQuery.metricDefinition) {\n      preMigrationQuery.metricDefinition = this.templateSrv.replace(preMigrationQuery.metricDefinition, scopedVars);\n    }\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (preMigrationQuery.timeGrain && preMigrationQuery.timeGrainUnit && preMigrationQuery.timeGrain !== 'auto') {\n      preMigrationQuery.timeGrain = TimegrainConverter.createISO8601Duration(\n        preMigrationQuery.timeGrain,\n        preMigrationQuery.timeGrainUnit\n      );\n    }\n\n    const migratedTarget = migrateQuery(target);\n    const migratedQuery = migratedTarget.azureMonitor;\n    // This should never be triggered because the above error would've been thrown\n    if (!migratedQuery) {\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    const subscriptionId = this.templateSrv.replace(\n      migratedTarget.subscription || this.defaultSubscriptionId,\n      scopedVars\n    );\n    const resources = migratedQuery.resources?.map((r) => this.replaceTemplateVariables(r, scopedVars)).flat();\n    const metricNamespace = this.templateSrv.replace(migratedQuery.metricNamespace, scopedVars);\n    const customNamespace = this.templateSrv.replace(migratedQuery.customNamespace, scopedVars);\n    const timeGrain = this.templateSrv.replace((migratedQuery.timeGrain || '').toString(), scopedVars);\n    const aggregation = this.templateSrv.replace(migratedQuery.aggregation, scopedVars);\n    const top = this.templateSrv.replace(migratedQuery.top || '', scopedVars);\n\n    const dimensionFilters = (migratedQuery.dimensionFilters ?? [])\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filters = f.filters?.map((filter) => this.templateSrv.replace(filter ?? '', scopedVars));\n        return {\n          dimension: this.templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filters: filters || [],\n        };\n      });\n\n    const azMonitorQuery: AzureMetricQuery = {\n      ...migratedQuery,\n      resources,\n      metricNamespace,\n      customNamespace,\n      timeGrain,\n      allowedTimeGrainsMs: migratedQuery.allowedTimeGrainsMs,\n      metricName: this.templateSrv.replace(migratedQuery.metricName, scopedVars),\n      region: this.templateSrv.replace(migratedQuery.region, scopedVars),\n      aggregation: aggregation,\n      dimensionFilters,\n      top: top || '10',\n      alias: migratedQuery.alias,\n    };\n\n    return {\n      ...target,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: azMonitorQuery,\n    };\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource<AzureAPIResponse<Subscription>>(\n      `${this.resourcePath}/subscriptions?api-version=2019-03-01`\n    ).then((result) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    return this.getResource(\n      `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups?api-version=${this.listByResourceGroupApiVersion}`\n    ).then((result: AzureAPIResponse<ResourceGroup>) => {\n      return ResponseParser.parseResponseValues<ResourceGroup>(result, 'name', 'name');\n    });\n  }\n\n  async getResourceNames(query: AzureGetResourceNamesQuery, skipToken?: string) {\n    const promises = this.replaceTemplateVariables(query).map(\n      ({ metricNamespace, subscriptionId, resourceGroup, region }) => {\n        const validMetricNamespace = startsWith(metricNamespace?.toLowerCase(), 'microsoft.storage/storageaccounts/')\n          ? 'microsoft.storage/storageaccounts'\n          : metricNamespace;\n        let url = `${this.resourcePath}/subscriptions/${subscriptionId}`;\n        if (resourceGroup) {\n          url += `/resourceGroups/${resourceGroup}`;\n        }\n        url += `/resources?api-version=${this.listByResourceGroupApiVersion}`;\n        const filters: string[] = [];\n        if (validMetricNamespace) {\n          filters.push(`resourceType eq '${validMetricNamespace}'`);\n        }\n        if (region) {\n          filters.push(`location eq '${region}'`);\n        }\n        if (filters.length > 0) {\n          url += `&$filter=${filters.join(' and ')}`;\n        }\n        if (skipToken) {\n          url += `&$skiptoken=${skipToken}`;\n        }\n        return this.getResource(url).then(async (result) => {\n          let list: Array<{ text: string; value: string }> = [];\n          if (startsWith(metricNamespace?.toLowerCase(), 'microsoft.storage/storageaccounts/')) {\n            list = ResponseParser.parseResourceNames(result, 'microsoft.storage/storageaccounts');\n            for (let i = 0; i < list.length; i++) {\n              list[i].text += '/default';\n              list[i].value += '/default';\n            }\n          } else {\n            list = ResponseParser.parseResourceNames(result, metricNamespace);\n          }\n\n          if (result.nextLink) {\n            // If there is a nextLink, we should request more pages\n            const nextURL = new URL(result.nextLink);\n            const nextToken = nextURL.searchParams.get('$skiptoken');\n            if (!nextToken) {\n              throw Error('unable to request the next page of resources');\n            }\n            const nextPage = await this.getResourceNames({ metricNamespace, subscriptionId, resourceGroup }, nextToken);\n            list = list.concat(nextPage);\n          }\n\n          return list;\n        });\n      }\n    );\n    return (await Promise.all(promises)).flat();\n  }\n\n  getMetricNamespaces(query: GetMetricNamespacesQuery, globalRegion: boolean) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.resourcePath,\n      this.apiPreviewVersion,\n      // Only use the first query, as the metric namespaces should be the same for all queries\n      this.replaceSingleTemplateVariables(query),\n      globalRegion,\n      this.templateSrv\n    );\n    return this.getResource(url)\n      .then((result: AzureAPIResponse<Namespace>) => {\n        return ResponseParser.parseResponseValues(\n          result,\n          'properties.metricNamespaceName',\n          'properties.metricNamespaceName'\n        );\n      })\n      .then((result) => {\n        if (url.toLowerCase().includes('microsoft.storage/storageaccounts')) {\n          const storageNamespaces = [\n            'microsoft.storage/storageaccounts',\n            'microsoft.storage/storageaccounts/blobservices',\n            'microsoft.storage/storageaccounts/fileservices',\n            'microsoft.storage/storageaccounts/tableservices',\n            'microsoft.storage/storageaccounts/queueservices',\n          ];\n          for (const namespace of storageNamespaces) {\n            if (!find(result, ['value', namespace.toLowerCase()])) {\n              result.push({ value: namespace, text: namespace });\n            }\n          }\n        }\n        return result;\n      });\n  }\n\n  getMetricNames(query: GetMetricNamesQuery, multipleResources?: boolean, region?: string) {\n    const apiVersion = multipleResources ? this.apiPreviewVersion : this.apiVersion;\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      apiVersion,\n      // Only use the first query, as the metric names should be the same for all queries\n      this.replaceSingleTemplateVariables(query),\n      this.templateSrv,\n      multipleResources,\n      region\n    );\n    return this.getResource(url).then((result: AzureAPIResponse<Metric>) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(query: GetMetricMetadataQuery, multipleResources?: boolean, region?: string) {\n    const { metricName } = query;\n    const apiVersion = multipleResources ? this.apiPreviewVersion : this.apiVersion;\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      apiVersion,\n      // Only use the first query, as the metric metadata should be the same for all queries\n      this.replaceSingleTemplateVariables(query),\n      this.templateSrv,\n      multipleResources,\n      region\n    );\n    return this.getResource(url).then((result: AzureMonitorMetricsMetadataResponse) => {\n      return ResponseParser.parseMetadata(result, this.templateSrv.replace(metricName));\n    });\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n  private replaceSingleTemplateVariables<T extends { [K in keyof T]: string }>(query: T, scopedVars?: ScopedVars) {\n    // This method evaluates template variables supporting multiple values but only returns the first value.\n    // This will work as far as the the first combination of variables is valid.\n    // For example if 'rg1' contains 'res1' and 'rg2' contains 'res2' then\n    // { resourceGroup: ['rg1', 'rg2'], resourceName: ['res1', 'res2'] } would return\n    // { resourceGroup: 'rg1', resourceName: 'res1' } which is valid but\n    // { resourceGroup: ['rg1', 'rg2'], resourceName: ['res2'] } would result in\n    // { resourceGroup: 'rg1', resourceName: 'res2' } which is not.\n    return this.replaceTemplateVariables(query, scopedVars)[0];\n  }\n\n  private replaceTemplateVariables<T extends { [K in keyof T]: string }>(query: T, scopedVars?: ScopedVars) {\n    const workingQueries: Array<{ [K in keyof T]: string }> = [{ ...query }];\n    const keys = Object.keys(query) as Array<keyof T>;\n    keys.forEach((key) => {\n      const replaced = this.templateSrv.replace(workingQueries[0][key], scopedVars, 'raw');\n      if (replaced.includes(',')) {\n        const multiple = replaced.split(',');\n        const currentQueries = [...workingQueries];\n        multiple.forEach((value, i) => {\n          currentQueries.forEach((q) => {\n            if (i === 0) {\n              q[key] = value;\n            } else {\n              workingQueries.push({ ...q, [key]: value });\n            }\n          });\n        });\n      } else {\n        workingQueries.forEach((q) => {\n          q[key] = replaced;\n        });\n      }\n    });\n\n    return workingQueries;\n  }\n\n  async getProvider(providerName: string) {\n    return await this.getResource<AzureMonitorProvidersResponse>(\n      `${routeNames.azureMonitor}/providers/${providerName}?api-version=${this.providerApiVersion}`\n    );\n  }\n\n  async getLocations(subscriptions: string[]) {\n    const locationMap = new Map<string, AzureMonitorLocations>();\n    for (const subscription of subscriptions) {\n      const subLocations = ResponseParser.parseLocations(\n        await this.getResource<AzureAPIResponse<Location>>(\n          `${routeNames.azureMonitor}/subscriptions/${this.templateSrv.replace(subscription)}/locations?api-version=${\n            this.locationsApiVersion\n          }`\n        )\n      );\n      for (const location of subLocations) {\n        locationMap.set(location.name, location);\n      }\n    }\n\n    return locationMap;\n  }\n}\n","// eslint-disable-next-line lodash/import-scope\nimport _ from 'lodash';\n\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\n\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from '../types';\nimport { interpolateVariable } from '../utils/common';\n\nexport default class AzureResourceGraphDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!item.azureResourceGraph?.query && !!item.subscriptions && item.subscriptions.length > 0;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const ts = getTemplateSrv();\n    const item = target.azureResourceGraph;\n    if (!item) {\n      return target;\n    }\n    const variableNames = ts.getVariables().map((v) => `$${v.name}`);\n    const subscriptionVar = _.find(target.subscriptions, (sub) => _.includes(variableNames, sub));\n    const interpolatedSubscriptions = ts\n      .replace(subscriptionVar, scopedVars, (v: string[] | string) => v)\n      .split(',')\n      .filter((v) => v.length > 0);\n    const subscriptions = [\n      ...interpolatedSubscriptions,\n      ..._.filter(target.subscriptions, (sub) => !_.includes(variableNames, sub)),\n    ];\n    const query = ts.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      ...target,\n      queryType: AzureQueryType.AzureResourceGraph,\n      subscriptions,\n      azureResourceGraph: {\n        resultFormat: 'table',\n        query,\n      },\n    };\n  }\n}\n","import { uniq } from 'lodash';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend, reportInteraction } from '@grafana/runtime';\n\nimport { logsResourceTypes, resourceTypeDisplayNames, resourceTypes } from '../azureMetadata';\nimport AzureMonitorDatasource from '../azure_monitor/azure_monitor_datasource';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../components/ResourcePicker/types';\nimport {\n  addResources,\n  findRow,\n  parseMultipleResourceDetails,\n  parseResourceDetails,\n  parseResourceURI,\n  resourceToString,\n} from '../components/ResourcePicker/utils';\nimport {\n  AzureDataSourceJsonData,\n  AzureGraphResponse,\n  AzureMonitorResource,\n  AzureMonitorQuery,\n  AzureResourceGraphOptions,\n  AzureResourceSummaryItem,\n  RawAzureResourceGroupItem,\n  RawAzureResourceItem,\n  RawAzureSubscriptionItem,\n} from '../types';\nimport { routeNames } from '../utils/common';\n\nconst RESOURCE_GRAPH_URL = '/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01';\n\nconst logsSupportedResourceTypesKusto = logsResourceTypes.map((v) => `\"${v}\"`).join(',');\n\nexport type ResourcePickerQueryType = 'logs' | 'metrics' | 'traces';\n\nexport default class ResourcePickerData extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  private resourcePath: string;\n  resultLimit = 200;\n  azureMonitorDatasource;\n  supportedMetricNamespaces = '';\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    azureMonitorDatasource: AzureMonitorDatasource\n  ) {\n    super(instanceSettings);\n    this.resourcePath = `${routeNames.resourceGraph}`;\n    this.azureMonitorDatasource = azureMonitorDatasource;\n  }\n\n  async fetchInitialRows(\n    type: ResourcePickerQueryType,\n    currentSelection?: AzureMonitorResource[]\n  ): Promise<ResourceRowGroup> {\n    const subscriptions = await this.getSubscriptions();\n\n    if (!currentSelection) {\n      return subscriptions;\n    }\n\n    let resources = subscriptions;\n    const promises = currentSelection.map((selection) => async () => {\n      if (selection.subscription) {\n        const resourceGroupURI = `/subscriptions/${selection.subscription}/resourceGroups/${selection.resourceGroup}`;\n\n        if (selection.resourceGroup && !findRow(resources, resourceGroupURI)) {\n          const resourceGroups = await this.getResourceGroupsBySubscriptionId(selection.subscription, type);\n          resources = addResources(resources, `/subscriptions/${selection.subscription}`, resourceGroups);\n        }\n\n        const resourceURI = resourceToString(selection);\n        if (selection.resourceName && !findRow(resources, resourceURI)) {\n          const resourcesForResourceGroup = await this.getResourcesForResourceGroup(resourceGroupURI, type);\n          resources = addResources(resources, resourceGroupURI, resourcesForResourceGroup);\n        }\n      }\n    });\n\n    for (const promise of promises) {\n      // Fetch resources one by one, avoiding re-fetching the same resource\n      // and race conditions updating the resources array\n      await promise();\n    }\n\n    return resources;\n  }\n\n  async fetchAndAppendNestedRow(\n    rows: ResourceRowGroup,\n    parentRow: ResourceRow,\n    type: ResourcePickerQueryType\n  ): Promise<ResourceRowGroup> {\n    const nestedRows =\n      parentRow.type === ResourceRowType.Subscription\n        ? await this.getResourceGroupsBySubscriptionId(parentRow.id, type)\n        : await this.getResourcesForResourceGroup(parentRow.id, type);\n\n    return addResources(rows, parentRow.uri, nestedRows);\n  }\n\n  search = async (searchPhrase: string, searchType: ResourcePickerQueryType): Promise<ResourceRowGroup> => {\n    let searchQuery = 'resources';\n    if (searchType === 'logs') {\n      searchQuery += `\n      | union resourcecontainers`;\n    }\n    searchQuery += `\n        | where id contains \"${searchPhrase}\"\n        ${await this.filterByType(searchType)}\n        | order by tolower(name) asc\n        | limit ${this.resultLimit}\n      `;\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(searchQuery);\n    return response.map((item) => {\n      const parsedUri = parseResourceURI(item.id);\n      if (!parsedUri || !(parsedUri.resourceName || parsedUri.resourceGroup || parsedUri.subscription)) {\n        throw new Error('unable to fetch resource details');\n      }\n      let id = parsedUri.subscription ?? '';\n      let type = ResourceRowType.Subscription;\n      if (parsedUri.resourceName) {\n        id = parsedUri.resourceName;\n        type = ResourceRowType.Resource;\n      } else if (parsedUri.resourceGroup) {\n        id = parsedUri.resourceGroup;\n        type = ResourceRowType.ResourceGroup;\n      }\n      return {\n        name: item.name,\n        id,\n        uri: item.id,\n        resourceGroupName: item.resourceGroup,\n        type,\n        typeLabel: resourceTypeDisplayNames[item.type] || item.type,\n        location: item.location,\n      };\n    });\n  };\n\n  // private\n  async getSubscriptions(): Promise<ResourceRowGroup> {\n    const query = `\n    resources\n    | join kind=inner (\n              ResourceContainers\n                | where type == 'microsoft.resources/subscriptions'\n                | project subscriptionName=name, subscriptionURI=id, subscriptionId\n              ) on subscriptionId\n    | summarize count() by subscriptionName, subscriptionURI, subscriptionId\n    | order by subscriptionName desc\n  `;\n\n    let resources: RawAzureSubscriptionItem[] = [];\n\n    let allFetched = false;\n    let $skipToken = undefined;\n    while (!allFetched) {\n      // The response may include several pages\n      let options: Partial<AzureResourceGraphOptions> = {};\n      if ($skipToken) {\n        options = {\n          $skipToken,\n        };\n      }\n      const resourceResponse = await this.makeResourceGraphRequest<RawAzureSubscriptionItem[]>(query, 1, options);\n      if (!resourceResponse.data.length) {\n        throw new Error('No subscriptions were found');\n      }\n      resources = resources.concat(resourceResponse.data);\n      $skipToken = resourceResponse.$skipToken;\n      allFetched = !$skipToken;\n    }\n\n    return resources.map((subscription) => ({\n      name: subscription.subscriptionName,\n      id: subscription.subscriptionId,\n      uri: `/subscriptions/${subscription.subscriptionId}`,\n      typeLabel: 'Subscription',\n      type: ResourceRowType.Subscription,\n      children: [],\n    }));\n  }\n\n  async getResourceGroupsBySubscriptionId(\n    subscriptionId: string,\n    type: ResourcePickerQueryType\n  ): Promise<ResourceRowGroup> {\n    const query = `\n    resources\n     | join kind=inner (\n       ResourceContainers\n       | where type == 'microsoft.resources/subscriptions/resourcegroups'\n       | project resourceGroupURI=id, resourceGroupName=name, resourceGroup, subscriptionId\n     ) on resourceGroup, subscriptionId\n\n     ${await this.filterByType(type)}\n     | where subscriptionId == '${subscriptionId}'\n     | summarize count() by resourceGroupName, resourceGroupURI\n     | order by resourceGroupURI asc`;\n\n    let resourceGroups: RawAzureResourceGroupItem[] = [];\n    let allFetched = false;\n    let $skipToken = undefined;\n    while (!allFetched) {\n      // The response may include several pages\n      let options: Partial<AzureResourceGraphOptions> = {};\n      if ($skipToken) {\n        options = {\n          $skipToken,\n        };\n      }\n      const resourceResponse = await this.makeResourceGraphRequest<RawAzureResourceGroupItem[]>(query, 1, options);\n      resourceGroups = resourceGroups.concat(resourceResponse.data);\n      $skipToken = resourceResponse.$skipToken;\n      allFetched = !$skipToken;\n    }\n\n    return resourceGroups.map((r) => {\n      const parsedUri = parseResourceURI(r.resourceGroupURI);\n      if (!parsedUri || !parsedUri.resourceGroup) {\n        throw new Error('unable to fetch resource groups');\n      }\n      return {\n        name: r.resourceGroupName,\n        uri: r.resourceGroupURI,\n        id: parsedUri.resourceGroup,\n        type: ResourceRowType.ResourceGroup,\n        typeLabel: 'Resource Group',\n        children: [],\n      };\n    });\n  }\n\n  async getResourcesForResourceGroup(\n    resourceGroupId: string,\n    type: ResourcePickerQueryType\n  ): Promise<ResourceRowGroup> {\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(`\n      resources\n      | where id hasprefix \"${resourceGroupId}\"\n      ${await this.filterByType(type)}\n    `);\n\n    return response.map((item) => {\n      const parsedUri = parseResourceURI(item.id);\n      if (!parsedUri || !parsedUri.resourceName) {\n        throw new Error('unable to fetch resource details');\n      }\n      return {\n        name: item.name,\n        id: parsedUri.resourceName,\n        uri: item.id,\n        resourceGroupName: item.resourceGroup,\n        type: ResourceRowType.Resource,\n        typeLabel: resourceTypeDisplayNames[item.type] || item.type,\n        locationDisplayName: item.location,\n        location: item.location,\n      };\n    });\n  }\n\n  // used to make the select resource button that launches the resource picker show a nicer file path to users\n  async getResourceURIDisplayProperties(resourceURI: string): Promise<AzureMonitorResource> {\n    const { subscription, resourceGroup, resourceName } = parseResourceDetails(resourceURI) ?? {};\n\n    if (!subscription) {\n      throw new Error('Invalid resource URI passed');\n    }\n\n    // resourceGroupURI and resourceURI could be invalid values, but that's okay because the join\n    // will just silently fail as expected\n    const subscriptionURI = `/subscriptions/${subscription}`;\n    const resourceGroupURI = `${subscriptionURI}/resourceGroups/${resourceGroup}`;\n\n    const query = `\n    resourcecontainers\n    | where type == \"microsoft.resources/subscriptions\"\n    | where id =~ \"${subscriptionURI}\"\n    | project subscriptionName=name, subscriptionId\n\n    | join kind=leftouter (\n      resourcecontainers            \n            | where type == \"microsoft.resources/subscriptions/resourcegroups\"\n            | where id =~ \"${resourceGroupURI}\"\n            | project resourceGroupName=name, resourceGroup, subscriptionId\n        ) on subscriptionId\n\n        | join kind=leftouter (\n          resources\n            | where id =~ \"${resourceURI}\"\n            | project resourceName=name, subscriptionId\n        ) on subscriptionId\n\n        | project subscriptionName, resourceGroupName, resourceName\n    `;\n\n    const { data: response } = await this.makeResourceGraphRequest<AzureResourceSummaryItem[]>(query);\n\n    if (!response.length) {\n      throw new Error('unable to fetch resource details');\n    }\n\n    const { subscriptionName, resourceGroupName, resourceName: responseResourceName } = response[0];\n    // if the name is undefined it could be because the id is undefined or because we are using a template variable.\n    // Either way we can use it as a fallback. We don't really want to interpolate these variables because we want\n    // to show the user when they are using template variables `$sub/$rg/$resource`\n    return {\n      subscription: subscriptionName || subscription,\n      resourceGroup: resourceGroupName || resourceGroup,\n      resourceName: responseResourceName || resourceName,\n    };\n  }\n\n  async getResourceURIFromWorkspace(workspace: string) {\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(`\n      resources\n      | where properties['customerId'] == \"${workspace}\"\n      | project id\n    `);\n\n    if (!response.length) {\n      throw new Error('unable to find resource for workspace ' + workspace);\n    }\n\n    return response[0].id;\n  }\n\n  async makeResourceGraphRequest<T = unknown>(\n    query: string,\n    maxRetries = 1,\n    reqOptions?: Partial<AzureResourceGraphOptions>\n  ): Promise<AzureGraphResponse<T>> {\n    try {\n      return await this.postResource(this.resourcePath + RESOURCE_GRAPH_URL, {\n        query: query,\n        options: {\n          resultFormat: 'objectArray',\n          ...reqOptions,\n        },\n      });\n    } catch (error) {\n      if (maxRetries > 0) {\n        return this.makeResourceGraphRequest(query, maxRetries - 1);\n      }\n\n      throw error;\n    }\n  }\n\n  private filterByType = async (t: ResourcePickerQueryType) => {\n    if (this.supportedMetricNamespaces === '' && t !== 'logs') {\n      await this.fetchAllNamespaces();\n    }\n    return t === 'logs'\n      ? `| where type in (${logsSupportedResourceTypesKusto})`\n      : `| where type in (${this.supportedMetricNamespaces})`;\n  };\n\n  private async fetchAllNamespaces() {\n    const subscriptions = await this.getSubscriptions();\n    reportInteraction('grafana_ds_azuremonitor_subscriptions_loaded', { subscriptions: subscriptions.length });\n    let supportedMetricNamespaces: string[] = [];\n    for await (const subscription of subscriptions) {\n      const namespaces = await this.azureMonitorDatasource.getMetricNamespaces(\n        {\n          resourceUri: `/subscriptions/${subscription.id}`,\n        },\n        true\n      );\n      if (namespaces) {\n        const namespaceVals = namespaces.map((namespace) => `\"${namespace.value.toLocaleLowerCase()}\"`);\n        supportedMetricNamespaces = supportedMetricNamespaces.concat(namespaceVals);\n      }\n    }\n\n    if (supportedMetricNamespaces.length === 0) {\n      throw new Error(\n        'Unable to resolve a list of valid metric namespaces. Validate the datasource configuration is correct and required permissions have been granted for all subscriptions. Grafana requires at least the Reader role to be assigned.'\n      );\n    }\n    this.supportedMetricNamespaces = uniq(\n      supportedMetricNamespaces.concat(resourceTypes.map((namespace) => `\"${namespace}\"`))\n    ).join(',');\n  }\n\n  parseRows(resources: Array<string | AzureMonitorResource>): ResourceRow[] {\n    const resourceObjs = parseMultipleResourceDetails(resources);\n    const newSelectedRows: ResourceRow[] = [];\n    resourceObjs.forEach((resource, i) => {\n      let id = resource.resourceName;\n      let name = resource.resourceName;\n      let rtype = ResourceRowType.Resource;\n      if (!id) {\n        id = resource.resourceGroup;\n        name = resource.resourceGroup;\n        rtype = ResourceRowType.ResourceGroup;\n        if (!id) {\n          id = resource.subscription;\n          name = resource.subscription;\n          rtype = ResourceRowType.Subscription;\n        }\n      }\n      newSelectedRows.push({\n        id: id ?? '',\n        name: name ?? '',\n        type: rtype,\n        uri: resourceToString(resource),\n        typeLabel:\n          resourceTypeDisplayNames[resource.metricNamespace?.toLowerCase() ?? ''] ?? resource.metricNamespace ?? '',\n        location: resource.region,\n      });\n    });\n    return newSelectedRows;\n  }\n}\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { AzureMonitorQuery, AzureQueryType } from '../types';\n\n// The old Angular annotations editor put some properties (rawQuery, workspace, subscription)\n// on the root annotation object, rather than down in the 'targets' query value\n// This migration moves them to a Log Analytics query compatible with the React query editor\n// The old Angular annotations editor did not support any other query types.\nexport default function migrateAnnotation(annotation: AnnotationQuery<AzureMonitorQuery>) {\n  const oldQuery = typeof annotation.rawQuery === 'string' ? annotation.rawQuery : null;\n  const oldWorkspace = typeof annotation.workspace === 'string' ? annotation.workspace : null;\n\n  if (!(oldQuery && oldWorkspace && !annotation.target?.azureLogAnalytics?.query)) {\n    return annotation;\n  }\n\n  const newQuery: AzureMonitorQuery = {\n    ...(annotation.target ?? {}),\n    refId: annotation.target?.refId ?? 'Anno',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: oldQuery,\n      resources: [oldWorkspace],\n    },\n  };\n\n  return {\n    ...annotation,\n    rawQuery: undefined,\n    workspace: undefined,\n    subscription: undefined,\n    queryType: undefined,\n    target: newQuery,\n  };\n}\n","import { isGUIDish } from './components/ResourcePicker/utils';\nimport DataSource from './datasource';\nimport { AzureMonitorQuery, AzureQueryType } from './types';\nimport {\n  AppInsightsGroupByQuery,\n  AppInsightsMetricNameQuery,\n  GrafanaTemplateVariableQuery,\n  MetricNamespaceQuery,\n  MetricNamesQuery,\n  ResourceGroupsQuery,\n  ResourceNamesQuery,\n  SubscriptionsQuery,\n  WorkspacesQuery,\n} from './types/templateVariables';\n\n/* \n  Grafana Template Variable Functions\n  ex: Subscriptions()\n\n  These are helper functions we have created and exposed to users to make the writing of template variables easier. \n  Due to legacy reasons, we still need to parse strings to determine if a query is a Grafana Template Variable Function \n  or if it's a KQL-type query\n*/\n\nexport const grafanaTemplateVariableFnMatches = (query: string) => {\n  return {\n    subscriptions: query.match(/^Subscriptions\\(\\)/i),\n    resourceGroups: query.match(/^ResourceGroups\\(\\)/i),\n    resourceGroupsWithSub: query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    namespaces: query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    namespacesWithSub: query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNames: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNamesWithSub: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    metricNamespace: query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamespaceWithSub: query.match(/^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNames: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamesWithSub: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    appInsightsMetricNameQuery: query.match(/^AppInsightsMetricNames\\(\\)/i),\n    appInsightsGroupByQuery: query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    workspacesQuery: query.match(/^workspaces\\(\\)/i),\n    workspacesQueryWithSub: query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i),\n  };\n};\n\nconst isGrafanaTemplateVariableFnQuery = (query: string) => {\n  const matches: Record<string, RegExpMatchArray | null> = grafanaTemplateVariableFnMatches(query);\n  return Object.keys(matches).some((key) => !!matches[key]);\n};\n\nconst createGrafanaTemplateVariableQuery = (rawQuery: string, datasource: DataSource): AzureMonitorQuery => {\n  const matchesForQuery = grafanaTemplateVariableFnMatches(rawQuery);\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const createGrafanaTemplateVariableDetails = (): GrafanaTemplateVariableQuery => {\n    // deprecated app insights template variables (will most likely remove in grafana 9)\n    if (matchesForQuery.appInsightsMetricNameQuery) {\n      const queryDetails: AppInsightsMetricNameQuery = { rawQuery, kind: 'AppInsightsMetricNameQuery' };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.appInsightsGroupByQuery) {\n      const queryDetails: AppInsightsGroupByQuery = {\n        kind: 'AppInsightsGroupByQuery',\n        rawQuery,\n        metricName: matchesForQuery.appInsightsGroupByQuery[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.subscriptions) {\n      const queryDetails: SubscriptionsQuery = {\n        kind: 'SubscriptionsQuery',\n        rawQuery,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroupsWithSub) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceGroupsWithSub[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroups && defaultSubscriptionId) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.namespacesWithSub) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.namespacesWithSub[1],\n        resourceGroup: matchesForQuery.namespacesWithSub[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.namespaces && defaultSubscriptionId) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.namespaces[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNamesWithSub) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceNamesWithSub[1],\n        resourceGroup: matchesForQuery.resourceNamesWithSub[2],\n        metricNamespace: matchesForQuery.resourceNamesWithSub[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNames && defaultSubscriptionId) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.resourceNames[1],\n        metricNamespace: matchesForQuery.resourceNames[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespaceWithSub) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamespaceWithSub[1],\n        resourceGroup: matchesForQuery.metricNamespaceWithSub[2],\n        metricNamespace: matchesForQuery.metricNamespaceWithSub[3],\n        resourceName: matchesForQuery.metricNamespaceWithSub[4],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespace && defaultSubscriptionId) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricNamespace[1],\n        metricNamespace: matchesForQuery.metricNamespace[2],\n        resourceName: matchesForQuery.metricNamespace[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNames && defaultSubscriptionId) {\n      if (matchesForQuery.metricNames[3].indexOf(',') === -1) {\n        const queryDetails: MetricNamesQuery = {\n          kind: 'MetricNamesQuery',\n          rawQuery,\n          subscription: defaultSubscriptionId,\n          resourceGroup: matchesForQuery.metricNames[1],\n          metricNamespace: matchesForQuery.metricNames[2],\n          resourceName: matchesForQuery.metricNames[3],\n        };\n        return queryDetails;\n      }\n    }\n\n    if (matchesForQuery.metricNamesWithSub) {\n      const queryDetails: MetricNamesQuery = {\n        kind: 'MetricNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamesWithSub[1],\n        resourceGroup: matchesForQuery.metricNamesWithSub[2],\n        metricNamespace: matchesForQuery.metricNamesWithSub[3],\n        resourceName: matchesForQuery.metricNamesWithSub[4],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQueryWithSub) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: (matchesForQuery.workspacesQueryWithSub[1] || '').trim(),\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQuery && defaultSubscriptionId) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    // fallback\n    const queryDetails: SubscriptionsQuery = { kind: 'SubscriptionsQuery', rawQuery };\n    return queryDetails;\n  };\n\n  const query: AzureMonitorQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n    grafanaTemplateVariableFn: createGrafanaTemplateVariableDetails(),\n    subscription: defaultSubscriptionId,\n  };\n  return query;\n};\n\nconst createLogAnalyticsTemplateVariableQuery = async (\n  rawQuery: string,\n  datasource: DataSource\n): Promise<AzureMonitorQuery> => {\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  let resource = '';\n  // if there's an existing query, we try to get the resourcesuri from a deprecated default workspace\n  // a note this is very similar logic to what is used in useMigrations but moved out of the react-hook land\n  if (rawQuery) {\n    const defaultWorkspaceId = datasource.azureLogAnalyticsDatasource.getDeprecatedDefaultWorkSpace();\n    if (defaultWorkspaceId) {\n      const isWorkspaceGUID = isGUIDish(defaultWorkspaceId);\n      if (isWorkspaceGUID) {\n        resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(defaultWorkspaceId);\n      } else {\n        resource = defaultWorkspaceId;\n      }\n    } else {\n      const maybeFirstWorkspace = await datasource.azureLogAnalyticsDatasource.getFirstWorkspace();\n      resource = maybeFirstWorkspace || '';\n    }\n  }\n\n  return {\n    refId: 'A',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: rawQuery,\n      resources: resource ? [resource] : [],\n    },\n    subscription: defaultSubscriptionId,\n  };\n};\n\nconst migrateGrafanaTemplateVariableFn = (query: AzureMonitorQuery) => {\n  const { queryType, grafanaTemplateVariableFn } = query;\n  if (queryType !== AzureQueryType.GrafanaTemplateVariableFn || !grafanaTemplateVariableFn) {\n    return query;\n  }\n\n  const migratedQuery: AzureMonitorQuery = {\n    ...query,\n  };\n  if ('subscription' in grafanaTemplateVariableFn) {\n    migratedQuery.subscription = grafanaTemplateVariableFn.subscription;\n  }\n  if ('resourceGroup' in grafanaTemplateVariableFn) {\n    migratedQuery.resourceGroup = grafanaTemplateVariableFn.resourceGroup;\n  }\n  if ('metricNamespace' in grafanaTemplateVariableFn) {\n    migratedQuery.namespace = grafanaTemplateVariableFn.metricNamespace;\n  }\n  if ('resourceName' in grafanaTemplateVariableFn) {\n    migratedQuery.resource = grafanaTemplateVariableFn.resourceName;\n  }\n\n  switch (grafanaTemplateVariableFn.kind) {\n    case 'SubscriptionsQuery':\n      migratedQuery.queryType = AzureQueryType.SubscriptionsQuery;\n      break;\n    case 'ResourceGroupsQuery':\n      migratedQuery.queryType = AzureQueryType.ResourceGroupsQuery;\n      break;\n    case 'ResourceNamesQuery':\n      migratedQuery.queryType = AzureQueryType.ResourceNamesQuery;\n      break;\n    case 'MetricNamespaceQuery':\n      migratedQuery.queryType = AzureQueryType.NamespacesQuery;\n      break;\n    case 'MetricDefinitionsQuery':\n      migratedQuery.queryType = AzureQueryType.NamespacesQuery;\n      break;\n    case 'MetricNamesQuery':\n      migratedQuery.queryType = AzureQueryType.MetricNamesQuery;\n      break;\n    case 'WorkspacesQuery':\n      migratedQuery.queryType = AzureQueryType.WorkspacesQuery;\n      break;\n  }\n\n  return migratedQuery;\n};\n\nexport const migrateStringQueriesToObjectQueries = async (\n  rawQuery: string | AzureMonitorQuery,\n  options: { datasource: DataSource }\n): Promise<AzureMonitorQuery> => {\n  // no need to migrate already migrated queries\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  return isGrafanaTemplateVariableFnQuery(rawQuery)\n    ? createGrafanaTemplateVariableQuery(rawQuery, options.datasource)\n    : createLogAnalyticsTemplateVariableQuery(rawQuery, options.datasource);\n};\n\nexport const migrateQuery = async (\n  rawQuery: string | AzureMonitorQuery,\n  options: { datasource: DataSource }\n): Promise<AzureMonitorQuery> => {\n  let query = await migrateStringQueriesToObjectQueries(rawQuery, options);\n\n  if (query.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n    query = migrateGrafanaTemplateVariableFn(query);\n  }\n\n  return query;\n};\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\n\nimport { InlineField, Input } from '@grafana/ui';\n\nimport DataSource from '../../datasource';\nimport { migrateStringQueriesToObjectQueries } from '../../grafanaTemplateVariableFns';\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\n\nconst GrafanaTemplateVariableFnInput = ({\n  query,\n  updateQuery,\n  datasource,\n}: {\n  query: AzureMonitorQuery;\n  updateQuery: (val: AzureMonitorQuery) => void;\n  datasource: DataSource;\n}) => {\n  const [inputVal, setInputVal] = useState('');\n\n  useEffect(() => {\n    setInputVal(query.grafanaTemplateVariableFn?.rawQuery || '');\n  }, [query.grafanaTemplateVariableFn?.rawQuery]);\n\n  const onRunQuery = useCallback(\n    (newQuery: string) => {\n      migrateStringQueriesToObjectQueries(newQuery, { datasource }).then((updatedQuery) => {\n        if (updatedQuery.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n          updateQuery(updatedQuery);\n        } else {\n          updateQuery({\n            ...query,\n            grafanaTemplateVariableFn: {\n              kind: 'UnknownQuery',\n              rawQuery: newQuery,\n            },\n          });\n        }\n      });\n    },\n    [datasource, query, updateQuery]\n  );\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputVal(event.target.value);\n  };\n\n  return (\n    <InlineField label=\"Grafana template variable function\">\n      <Input\n        placeholder={'type a grafana template variable function, ex: Subscriptions()'}\n        value={inputVal}\n        onChange={onChange}\n        onBlur={() => onRunQuery(inputVal)}\n      />\n    </InlineField>\n  );\n};\n\nexport default GrafanaTemplateVariableFnInput;\n","import { get, isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Alert, Field, Select, Space } from '@grafana/ui';\n\nimport DataSource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { migrateQuery } from '../../grafanaTemplateVariableFns';\nimport { AzureMonitorOption, AzureMonitorQuery, AzureQueryType } from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\n\nimport GrafanaTemplateVariableFnInput from './GrafanaTemplateVariableFn';\n\ntype Props = {\n  query: AzureMonitorQuery | string;\n  onChange: (query: AzureMonitorQuery) => void;\n  datasource: DataSource;\n};\n\nconst removeOption: SelectableValue = { label: '-', value: '' };\n\nconst VariableEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const AZURE_QUERY_VARIABLE_TYPE_OPTIONS = [\n    { label: 'Subscriptions', value: AzureQueryType.SubscriptionsQuery },\n    { label: 'Resource Groups', value: AzureQueryType.ResourceGroupsQuery },\n    { label: 'Namespaces', value: AzureQueryType.NamespacesQuery },\n    { label: 'Regions', value: AzureQueryType.LocationsQuery },\n    { label: 'Resource Names', value: AzureQueryType.ResourceNamesQuery },\n    { label: 'Metric Names', value: AzureQueryType.MetricNamesQuery },\n    { label: 'Workspaces', value: AzureQueryType.WorkspacesQuery },\n    { label: 'Resource Graph', value: AzureQueryType.AzureResourceGraph },\n    { label: 'Logs', value: AzureQueryType.LogAnalytics },\n  ];\n  if (typeof props.query === 'object' && props.query.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n    // Add the option for the GrafanaTemplateVariableFn only if it's already in use\n    AZURE_QUERY_VARIABLE_TYPE_OPTIONS.push({\n      label: 'Grafana Query Function',\n      value: AzureQueryType.GrafanaTemplateVariableFn,\n    });\n  }\n  const [variableOptionGroup, setVariableOptionGroup] = useState<{ label: string; options: AzureMonitorOption[] }>({\n    label: 'Template Variables',\n    options: [],\n  });\n  const [requireSubscription, setRequireSubscription] = useState(false);\n  const [hasResourceGroup, setHasResourceGroup] = useState(false);\n  const [hasNamespace, setHasNamespace] = useState(false);\n  const [hasRegion, setHasRegion] = useState(false);\n  const [requireResourceGroup, setRequireResourceGroup] = useState(false);\n  const [requireNamespace, setRequireNamespace] = useState(false);\n  const [requireResource, setRequireResource] = useState(false);\n  const [subscriptions, setSubscriptions] = useState<SelectableValue[]>([]);\n  const [resourceGroups, setResourceGroups] = useState<SelectableValue[]>([]);\n  const [namespaces, setNamespaces] = useState<SelectableValue[]>([]);\n  const [resources, setResources] = useState<SelectableValue[]>([]);\n  const [regions, setRegions] = useState<SelectableValue[]>([]);\n  const [errorMessage, setError] = useLastError();\n  const queryType = typeof query === 'string' ? '' : query.queryType;\n\n  useEffect(() => {\n    migrateQuery(query, { datasource: datasource }).then((migratedQuery) => {\n      if (!isEqual(query, migratedQuery)) {\n        onChange(migratedQuery);\n      }\n    });\n  }, [query, datasource, onChange]);\n\n  useEffect(() => {\n    setRequireSubscription(false);\n    setHasResourceGroup(false);\n    setHasNamespace(false);\n    setRequireResourceGroup(false);\n    setRequireNamespace(false);\n    setRequireResource(false);\n    switch (queryType) {\n      case AzureQueryType.ResourceGroupsQuery:\n      case AzureQueryType.WorkspacesQuery:\n        setRequireSubscription(true);\n        break;\n      case AzureQueryType.NamespacesQuery:\n        setRequireSubscription(true);\n        setHasResourceGroup(true);\n        break;\n      case AzureQueryType.ResourceNamesQuery:\n        setRequireSubscription(true);\n        setHasResourceGroup(true);\n        setHasNamespace(true);\n        setHasRegion(true);\n        break;\n      case AzureQueryType.MetricNamesQuery:\n        setRequireSubscription(true);\n        setRequireResourceGroup(true);\n        setRequireNamespace(true);\n        setRequireResource(true);\n        break;\n      case AzureQueryType.LocationsQuery:\n        setRequireSubscription(true);\n        break;\n    }\n  }, [queryType]);\n\n  useEffect(() => {\n    const options: AzureMonitorOption[] = [];\n    datasource.getVariablesRaw().forEach((v) => {\n      if (get(v, 'query.queryType') !== queryType) {\n        options.push({ label: v.label || v.name, value: `$${v.name}` });\n      }\n    });\n    setVariableOptionGroup({\n      label: 'Template Variables',\n      options,\n    });\n  }, [datasource, queryType]);\n\n  useEffectOnce(() => {\n    datasource.getSubscriptions().then((subs) => {\n      setSubscriptions(subs.map((s) => ({ label: s.text, value: s.value })));\n    });\n  });\n\n  const subscription = typeof query === 'object' && query.subscription;\n  useEffect(() => {\n    if (subscription) {\n      datasource.getResourceGroups(subscription).then((rgs) => {\n        setResourceGroups(rgs.map((s) => ({ label: s.text, value: s.value })));\n      });\n    }\n  }, [datasource, subscription]);\n\n  const resourceGroup = (typeof query === 'object' && query.resourceGroup) || '';\n  useEffect(() => {\n    if (subscription) {\n      datasource.getMetricNamespaces(subscription, resourceGroup).then((rgs) => {\n        setNamespaces(rgs.map((s) => ({ label: s.text, value: s.value })));\n      });\n    }\n  }, [datasource, subscription, resourceGroup]);\n\n  useEffect(() => {\n    if (subscription) {\n      datasource.azureMonitorDatasource.getLocations([subscription]).then((rgs) => {\n        const regions: SelectableValue[] = [];\n        rgs.forEach((r) => regions.push({ label: r.displayName, value: r.name }));\n        setRegions(regions);\n      });\n    }\n  }, [datasource, subscription, resourceGroup]);\n\n  const namespace = (typeof query === 'object' && query.namespace) || '';\n  useEffect(() => {\n    if (subscription) {\n      datasource.getResourceNames(subscription, resourceGroup, namespace).then((rgs) => {\n        setResources(rgs.map((s) => ({ label: s.text, value: s.value })));\n      });\n    }\n  }, [datasource, subscription, resourceGroup, namespace]);\n\n  if (typeof query === 'string') {\n    // still migrating the query\n    return null;\n  }\n\n  const onQueryTypeChange = (selectableValue: SelectableValue) => {\n    if (selectableValue.value) {\n      onChange({\n        ...query,\n        queryType: selectableValue.value,\n        subscription: undefined,\n        resourceGroup: undefined,\n        namespace: undefined,\n        resource: undefined,\n      });\n    }\n  };\n\n  const onChangeSubscription = (selectableValue: SelectableValue) => {\n    if (selectableValue.value) {\n      onChange({\n        ...query,\n        subscription: selectableValue.value,\n        resourceGroup: undefined,\n        namespace: undefined,\n        resource: undefined,\n      });\n    }\n  };\n\n  const onChangeResourceGroup = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      resourceGroup: selectableValue.value,\n      namespace: undefined,\n      resource: undefined,\n    });\n  };\n\n  const onChangeNamespace = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      namespace: selectableValue.value,\n      resource: undefined,\n    });\n  };\n\n  const onChangeRegion = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      region: selectableValue.value,\n    });\n  };\n\n  const onChangeResource = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      resource: selectableValue.value,\n    });\n  };\n\n  const onQueryChange = (queryChange: AzureMonitorQuery) => {\n    onChange(queryChange);\n  };\n\n  return (\n    <>\n      <Field label=\"Query Type\" data-testid={selectors.components.variableEditor.queryType.input}>\n        <Select\n          aria-label=\"select query type\"\n          onChange={onQueryTypeChange}\n          options={AZURE_QUERY_VARIABLE_TYPE_OPTIONS}\n          width={25}\n          value={queryType}\n        />\n      </Field>\n      {query.queryType === AzureQueryType.LogAnalytics && (\n        <>\n          <LogsQueryEditor\n            subscriptionId={query.subscription}\n            query={query}\n            datasource={datasource}\n            onChange={onQueryChange}\n            variableOptionGroup={variableOptionGroup}\n            setError={setError}\n            hideFormatAs={true}\n          />\n          {errorMessage && (\n            <>\n              <Space v={2} />\n              <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n                {errorMessage instanceof Error ? errorMessage.message : errorMessage}\n              </Alert>\n            </>\n          )}\n        </>\n      )}\n      {query.queryType === AzureQueryType.GrafanaTemplateVariableFn && (\n        <GrafanaTemplateVariableFnInput query={query} updateQuery={props.onChange} datasource={datasource} />\n      )}\n      {requireSubscription && (\n        <Field label=\"Subscription\" data-testid={selectors.components.variableEditor.subscription.input}>\n          <Select\n            aria-label=\"select subscription\"\n            onChange={onChangeSubscription}\n            options={subscriptions.concat(variableOptionGroup)}\n            width={25}\n            value={query.subscription || null}\n          />\n        </Field>\n      )}\n      {(requireResourceGroup || hasResourceGroup) && (\n        <Field label=\"Resource Group\" data-testid={selectors.components.variableEditor.resourceGroup.input}>\n          <Select\n            aria-label=\"select resource group\"\n            onChange={onChangeResourceGroup}\n            options={\n              requireResourceGroup\n                ? resourceGroups.concat(variableOptionGroup)\n                : resourceGroups.concat(variableOptionGroup, removeOption)\n            }\n            width={25}\n            value={query.resourceGroup || null}\n            placeholder={requireResourceGroup ? undefined : 'Optional'}\n          />\n        </Field>\n      )}\n      {(requireNamespace || hasNamespace) && (\n        <Field label=\"Namespace\" data-testid={selectors.components.variableEditor.namespace.input}>\n          <Select\n            aria-label=\"select namespace\"\n            onChange={onChangeNamespace}\n            options={\n              requireNamespace\n                ? namespaces.concat(variableOptionGroup)\n                : namespaces.concat(variableOptionGroup, removeOption)\n            }\n            width={25}\n            value={query.namespace || null}\n            placeholder={requireNamespace ? undefined : 'Optional'}\n          />\n        </Field>\n      )}\n      {hasRegion && (\n        <Field label=\"Region\" data-testid={selectors.components.variableEditor.region.input}>\n          <Select\n            aria-label=\"select region\"\n            onChange={onChangeRegion}\n            options={regions.concat(variableOptionGroup)}\n            width={25}\n            value={query.region || null}\n            placeholder=\"Optional\"\n          />\n        </Field>\n      )}\n      {requireResource && (\n        <Field label=\"Resource\" data-testid={selectors.components.variableEditor.resource.input}>\n          <Select\n            aria-label=\"select resource\"\n            onChange={onChangeResource}\n            options={resources.concat(variableOptionGroup)}\n            width={25}\n            value={query.resource || null}\n          />\n        </Field>\n      )}\n      {query.queryType === AzureQueryType.AzureResourceGraph && (\n        <>\n          <ArgQueryEditor\n            subscriptionId={datasource.azureLogAnalyticsDatasource.defaultSubscriptionId}\n            query={query}\n            datasource={datasource}\n            onChange={onQueryChange}\n            variableOptionGroup={variableOptionGroup}\n            setError={setError}\n          />\n          {errorMessage && (\n            <>\n              <Space v={2} />\n              <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n                {errorMessage instanceof Error ? errorMessage.message : errorMessage}\n              </Alert>\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default VariableEditor;\n","import { from, lastValueFrom, Observable } from 'rxjs';\n\nimport {\n  CustomVariableSupport,\n  DataQueryRequest,\n  DataQueryResponse,\n  MetricFindValue,\n  toDataFrame,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport VariableEditor from './components/VariableEditor/VariableEditor';\nimport DataSource from './datasource';\nimport { migrateQuery } from './grafanaTemplateVariableFns';\nimport { AzureMonitorQuery, AzureQueryType } from './types';\nimport { GrafanaTemplateVariableQuery } from './types/templateVariables';\nimport messageFromError from './utils/messageFromError';\n\nexport class VariableSupport extends CustomVariableSupport<DataSource, AzureMonitorQuery> {\n  constructor(\n    private readonly datasource: DataSource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super();\n    this.datasource = datasource;\n  }\n\n  editor = VariableEditor;\n\n  hasValue(...values: string[]) {\n    return values.every((v) => !!this.templateSrv.replace(v));\n  }\n\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const promisedResults = async () => {\n      const queryObj = await migrateQuery(request.targets[0], { datasource: this.datasource });\n\n      try {\n        switch (queryObj.queryType) {\n          case AzureQueryType.SubscriptionsQuery:\n            const res = await this.datasource.getSubscriptions();\n            return {\n              data: res?.length ? [toDataFrame(res)] : [],\n            };\n          case AzureQueryType.ResourceGroupsQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getResourceGroups(queryObj.subscription);\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.NamespacesQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getMetricNamespaces(queryObj.subscription, queryObj.resourceGroup);\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.ResourceNamesQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getResourceNames(\n                queryObj.subscription,\n                queryObj.resourceGroup,\n                queryObj.namespace,\n                queryObj.region\n              );\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.MetricNamesQuery:\n            if (\n              queryObj.subscription &&\n              queryObj.resourceGroup &&\n              queryObj.namespace &&\n              queryObj.resource &&\n              this.hasValue(queryObj.subscription, queryObj.resourceGroup, queryObj.namespace, queryObj.resource)\n            ) {\n              const rgs = await this.datasource.getMetricNames(\n                queryObj.subscription,\n                queryObj.resourceGroup,\n                queryObj.namespace,\n                queryObj.resource\n              );\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.WorkspacesQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getAzureLogAnalyticsWorkspaces(queryObj.subscription);\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.GrafanaTemplateVariableFn:\n            if (queryObj.grafanaTemplateVariableFn) {\n              const templateVariablesResults = await this.callGrafanaTemplateVariableFn(\n                queryObj.grafanaTemplateVariableFn\n              );\n              return {\n                data: templateVariablesResults?.length ? [toDataFrame(templateVariablesResults)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.LocationsQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const locationMap = await this.datasource.azureMonitorDatasource.getLocations([queryObj.subscription]);\n              const res: Array<{ text: string; value: string }> = [];\n              locationMap.forEach((loc) => {\n                res.push({ text: loc.displayName, value: loc.name });\n              });\n              return {\n                data: res?.length ? [toDataFrame(res)] : [],\n              };\n            }\n          default:\n            request.targets[0] = queryObj;\n            const queryResp = await lastValueFrom(this.datasource.query(request));\n            return {\n              data: queryResp.data,\n              error: queryResp.error ? new Error(messageFromError(queryResp.error)) : undefined,\n            };\n        }\n      } catch (err) {\n        return { data: [], error: new Error(messageFromError(err)) };\n      }\n    };\n\n    return from(promisedResults());\n  }\n\n  // Deprecated\n  callGrafanaTemplateVariableFn(query: GrafanaTemplateVariableQuery): Promise<MetricFindValue[]> | null {\n    if (query.kind === 'SubscriptionsQuery') {\n      return this.datasource.getSubscriptions();\n    }\n\n    if (query.kind === 'ResourceGroupsQuery') {\n      return this.datasource.getResourceGroups(this.replaceVariable(query.subscription));\n    }\n\n    if (query.kind === 'ResourceNamesQuery') {\n      return this.datasource.getResourceNames(\n        this.replaceVariable(query.subscription),\n        this.replaceVariable(query.resourceGroup),\n        this.replaceVariable(query.metricNamespace)\n      );\n    }\n\n    if (query.kind === 'MetricNamespaceQuery') {\n      return this.datasource.azureMonitorDatasource.getMetricNamespaces(query, true);\n    }\n\n    if (query.kind === 'MetricNamesQuery') {\n      return this.datasource.azureMonitorDatasource.getMetricNames(query);\n    }\n\n    if (query.kind === 'WorkspacesQuery') {\n      return this.datasource.azureLogAnalyticsDatasource.getWorkspaces(this.replaceVariable(query.subscription));\n    }\n\n    return null;\n  }\n\n  replaceVariable(metric: string) {\n    return this.templateSrv.replace((metric || '').trim());\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LoadingState,\n  QueryFixAction,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from './types';\nimport migrateAnnotation from './utils/migrateAnnotation';\nimport migrateQuery from './utils/migrateQuery';\nimport { VariableSupport } from './variables';\n\nexport default class Datasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  annotations = {\n    prepareAnnotation: migrateAnnotation,\n  };\n\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n\n  pseudoDatasource: {\n    [key in AzureQueryType]?: AzureMonitorDatasource | AzureLogAnalyticsDatasource | AzureResourceGraphDatasource;\n  } = {};\n\n  declare optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings, this.azureMonitorDatasource);\n\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource,\n    };\n\n    this.variables = new VariableSupport(this);\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    if (!item.queryType) {\n      return false;\n    }\n    const ds = this.pseudoDatasource[item.queryType];\n    return ds?.filterQuery?.(item) ?? true;\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const byType = new Map<AzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const baseTarget of options.targets) {\n      // Migrate old query structures\n      const target = migrateQuery(baseTarget);\n\n      // Skip hidden or invalid queries or ones without properties\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      const mappedQueryType = queryType === AzureQueryType.AzureTraces ? AzureQueryType.LogAnalytics : queryType;\n      const ds = this.pseudoDatasource[mappedQueryType];\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  targetContainsTemplate(query: AzureMonitorQuery) {\n    if (query.subscription && this.templateSrv.containsTemplate(query.subscription)) {\n      return true;\n    }\n\n    let subQuery;\n    if (query.queryType === AzureQueryType.AzureMonitor) {\n      subQuery = JSON.stringify(query.azureMonitor);\n    } else if (query.queryType === AzureQueryType.LogAnalytics) {\n      subQuery = JSON.stringify(query.azureLogAnalytics);\n    } else if (query.queryType === AzureQueryType.AzureResourceGraph) {\n      subQuery = JSON.stringify([query.azureResourceGraph, query.subscriptions]);\n    }\n\n    return !!subQuery && this.templateSrv.containsTemplate(subQuery);\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.templateSrv.replace(subscriptionId));\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup?: string) {\n    let url = `/subscriptions/${subscriptionId}`;\n    if (resourceGroup) {\n      url += `/resourceGroups/${resourceGroup};`;\n    }\n    return this.azureMonitorDatasource.getMetricNamespaces({ resourceUri: url }, true);\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup?: string, metricNamespace?: string, region?: string) {\n    return this.azureMonitorDatasource.getResourceNames({ subscriptionId, resourceGroup, metricNamespace, region });\n  }\n\n  getMetricNames(subscriptionId: string, resourceGroup: string, metricNamespace: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNames({\n      subscription: subscriptionId,\n      resourceGroup,\n      metricNamespace,\n      resourceName,\n    });\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    const mapped = queries.map((query) => {\n      if (!query.queryType) {\n        return query;\n      }\n\n      const queryType = query.queryType === AzureQueryType.AzureTraces ? AzureQueryType.LogAnalytics : query.queryType;\n      const ds = this.pseudoDatasource[queryType];\n      return {\n        datasource: ds?.getRef(),\n        ...(ds?.applyTemplateVariables(query, scopedVars) ?? query),\n      };\n    });\n\n    return mapped;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getVariablesRaw() {\n    return this.templateSrv.getVariables();\n  }\n\n  modifyQuery(query: AzureMonitorQuery, action: QueryFixAction): AzureMonitorQuery {\n    if (!action.options) {\n      return query;\n    }\n    let expression = query.azureLogAnalytics?.query;\n    if (expression === undefined) {\n      return query;\n    }\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        expression += `\\n| where ${action.options.key} == \"${action.options.value}\"`;\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        expression += `\\n| where ${action.options.key} != \"${action.options.value}\"`;\n        break;\n      }\n    }\n    return { ...query, azureLogAnalytics: { ...query.azureLogAnalytics, query: expression } };\n  }\n}\n\nfunction hasQueryForType(query: AzureMonitorQuery): boolean {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.AzureTraces:\n      return !!query.azureTraces;\n\n    case AzureQueryType.GrafanaTemplateVariableFn:\n      return !!query.grafanaTemplateVariableFn;\n\n    default:\n      return false;\n  }\n}\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Loaded the first time a dashboard containing azure queries is loaded (not on every render)\n * Note: The queries used here are the ones pre-migration and pre-filterQuery\n *\n * This allows answering questions about:\n * - the adoption of the three query types (Azure Monitor, Azure Logs Analytics and Azure Resource Graph)\n * - stats about number of azure dashboards loaded, number of users\n * - stats about the grafana and plugins versions used by our users\n *\n * Dashboard: https://ops.grafana.net/d/Ad0pti0N/data-sources-adoption-tracking?orgId=1\n * Changelog:\n * - v9.1.0 : list of queries logged\n * - v9.1.2 : list removed in favour of stats, user_id removed\n */\nexport const trackAzureMonitorDashboardLoaded = (props: AzureMonitorDashboardLoadedProps) => {\n  reportInteraction('grafana_ds_azuremonitor_dashboard_loaded', props);\n};\n\nexport type AzureMonitorDashboardLoadedProps = {\n  grafana_version?: string;\n  dashboard_id: string;\n  org_id?: number;\n\n  /** number of non hidden queries of type Azure Monitor if any  */\n  azure_monitor_queries: number;\n  /** number of hidden queries (not executed) of type Azure Monitor if any  */\n  azure_monitor_queries_hidden: number;\n  /** number of Azure Monitor queries using multiple resources */\n  azure_monitor_multiple_resource: number;\n  /** number of Azure Monitor queries */\n  azure_monitor_query: number;\n\n  /** number of non hidden queries of type Azure Logs Analytics if any  */\n  azure_log_analytics_queries: number;\n  /** number of hidden queries (not executed) of type Azure Logs Analytics if any  */\n  azure_log_analytics_queries_hidden: number;\n  /** number of Azure Log Analytics queries using multiple resources */\n  azure_log_multiple_resource: number;\n  /** number of Azure Log Analytics queries using time-range defined explicitly in query */\n  azure_log_analytics_queries_query_time: number;\n  /** number of Azure Log Analytics queries using Grafana time-range */\n  azure_log_analytics_queries_grafana_time: number;\n  /** number of Azure Log Analytics queries */\n  azure_log_query: number;\n\n  /** number of non hidden queries of type Azure Resource Graph if any  */\n  azure_resource_graph_queries: number;\n  /** number of hidden queries (not executed) of type Azure Resource Graph if any  */\n  azure_resource_graph_queries_hidden: number;\n  /** number of Azure Resource Graph queries using multiple subscriptions */\n  azure_resource_graph_multiple_subscription: number;\n  /** number of Azure Resource Graph queries */\n  azure_resource_graph_query: number;\n\n  /** number of non hidden queries of type Azure Traces if any  */\n  azure_traces_queries: number;\n  /** number of hidden queries of type Azure Traces if any  */\n  azure_traces_queries_hidden: number;\n  /** number of trace queries using multiple resources */\n  azure_traces_multiple_resource: number;\n  /** number of trace queries using table format */\n  azure_traces_table: number;\n  /** number of trace queries using trace format */\n  azure_traces_trace: number;\n  /** number of trace queries specifying operation ID */\n  azure_traces_operation_id_specified: number;\n  /** number of trace queries specifying event types */\n  azure_traces_event_type_specified: number;\n  /** number of trace queries using filters */\n  azure_traces_filters: number;\n  /** number of Azure Traces queries */\n  azure_traces_query: number;\n\n  /** variable query tracking */\n  azure_subscriptions_query: number;\n  azure_resource_groups_query: number;\n  azure_namespaces_query: number;\n  azure_resource_names_query: number;\n  azure_metric_names_query: number;\n  azure_workspaces_query: number;\n  azure_grafana_template_variable_query: number;\n  azure_locations_query: number;\n  azure_unknown_query: number;\n};\n","import { DataSourcePlugin, DashboardLoadedEvent } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport AzureMonitorQueryEditor from './components/QueryEditor';\nimport Datasource from './datasource';\nimport pluginJson from './plugin.json';\nimport { trackAzureMonitorDashboardLoaded } from './tracking';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType, ResultFormat } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(AzureMonitorQueryEditor);\n\ninterface Statistics {\n  hidden: number;\n  visible: number;\n  multiResource: number;\n  count: number;\n  [key: string]: number;\n}\n\n// Track dashboard loads to RudderStack\ngetAppEvents().subscribe<DashboardLoadedEvent<AzureMonitorQuery>>(\n  DashboardLoadedEvent,\n  ({ payload: { dashboardId, orgId, userId, grafanaVersion, queries } }) => {\n    const azureQueries = queries[pluginJson.id];\n    const common = {\n      hidden: 0,\n      visible: 0,\n      multiResource: 0,\n      count: 0,\n    };\n    let stats: { [key in AzureQueryType | string]: Statistics } = {\n      [AzureQueryType.AzureMonitor]: {\n        ...common,\n      },\n      [AzureQueryType.LogAnalytics]: {\n        ...common,\n        grafanaTime: 0,\n        queryTime: 0,\n      },\n      [AzureQueryType.AzureResourceGraph]: {\n        ...common,\n      },\n      [AzureQueryType.AzureTraces]: {\n        ...common,\n        table: 0,\n        trace: 0,\n        operationIdSpecified: 0,\n        eventTypesSpecified: 0,\n        filtersSpecified: 0,\n      },\n      [AzureQueryType.SubscriptionsQuery]: { ...common },\n      [AzureQueryType.ResourceGroupsQuery]: { ...common },\n      [AzureQueryType.NamespacesQuery]: { ...common },\n      [AzureQueryType.ResourceNamesQuery]: { ...common },\n      [AzureQueryType.MetricNamesQuery]: { ...common },\n      [AzureQueryType.WorkspacesQuery]: { ...common },\n      [AzureQueryType.GrafanaTemplateVariableFn]: { ...common },\n      [AzureQueryType.LocationsQuery]: { ...common },\n      unknown: { ...common },\n    };\n\n    azureQueries.forEach((query) => {\n      if (query.queryType === AzureQueryType.AzureMonitor) {\n        stats[AzureQueryType.AzureMonitor][query.hide ? 'hidden' : 'visible']++;\n        if (query.azureMonitor?.resources && query.azureMonitor.resources.length > 1) {\n          stats[AzureQueryType.AzureMonitor].multiResource++;\n        }\n      }\n      if (query.queryType === AzureQueryType.LogAnalytics) {\n        stats[AzureQueryType.LogAnalytics][query.hide ? 'hidden' : 'visible']++;\n        stats[AzureQueryType.LogAnalytics][query.azureLogAnalytics?.dashboardTime ? 'grafanaTime' : 'queryTime']++;\n        if (query.azureLogAnalytics?.resources && query.azureLogAnalytics.resources.length > 1) {\n          stats[AzureQueryType.LogAnalytics].multiResource++;\n        }\n      }\n      if (query.queryType === AzureQueryType.AzureResourceGraph) {\n        stats[AzureQueryType.AzureResourceGraph][query.hide ? 'hidden' : 'visible']++;\n        if (query.subscriptions && query.subscriptions.length > 1) {\n          stats[AzureQueryType.AzureResourceGraph].multiResource++;\n        }\n      }\n      if (query.queryType === AzureQueryType.AzureTraces) {\n        stats[AzureQueryType.AzureTraces][query.hide ? 'hidden' : 'visible']++;\n        if (query.azureTraces) {\n          if (query.azureTraces.resultFormat) {\n            stats[AzureQueryType.AzureTraces][\n              query.azureTraces.resultFormat === ResultFormat.Trace ? ResultFormat.Trace : ResultFormat.Table\n            ]++;\n          }\n          if (query.azureTraces.resources && query.azureTraces.resources.length > 1) {\n            stats[AzureQueryType.AzureTraces].multiResource++;\n          }\n          if (query.azureTraces.operationId && query.azureTraces.operationId !== '') {\n            stats[AzureQueryType.AzureTraces].operationIdSpecified++;\n          }\n          if (query.azureTraces.traceTypes && query.azureTraces.traceTypes.length > 0) {\n            stats[AzureQueryType.AzureTraces].eventTypesSpecified++;\n          }\n          if (query.azureTraces.filters && query.azureTraces.filters.length > 0) {\n            stats[AzureQueryType.AzureTraces].filtersSpecified++;\n          }\n        }\n      }\n\n      switch (query.queryType) {\n        case AzureQueryType.AzureMonitor:\n        case AzureQueryType.LogAnalytics:\n        case AzureQueryType.AzureResourceGraph:\n        case AzureQueryType.AzureTraces:\n        case AzureQueryType.SubscriptionsQuery:\n        case AzureQueryType.ResourceGroupsQuery:\n        case AzureQueryType.NamespacesQuery:\n        case AzureQueryType.ResourceNamesQuery:\n        case AzureQueryType.MetricNamesQuery:\n        case AzureQueryType.WorkspacesQuery:\n        case AzureQueryType.GrafanaTemplateVariableFn:\n        case AzureQueryType.LocationsQuery:\n          stats[query.queryType].count++;\n          break;\n        default:\n          stats.unknown.count++;\n      }\n    });\n\n    if (azureQueries && azureQueries.length > 0) {\n      trackAzureMonitorDashboardLoaded({\n        grafana_version: grafanaVersion,\n        dashboard_id: dashboardId,\n        org_id: orgId,\n        // Metrics queries stats\n        azure_monitor_queries: stats[AzureQueryType.AzureMonitor].visible,\n        azure_monitor_queries_hidden: stats[AzureQueryType.AzureMonitor].hidden,\n        azure_monitor_multiple_resource: stats[AzureQueryType.AzureMonitor].multiResource,\n        azure_monitor_query: stats[AzureQueryType.AzureMonitor].count,\n\n        // Logs queries stats\n        azure_log_analytics_queries: stats[AzureQueryType.LogAnalytics].visible,\n        azure_log_analytics_queries_hidden: stats[AzureQueryType.LogAnalytics].hidden,\n        azure_log_multiple_resource: stats[AzureQueryType.LogAnalytics].multiResource,\n        azure_log_analytics_queries_grafana_time: stats[AzureQueryType.LogAnalytics].grafanaTime,\n        azure_log_analytics_queries_query_time: stats[AzureQueryType.LogAnalytics].queryTime,\n        azure_log_query: stats[AzureQueryType.LogAnalytics].count,\n\n        // ARG queries stats\n        azure_resource_graph_queries: stats[AzureQueryType.AzureResourceGraph].visible,\n        azure_resource_graph_queries_hidden: stats[AzureQueryType.AzureResourceGraph].hidden,\n        azure_resource_graph_multiple_subscription: stats[AzureQueryType.AzureResourceGraph].multiResource,\n        azure_resource_graph_query: stats[AzureQueryType.AzureResourceGraph].count,\n\n        // Traces queries stats\n        azure_traces_queries: stats[AzureQueryType.AzureTraces].visible,\n        azure_traces_queries_hidden: stats[AzureQueryType.AzureTraces].hidden,\n        azure_traces_multiple_resource: stats[AzureQueryType.AzureTraces].multiResource,\n        azure_traces_table: stats[AzureQueryType.AzureTraces].table,\n        azure_traces_trace: stats[AzureQueryType.AzureTraces].trace,\n        azure_traces_operation_id_specified: stats[AzureQueryType.AzureTraces].operationIdSpecified,\n        azure_traces_event_type_specified: stats[AzureQueryType.AzureTraces].eventTypesSpecified,\n        azure_traces_filters: stats[AzureQueryType.AzureTraces].filtersSpecified,\n        azure_traces_query: stats[AzureQueryType.AzureTraces].count,\n\n        // Variable queries stats\n        azure_subscriptions_query: stats[AzureQueryType.SubscriptionsQuery].count,\n        azure_resource_groups_query: stats[AzureQueryType.ResourceGroupsQuery].count,\n        azure_namespaces_query: stats[AzureQueryType.NamespacesQuery].count,\n        azure_resource_names_query: stats[AzureQueryType.ResourceNamesQuery].count,\n        azure_metric_names_query: stats[AzureQueryType.MetricNamesQuery].count,\n        azure_workspaces_query: stats[AzureQueryType.WorkspacesQuery].count,\n        azure_grafana_template_variable_query: stats[AzureQueryType.GrafanaTemplateVariableFn].count,\n        azure_locations_query: stats[AzureQueryType.LocationsQuery].count,\n\n        // Unknown query type\n        azure_unknown_query: stats.unknown.count,\n      });\n    }\n  }\n);\n"],"names":["EditorHeader","children","styles","getStyles","theme","__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","__objRest","source","exclude","target","InlineSelect","_a","_b","labelProp","props","getSelectStyles","id","components","SelectContainer","ValueContainer","className","TimeGrainConverter","timeGrain","timeGrainUnit","timeIntervals","interval","unit","toMinutes","allowedTimeGrains","timeGrains","o","closest","intervalMs","i","duration","offset","text","ResponseParser","result","textFieldName","valueFieldName","list","metricNamespace","metricName","defaultAggTypes","metricData","v","metricAvailabilities","avail","metadataDimensions","dimension","locations","location","hasOption","options","findOptions","values","set","accum","item","option","toOption","addValueToOptions","variableOptionGroup","optionValues","m","p","routeNames","interpolateVariable","variable","val","defaultAzureMonitorQuery","AzureQueryType","defaultAzureMetricQuery","defaultAzureLogsQuery","defaultAzureTracesQuery","defaultAzureTracesFilter","ResultFormat","defaultAzureMetricDimension","AzureCloud","concealed","getAuthType","config","getDefaultAzureCloud","getAzurePortalUrl","azureCloud","getAzureCloud","getSecret","secret","isCredentialsComplete","credentials","getCredentials","authType","updateCredentials","selectors","AzureCredentialsForm","azureCloudOptions","onCredentialsChange","disabled","managedIdentityEnabled","workloadIdentityEnabled","authTypeOptions","opts","onAuthTypeChange","selected","defaultAuthType","updated","onAzureCloudChange","onTenantIdChange","event","onClientIdChange","onClientSecretChange","onClientSecretReset","ConfigSection","Field","Select","opt","Input","Button","DefaultSubscription","subscriptions","getSubscriptions","onSubscriptionChange","onSubscriptionsChange","hasRequiredFields","loadSubscriptionsClicked","onLoadSubscriptions","updateSubscriptions","canceled","received","autoSelect","onChange","azureClouds","MonitorConfig","updateOptions","setSubscriptions","subscriptionId","receivedSubscriptions","useEffectOnce","ConfigEditor","optionsFunc","query","err","onOptionsChange","error","DataSourceDescription","Divider","Alert","SecureSocksProxySettings","messageFromElement","messageFromError","maybeAMessage","useLastError","errors","setErrors","addError","errorSource","errorsCopy","index","vSource","recentError","onQueryChange","newQuery","CodeEditor","DEFAULT_LABEL_WIDTH","labelWidth","inlineField","remainingProps","InlineField","EditorField","setError","setValues","change","containsSelectAll","c","allSubs","newSubs","FieldValidationMessage","ERROR_SOURCE","selectSubscriptions","fetchedSubscriptions","currentSubscriptions","currentSubscription","querySubscriptions","templateVars","sub","commonSubscriptions","datasource","results","selectAllSubscriptionOption","EditorRows","EditorRow","EditorFieldGroup","inputId","formatOptions","defaultValue","setFormatAs","resultFormat","handleChange","resources","renderAdvanced","isAdvancedOpen","setIsAdvancedOpen","Collapse","Space","ResourceRowType","EntryIcon","isOpen","type","Icon","NestedEntry","entry","isSelected","isDisabled","isSelectable","level","scrollIntoView","onToggleCollapse","onSelectedChange","hasChildren","handleToggleCollapse","handleSelectedChanged","ev","checkboxId","IconButton","Checkbox","UrlBuilder","templateSrv","resource","multipleResources","urlArray","subscription","resourceGroup","resourceName","metricNamespaceProcessed","metricNamespaceArray","resourceNameProcessed","resourceNameArray","provider","parentResource","baseUrl","apiVersion","globalRegion","resourceUri","region","customNamespace","url","RESOURCE_URI_REGEX","parseNamespaceAndName","metricNamespaceAndName","stringArray","namespaceArray","nextElem","parseResourceURI","resourceURI","groups","metricNamespaceAndResource","parseMultipleResourceDetails","parseResourceDetails","res","resourcesToStrings","resourceToString","isGUIDish","input","compareNamespaceAndName","rowNamespace","rowName","resourceNamespace","matchURI","rowURI","targetParams","rowParams","findRows","rows","uris","uri","row","findRow","addResources","targetParentId","newResources","draftState","draftRow","setResources","parsedResource","NestedRow","selectedRows","requestNestedRows","onRowSelectedChange","selectableEntryTypes","disableRow","rowStatus","setRowStatus","onRowToggleCollapse","selectedRow","childRow","FadeTransition","LoadingPlaceholder","searchFn","searchFilter","setSearchFilter","debouncedSearch","searchPhrase","resourcePickerData","onApply","onCancel","queryType","selectionNotice","isLoading","setIsLoading","setRows","setSelectedRows","internalSelected","setInternalSelected","errorMessage","setErrorMessage","shouldShowLimitFlag","setShouldShowLimitFlag","selectionNoticeText","loadInitialData","isValid","r","sanitized","found","parentRow","nestedRows","handleSelectionChanged","newRes","newSelected","newInternalSelected","handleApply","handleSearch","searchWord","searchResults","Modal","ResourceField","pickerIsOpen","setPickerIsOpen","handleOpenPicker","closePicker","ResourceLabel","resourcesComponents","setResourcesComponents","FormattedResource","icon","items","onResourceChange","removeResource","addResource","Label","Tooltip","AccessoryButton","setKustoQuery","kustoQuery","formatAs","setDashboardTime","dashboardTime","setTimeColumn","timeColumn","schema","monaco","setMonaco","editor","languages","model","handleEditorMount","TimeManagement","defaultTimeColumns","setDefaultTimeColumns","timeColumns","setTimeColumns","setDefaultColumn","column","timeColumnOptions","timeColumnsSet","defaultColumnsMap","db","table","cols","prev","curr","defaultColumns","handleTimeColumnChange","RadioButtonGroup","migrateWorkspaceQueryToResourceQuery","isWorkspaceGUID","useMigrations","migrationError","setMigrationError","hideFormatAs","timeRange","data","rowResourceNS","selectedRowSampleNs","setSchema","portalLinkButton","querySeries","RawQuery","lang","highlighted","QUERY_COMMANDS","COMPARISON_OPERATORS","ARITHMETIC_OPERATORS","NUMERIC_OPERATORS","GENERAL_FUNCTIONS","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","BOOLEAN_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","NON_AGGREGATION_FUNCS_STATS","STATS_FUNCS","KEYWORDS","FUNCTIONS","command","f","cheatsheetQueries","setCheatsheetQueries","areDropdownsOpen","setAreDropdownsOpen","visibleQueries","setVisibleQueries","searchInputValue","setSearchInputValue","dropdownMenu","category","getCheatsheetQueries","alphabetizedQueries","queriesByCategory","categoryQueries","queryId","filterQueriesBySearch","searchValue","visibleQueriesCategories","filteredQueries","filteredQueriesBySearch","filters","filterQueriesByCategory","categories","updatedVisibleQueries","selectedCategory","queryCategory","e","totalQueries","CustomScrollbar","Card","AzureCheatSheetModal","onClose","resourceTypeDisplayNames","multiResourceCompatibleTypes","resourceTypes","logsResourceTypes","onCommonPropChange","setCustomNamespace","selection","setMetricName","setAggregation","aggregation","setTimeGrain","setDimensionFilters","dimensions","appendDimensionFilter","operator","existingFilters","removeDimensionFilter","indexToRemove","newFilters","setDimensionFilterValue","fieldName","newFilter","setTop","top","setLegendAlias","alias","aggregationOptions","useDimensionLabels","dimensionLabels","setDimensionLabels","labelsObj","labels","series","fields","label","dimensionLower","prevLabels","newLabels","currentLabels","dimensionOptions","dimensionFilters","dimensionOperators","validDimensionOptions","t","dimensionFilter","onFieldChange","getValidDimensionOptions","selectedDimension","getValidFilterOptions","selectedFilter","filter","getValidMultiSelectOptions","selectedFilters","labelOptions","getValidOperators","selectedOperator","changedFunc","changed","properData","x","renderFilters","onDelete","EditorList","setValue","handleBlur","metricNames","metricNamespaces","timeGrainOptions","autoInterval","baseTimeGrains","useAsyncState","asyncFn","dependencies","finalValue","getResourceGroupAndName","useMetricNamespaces","useMetricNames","defaultMetricMetadata","useMetricMetadata","metricMetadata","setMetricMetadata","metadata","aggregations","newAggregation","newTimeGrain","rawResults","selectedValue","metricsMetadata","supportMultipleResource","namespace","rowResource","selectedRowSample","QueryHeader","queryTypes","getTraceProperties","traceTypes","propertyMap","setPropertyMap","range","azureTraces","property","queryString","lastValueFrom","makeRenderItem","renderItem","Filter","Option","innerProps","innerRef","isFocused","onClickMultiOption","queryTraceTypes","properties","loading","setLoading","setSelected","loadOptions","vals","promise","empty","ButtonSelect","Tables","tables","attributesOmit","availabilityResultsSchema","dependenciesSchema","eventsSchema","pageViewsSchema","requestsSchema","exceptionsSchema","tracesSchema","tablesSchema","tableTags","k","setQueryOperationId","operationId","setTraceTypes","setFilters","excludedProperties","queryFilters","updateFilters","updateQuery","getDefaultOptions","allEventTypes","defaultQuery","setOperationId","previousOperationId","usePrevious","OLD_DEFAULT_DROPDOWN_VALUE","migrateQuery","workingQuery","migrateLogAnalyticsToFromTimes","migrateTimeGrains","migrateToDefaultNamespace","migrateDimensionToDimensionFilter","migrateDimensionFilterToArray","migrateResourceUriToResourceObj","migrateResourceGroupAndName","oldDimension","azureMonitorQuery","staticProps","hasFilter","oldFilter","details","isWellFormedUri","DEFAULT_QUERY","prepareQuery","withDefaults","migratedQuery","onChangeQuery","preparedQuery","QueryEditor","baseQuery","baseOnRunQuery","onRunQuery","azureLogsCheatSheetModalOpen","setAzureLogsCheatSheetModalOpen","prevValue","EditorForQueryType","METADATA_FUNCTION_PARAMS","transformMetadataFunction","sourceSchema","fn","params","arg","match","name","transformMetadataToKustoSchema","nameOrIdOrSomething","templateVariables","database","globalScalarParameters","AzureLogAnalyticsDatasource","DataSourceWithBackend","instanceSettings","cloud","path","response","workspaceListUrl","interpolatedUri","scopedVars","workspace","filtersReplaced","expandedResources","field","defaultDropdownValue","hasValue","AzureMonitorDatasource","hasResource","hasResourceUri","preMigrationQuery","migratedTarget","azMonitorQuery","skipToken","promises","validMetricNamespace","nextToken","nextPage","storageNamespaces","workingQueries","replaced","multiple","currentQueries","q","providerName","locationMap","subLocations","AzureResourceGraphDatasource","ts","variableNames","subscriptionVar","RESOURCE_GRAPH_URL","logsSupportedResourceTypesKusto","ResourcePickerData","azureMonitorDatasource","searchType","searchQuery","parsedUri","currentSelection","resourceGroupURI","resourceGroups","resourcesForResourceGroup","allFetched","$skipToken","resourceResponse","resourceGroupId","subscriptionURI","subscriptionName","resourceGroupName","responseResourceName","maxRetries","reqOptions","supportedMetricNamespaces","namespaces","namespaceVals","resourceObjs","newSelectedRows","rtype","migrateAnnotation","annotation","oldQuery","oldWorkspace","grafanaTemplateVariableFnMatches","isGrafanaTemplateVariableFnQuery","matches","createGrafanaTemplateVariableQuery","rawQuery","matchesForQuery","defaultSubscriptionId","createGrafanaTemplateVariableDetails","createLogAnalyticsTemplateVariableQuery","defaultWorkspaceId","migrateGrafanaTemplateVariableFn","grafanaTemplateVariableFn","migrateStringQueriesToObjectQueries","inputVal","setInputVal","updatedQuery","removeOption","AZURE_QUERY_VARIABLE_TYPE_OPTIONS","setVariableOptionGroup","requireSubscription","setRequireSubscription","hasResourceGroup","setHasResourceGroup","hasNamespace","setHasNamespace","hasRegion","setHasRegion","requireResourceGroup","setRequireResourceGroup","requireNamespace","setRequireNamespace","requireResource","setRequireResource","setResourceGroups","setNamespaces","regions","setRegions","subs","s","rgs","onQueryTypeChange","selectableValue","onChangeSubscription","onChangeResourceGroup","onChangeNamespace","onChangeRegion","onChangeResource","queryChange","GrafanaTemplateVariableFn","VariableSupport","request","promisedResults","queryObj","templateVariablesResults","loc","queryResp","from","metric","Datasource","byType","baseTarget","hasQueryForType","queryForType","observables","req","mappedQueryType","ds","forkJoin","map","frame","of","subQuery","queries","action","expression","trackAzureMonitorDashboardLoaded","dashboardId","orgId","userId","grafanaVersion","azureQueries","common","stats"],"sourceRoot":""}