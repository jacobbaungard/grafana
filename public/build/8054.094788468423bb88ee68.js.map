{"version":3,"file":"8054.094788468423bb88ee68.js","mappings":"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","sources":["webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/EditorHeader.js","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/FlexItem.js","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/InlineSelect.js","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Aggregation.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AliasBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Alignment.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AlignmentFunction.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/GroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/LabelFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/MQLQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/GraphPeriod.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/MetricQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/PeriodSelect.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Preprocessor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Project.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/PromQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/LookbackPeriodSelect.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLO.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Selector.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Service.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLOQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/VisualMetricQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AnnotationsHelp.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Fields.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/constants.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/e2e/selectors.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/functions.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/dataquery.gen.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React__default from 'react';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import React__default from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n","import { css, cx } from '@emotion/css';\nimport React__default, { useState } from 'react';\nimport { useStyles2, Select, SelectContainer as SelectContainer$1 } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction InlineSelect(_a) {\n  var _b = _a, { label: labelProp } = _b, props = __objRest(_b, [\"label\"]);\n  const styles = useStyles2(getSelectStyles);\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, labelProp && /* @__PURE__ */ React__default.createElement(\"label\", { className: styles.label, htmlFor: id }, labelProp, \":\", \"\\xA0\"), /* @__PURE__ */ React__default.createElement(Select, __spreadProps(__spreadValues({ openMenuOnFocus: true, inputId: id }, props), { components })));\n}\nconst SelectContainer = (props) => {\n  const { children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(SelectContainer$1, __spreadProps(__spreadValues({}, props), { className: cx(props.className, styles.container) }), children);\n};\nconst ValueContainer = (props) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(className, styles.valueContainer) }, children);\n};\nconst getSelectStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    fontSize: 12,\n    alignItems: \"center\"\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: \"nowrap\"\n  }),\n  container: css({\n    background: \"none\",\n    borderColor: \"transparent\"\n  }),\n  valueContainer: css({\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"initial\",\n    color: theme.colors.text.secondary,\n    fontSize: 12\n  })\n});\n\nexport { InlineSelect };\n//# sourceMappingURL=InlineSelect.js.map\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { getAggregationOptionsByMetric } from '../functions';\nimport { ValueTypes } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: string) => void;\n  metricDescriptor?: MetricDescriptor;\n  crossSeriesReducer: string;\n  groupBys: string[];\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const Aggregation = (props: Props) => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n\n  return (\n    <EditorField label=\"Group by function\" data-testid=\"cloud-monitoring-aggregation\">\n      <Select\n        width=\"auto\"\n        onChange={({ value }) => props.onChange(value!)}\n        value={selected}\n        options={[\n          {\n            label: 'Template Variables',\n            options: props.templateVariableOptions,\n          },\n          {\n            label: 'Aggregations',\n            expanded: true,\n            options: aggOptions,\n          },\n        ]}\n        placeholder=\"Select Reducer\"\n        inputId={`${props.refId}-group-by-function`}\n        menuPlacement=\"top\"\n      />\n    </EditorField>\n  );\n};\n\nconst useAggregationOptionsByMetric = ({ metricDescriptor }: Props): Array<SelectableValue<string>> => {\n  const valueType = metricDescriptor?.valueType;\n  const metricKind = metricDescriptor?.metricKind;\n\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind).map((a) => ({\n      ...a,\n      label: a.text,\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions: Array<SelectableValue<string>>, props: Props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find((s) => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};\n","import { debounce } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { EditorField } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  refId: string;\n  onChange: (alias: string) => void;\n  value?: string;\n}\n\nexport const AliasBy = ({ refId, value = '', onChange }: Props) => {\n  const [alias, setAlias] = useState(value ?? '');\n\n  const propagateOnChange = debounce(onChange, 1000);\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAlias(e.currentTarget.value);\n    propagateOnChange(e.currentTarget.value);\n  };\n\n  return (\n    <EditorField label=\"Alias by\">\n      <Input id={`${refId}-alias-by`} value={alias} onChange={onInputChange} />\n    </EditorField>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { alignmentPeriodLabel } from '../functions';\nimport { PreprocessorType, TimeSeriesList } from '../types/query';\nimport { CustomMetaData, MetricDescriptor } from '../types/types';\n\nimport { AlignmentFunction } from './AlignmentFunction';\nimport { PeriodSelect } from './PeriodSelect';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n  metricDescriptor?: MetricDescriptor;\n  preprocessor?: PreprocessorType;\n}\n\nexport const Alignment = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n  metricDescriptor,\n  preprocessor,\n}: Props) => {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Alignment function\"\n        tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n      >\n        <AlignmentFunction\n          inputId={`${refId}-alignment-function`}\n          templateVariableOptions={templateVariableOptions}\n          query={query}\n          onChange={(q) => onChange({ ...query, ...q })}\n          metricDescriptor={metricDescriptor}\n          preprocessor={preprocessor}\n        />\n      </EditorField>\n      <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          templateVariableOptions={templateVariableOptions}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { PreprocessorType, SLOQuery, TimeSeriesList } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nexport interface Props {\n  inputId: string;\n  onChange: (query: TimeSeriesList | SLOQuery) => void;\n  query: TimeSeriesList | SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  metricDescriptor?: MetricDescriptor;\n  preprocessor?: PreprocessorType;\n}\n\nexport const AlignmentFunction = ({\n  inputId,\n  query,\n  templateVariableOptions,\n  onChange,\n  metricDescriptor,\n  preprocessor,\n}: Props) => {\n  const { perSeriesAligner: psa } = query;\n  let { valueType, metricKind } = metricDescriptor || {};\n\n  const { perSeriesAligner, alignOptions } = useMemo(\n    () => getAlignmentPickerData(valueType, metricKind, psa, preprocessor),\n    [valueType, metricKind, psa, preprocessor]\n  );\n\n  return (\n    <Select\n      onChange={({ value }) => onChange({ ...query, perSeriesAligner: value! })}\n      value={[...alignOptions, ...templateVariableOptions].find((s) => s.value === perSeriesAligner)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Alignment options',\n          expanded: true,\n          options: alignOptions,\n        },\n      ]}\n      placeholder=\"Select Alignment\"\n      inputId={inputId}\n      menuPlacement=\"top\"\n    />\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { SYSTEM_LABELS } from '../constants';\nimport { labelsToGroupedOptions } from '../functions';\nimport { TimeSeriesList } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nimport { Aggregation } from './Aggregation';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  labels: string[];\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n}\n\nexport const GroupBy = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor,\n}: Props) => {\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])],\n    [groupBys, variableOptionGroup]\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Group by\"\n        tooltip=\"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\"\n      >\n        <MultiSelect\n          inputId={`${refId}-group-by`}\n          width=\"auto\"\n          placeholder=\"Choose label\"\n          options={options}\n          value={query.groupBys ?? []}\n          onChange={(options) => {\n            onChange({ ...query, groupBys: options.map((o) => o.value!) });\n          }}\n          menuPlacement=\"top\"\n        />\n      </EditorField>\n      <Aggregation\n        metricDescriptor={metricDescriptor}\n        templateVariableOptions={variableOptionGroup.options}\n        crossSeriesReducer={query.crossSeriesReducer}\n        groupBys={query.groupBys ?? []}\n        onChange={(crossSeriesReducer) => onChange({ ...query, crossSeriesReducer })}\n        refId={refId}\n      />\n    </EditorFieldGroup>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorList, EditorRow } from '@grafana/experimental';\nimport { HorizontalGroup, Select } from '@grafana/ui';\n\nimport { labelsToGroupedOptions, stringArrayToFilters } from '../functions';\n\nexport interface Props {\n  labels: { [key: string]: string[] };\n  filters: string[];\n  onChange: (filters: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n}\n\ninterface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition: string;\n}\n\nconst DEFAULT_OPERATOR = '=';\nconst DEFAULT_CONDITION = 'AND';\n\nconst filtersToStringArray = (filters: Filter[]) =>\n  filters.flatMap(({ key, operator, value, condition }) => [key, operator, value, condition]).slice(0, -1);\n\nconst operators = ['=', '!=', '=~', '!=~'].map(toOption);\n\n// These keys are not editable as labels but they have its own selector.\n// For example the 'metric.type' is set with the metric name selector.\nconst protectedFilterKeys = ['metric.type'];\n\nexport const LabelFilter = ({ labels = {}, filters: filterArray, onChange: _onChange, variableOptionGroup }: Props) => {\n  const rawFilters: Filter[] = stringArrayToFilters(filterArray);\n  const filters = rawFilters.filter(({ key }) => !protectedFilterKeys.includes(key));\n  const protectedFilters = rawFilters.filter(({ key }) => protectedFilterKeys.includes(key));\n\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions(Object.keys(labels))],\n    [labels, variableOptionGroup]\n  );\n\n  const getOptions = ({ key = '', value = '' }: Partial<Filter>) => {\n    // Add the current key and value as options if they are manually entered\n    const keyPresent = options.some((op) => {\n      if (op.options) {\n        return options.some((opp) => opp.label === key);\n      }\n      return op.label === key;\n    });\n    if (!keyPresent) {\n      options.push({ label: key, value: key });\n    }\n\n    const valueOptions = labels.hasOwnProperty(key)\n      ? [variableOptionGroup, ...labels[key].map(toOption)]\n      : [variableOptionGroup];\n    const valuePresent = valueOptions.some((op) => op.label === value);\n    if (!valuePresent) {\n      valueOptions.push({ label: value, value });\n    }\n\n    return { options, valueOptions };\n  };\n\n  const onChange = (items: Array<Partial<Filter>>) => {\n    const filters = items.concat(protectedFilters).map(({ key, operator, value, condition }) => ({\n      key: key || '',\n      operator: operator || DEFAULT_OPERATOR,\n      value: value || '',\n      condition: condition || DEFAULT_CONDITION,\n    }));\n    _onChange(filtersToStringArray(filters));\n  };\n\n  const renderItem = (item: Partial<Filter>, onChangeItem: (item: Filter) => void, onDeleteItem: () => void) => {\n    const { key = '', operator = DEFAULT_OPERATOR, value = '', condition = DEFAULT_CONDITION } = item;\n    const { options, valueOptions } = getOptions(item);\n\n    return (\n      <HorizontalGroup spacing=\"xs\" width=\"auto\">\n        <Select\n          aria-label=\"Filter label key\"\n          formatCreateLabel={(v) => `Use label key: ${v}`}\n          allowCustomValue\n          value={key}\n          options={options}\n          onChange={({ value: key = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          value={operator}\n          options={operators}\n          onChange={({ value: operator = DEFAULT_OPERATOR }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          aria-label=\"Filter label value\"\n          placeholder=\"add filter value\"\n          formatCreateLabel={(v) => `Use label value: ${v}`}\n          allowCustomValue\n          value={value}\n          options={valueOptions}\n          onChange={({ value = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Filter\"\n        tooltip=\"To reduce the amount of data charted, apply a filter. A filter has three components: a label, a comparison, and a value. The comparison can be an equality, inequality, or regular expression.\"\n      >\n        <EditorList items={filters} renderItem={renderItem} onChange={onChange} />\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import React from 'react';\n\nimport { TextArea } from '@grafana/ui';\n\nimport { selectors } from '../e2e/selectors';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  query: string;\n}\n\nexport function MQLQueryEditor({ query, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && (event.shiftKey || event.ctrlKey)) {\n      event.preventDefault();\n      onRunQuery();\n    }\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.mqlMetricsQueryEditor.container.input}>\n      <TextArea\n        name=\"Query\"\n        className=\"slate-query-field\"\n        value={query}\n        rows={10}\n        placeholder=\"Enter a Cloud Monitoring MQL query (Run with Shift+Enter)\"\n        onBlur={onRunQuery}\n        onChange={(e) => onChange(e.currentTarget.value)}\n        onKeyDown={onKeyDown}\n      />\n    </span>\n  );\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { HorizontalGroup, Switch } from '@grafana/ui';\n\nimport { GRAPH_PERIODS } from '../constants';\n\nimport { PeriodSelect } from './index';\n\nexport interface Props {\n  refId: string;\n  onChange: (period: string) => void;\n  variableOptionGroup: SelectableValue<string>;\n  graphPeriod?: string;\n}\n\nexport const GraphPeriod = ({ refId, onChange, graphPeriod, variableOptionGroup }: Props) => {\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Graph period\"\n        htmlFor={`${refId}-graph-period`}\n        tooltip={\n          <>\n            Set <code>graph_period</code> which forces a preferred period between points. Automatically set to the\n            current interval if left blank.\n          </>\n        }\n      >\n        <HorizontalGroup>\n          <Switch\n            data-testid={`${refId}-switch-graph-period`}\n            value={graphPeriod !== 'disabled'}\n            onChange={(e) => onChange(e.currentTarget.checked ? '' : 'disabled')}\n          />\n          <PeriodSelect\n            inputId={`${refId}-graph-period`}\n            templateVariableOptions={variableOptionGroup.options}\n            current={graphPeriod}\n            onChange={onChange}\n            disabled={graphPeriod === 'disabled'}\n            aligmentPeriods={GRAPH_PERIODS}\n          />\n        </HorizontalGroup>\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import React, { useCallback, useEffect } from 'react';\n\nimport { SelectableValue, TimeRange } from '@grafana/data';\nimport { EditorRows, Stack } from '@grafana/experimental';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { AlignmentTypes, CloudMonitoringQuery, QueryType, TimeSeriesList, TimeSeriesQuery } from '../types/query';\nimport { CustomMetaData } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { GraphPeriod } from './GraphPeriod';\nimport { MQLQueryEditor } from './MQLQueryEditor';\nimport { Project } from './Project';\nimport { VisualMetricQueryEditor } from './VisualMetricQueryEditor';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n  query: CloudMonitoringQuery;\n  datasource: CloudMonitoringDatasource;\n  range: TimeRange;\n}\n\nexport const defaultTimeSeriesList: (dataSource: CloudMonitoringDatasource) => TimeSeriesList = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  crossSeriesReducer: 'REDUCE_NONE',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n});\n\nexport const defaultTimeSeriesQuery: (dataSource: CloudMonitoringDatasource) => TimeSeriesQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  query: '',\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup,\n  range,\n}: React.PropsWithChildren<Props>) {\n  const onChangeTimeSeriesList = useCallback(\n    (timeSeriesList: TimeSeriesList) => {\n      let filtersComplete = true;\n      if (timeSeriesList?.filters && timeSeriesList.filters.length > 0) {\n        for (const filter of timeSeriesList.filters) {\n          if (filter === '') {\n            filtersComplete = false;\n            break;\n          }\n        }\n      }\n      onQueryChange({ ...query, timeSeriesList });\n      if (filtersComplete) {\n        onRunQuery();\n      }\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  const onChangeTimeSeriesQuery = useCallback(\n    (timeSeriesQuery: TimeSeriesQuery) => {\n      onQueryChange({ ...query, timeSeriesQuery });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  useEffect(() => {\n    if (query.queryType === QueryType.TIME_SERIES_LIST && !query.timeSeriesList) {\n      onQueryChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        queryType: QueryType.TIME_SERIES_LIST,\n        timeSeriesList: defaultTimeSeriesList(datasource),\n        aliasBy: query.aliasBy,\n      });\n    }\n    if (query.queryType === QueryType.TIME_SERIES_QUERY && !query.timeSeriesQuery) {\n      onQueryChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        queryType: QueryType.TIME_SERIES_QUERY,\n        timeSeriesQuery: defaultTimeSeriesQuery(datasource),\n        aliasBy: query.aliasBy,\n      });\n    }\n  }, [onQueryChange, query, datasource]);\n\n  return (\n    <EditorRows>\n      {(query.queryType === QueryType.ANNOTATION || query.queryType === QueryType.TIME_SERIES_LIST) &&\n        query.timeSeriesList && (\n          <VisualMetricQueryEditor\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onChangeTimeSeriesList}\n            datasource={datasource}\n            query={query.timeSeriesList}\n            aliasBy={query.aliasBy}\n            onChangeAliasBy={(aliasBy: string) => onQueryChange({ ...query, aliasBy })}\n            range={range}\n          />\n        )}\n\n      {query.queryType === QueryType.TIME_SERIES_QUERY && query.timeSeriesQuery && (\n        <>\n          <Stack gap={1} direction=\"row\">\n            <Project\n              refId={refId}\n              datasource={datasource}\n              onChange={(projectName) =>\n                onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, projectName: projectName })\n              }\n              templateVariableOptions={variableOptionGroup.options}\n              projectName={query.timeSeriesQuery.projectName!}\n            />\n            <AliasBy\n              refId={refId}\n              value={query.aliasBy}\n              onChange={(aliasBy: string) => onQueryChange({ ...query, aliasBy })}\n            />\n          </Stack>\n          <MQLQueryEditor\n            onChange={(q: string) => onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, query: q })}\n            onRunQuery={onRunQuery}\n            query={query.timeSeriesQuery.query}\n          ></MQLQueryEditor>\n          <GraphPeriod\n            onChange={(graphPeriod: string) => onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, graphPeriod })}\n            graphPeriod={query.timeSeriesQuery.graphPeriod}\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n          />\n        </>\n      )}\n    </EditorRows>\n  );\n}\n\nexport const MetricQueryEditor = React.memo(Editor);\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { periodOption } from '../constants';\n\nexport interface Props {\n  inputId: string;\n  onChange: (period: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  aligmentPeriods: periodOption[];\n  selectWidth?: number;\n  category?: string;\n  disabled?: boolean;\n  current?: string;\n}\n\nexport function PeriodSelect({\n  inputId,\n  templateVariableOptions,\n  onChange,\n  current,\n  disabled,\n  aligmentPeriods,\n}: Props) {\n  const options = useMemo(\n    () =>\n      aligmentPeriods.map((ap) => ({\n        ...ap,\n        label: ap.text,\n      })),\n    [aligmentPeriods]\n  );\n  const visibleOptions = useMemo(() => options.filter((ap) => !ap.hidden), [options]);\n\n  return (\n    <Select\n      width=\"auto\"\n      onChange={({ value }) => onChange(value!)}\n      value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Aggregations',\n          expanded: true,\n          options: visibleOptions,\n        },\n      ]}\n      placeholder=\"Select Period\"\n      inputId={inputId}\n      disabled={disabled}\n      allowCustomValue\n      menuPlacement=\"top\"\n    />\n  );\n}\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nconst NONE_OPTION = { label: 'None', value: PreprocessorType.None };\n\nexport interface Props {\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n}\n\nexport const Preprocessor = ({ query, metricDescriptor, onChange }: Props) => {\n  const options = useOptions(metricDescriptor);\n\n  return (\n    <EditorField\n      label=\"Pre-processing\"\n      tooltip=\"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metric's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\"\n    >\n      <RadioButtonGroup\n        onChange={(value: PreprocessorType) => {\n          const { perSeriesAligner: psa } = query;\n          const { valueType, metricKind } = metricDescriptor ?? {};\n          const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, psa, value);\n          onChange({ ...query, preprocessor: value, perSeriesAligner });\n        }}\n        value={query.preprocessor ?? PreprocessorType.None}\n        options={options}\n      />\n    </EditorField>\n  );\n};\n\nconst useOptions = (metricDescriptor?: MetricDescriptor): Array<SelectableValue<PreprocessorType>> => {\n  const metricKind = metricDescriptor?.metricKind;\n  const valueType = metricDescriptor?.valueType;\n\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [\n      NONE_OPTION,\n      {\n        label: 'Rate',\n        value: PreprocessorType.Rate,\n        description: 'Data points are aligned and converted to a rate per time series',\n      },\n    ];\n\n    return metricKind === MetricKind.CUMULATIVE\n      ? [\n          ...options,\n          {\n            label: 'Delta',\n            value: PreprocessorType.Delta,\n            description: 'Data points are aligned by their delta (difference) per time series',\n          },\n        ]\n      : options;\n  }, [metricKind, valueType]);\n};\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\n\nexport interface Props {\n  refId: string;\n  datasource: CloudMonitoringDatasource;\n  onChange: (projectName: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  projectName: string;\n}\n\nexport function Project({ refId, projectName, datasource, onChange, templateVariableOptions }: Props) {\n  const [projects, setProjects] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getProjects().then((projects) => setProjects(projects));\n  }, [datasource]);\n\n  const projectsWithTemplateVariables = useMemo(\n    () => [\n      {\n        label: 'Template Variables',\n        options: templateVariableOptions,\n      },\n      ...projects,\n    ],\n    [projects, templateVariableOptions]\n  );\n\n  return (\n    <EditorField label=\"Project\">\n      <Select\n        width=\"auto\"\n        allowCustomValue\n        formatCreateLabel={(v) => `Use project: ${v}`}\n        onChange={({ value }) => onChange(value!)}\n        options={projectsWithTemplateVariables}\n        value={{ value: projectName, label: projectName }}\n        placeholder=\"Select Project\"\n        inputId={`${refId}-project`}\n      />\n    </EditorField>\n  );\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { TextArea, Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { PromQLQuery } from '../types/query';\n\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: PromQLQuery) => void;\n  onRunQuery: () => void;\n  query: PromQLQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => PromQLQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  expr: '',\n  step: '10s',\n});\n\nexport function PromQLQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  onRunQuery,\n}: React.PropsWithChildren<Props>) {\n  function onReturnKeyDown(e: React.KeyboardEvent) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  return (\n    <span data-testid={selectors.components.queryEditor.promQlQueryEditor.container.input}>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <TextArea\n          name=\"Query\"\n          className=\"slate-query-field\"\n          value={query.expr}\n          rows={10}\n          placeholder=\"Enter a Cloud Monitoring Prometheus query (Run with Shift+Enter)\"\n          onBlur={onRunQuery}\n          onKeyDown={onReturnKeyDown}\n          onChange={(e) => onChange({ ...query, expr: e.currentTarget.value })}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: 10s)'\n          }\n        >\n          <Input\n            type={'string'}\n            placeholder={'auto'}\n            onChange={(e) => onChange({ ...query, step: e.currentTarget.value })}\n            onKeyDown={onReturnKeyDown}\n            value={query.step ?? ''}\n          />\n        </EditorField>\n      </EditorRow>\n    </span>\n  );\n}\n","import React from 'react';\n\nimport { EditorHeader, FlexItem, InlineSelect } from '@grafana/experimental';\n\nimport { QUERY_TYPES } from '../constants';\nimport { CloudMonitoringQuery } from '../types/query';\n\nexport interface QueryEditorHeaderProps {\n  query: CloudMonitoringQuery;\n  onChange: (value: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const QueryHeader = (props: QueryEditorHeaderProps) => {\n  const { query, onChange, onRunQuery } = props;\n  const { queryType } = query;\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Query type\"\n        options={QUERY_TYPES}\n        value={queryType}\n        onChange={({ value }) => {\n          onChange({ ...query, queryType: value! });\n          onRunQuery();\n        }}\n      />\n      <FlexItem grow={1} />\n    </EditorHeader>\n  );\n};\n","import deepEqual from 'fast-deep-equal';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { QueryEditorProps, getDefaultTimeRange, toOption } from '@grafana/data';\nimport { EditorRows } from '@grafana/experimental';\nimport { ConfirmModal } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { CloudMonitoringQuery, PromQLQuery, QueryType, SLOQuery } from '../types/query';\nimport { CloudMonitoringOptions } from '../types/types';\n\nimport { defaultTimeSeriesList, defaultTimeSeriesQuery } from './MetricQueryEditor';\nimport { PromQLQueryEditor } from './PromQLEditor';\nimport { QueryHeader } from './QueryHeader';\nimport { defaultQuery as defaultSLOQuery } from './SLOQueryEditor';\n\nimport { MetricQueryEditor, SLOQueryEditor } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const QueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, onChange, range } = props;\n  const [modalIsOpen, setModalIsOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    const migrated = datasource.migrateQuery(query);\n    if (!deepEqual(migrated, query)) {\n      onChange({ ...migrated });\n    }\n  }, [query, datasource, onChange]);\n\n  const [currentQuery, setCurrentQuery] = useState<CloudMonitoringQuery>(query);\n  const [queryHasBeenEdited, setQueryHasBeenEdited] = useState<boolean>(false);\n\n  const sloQuery = { ...defaultSLOQuery(datasource), ...query.sloQuery };\n  const onSLOQueryChange = (q: SLOQuery) => {\n    onChange({ ...query, sloQuery: q });\n    onRunQuery();\n  };\n\n  const promQLQuery = {\n    ...{ projectName: datasource.getDefaultProject(), expr: '', step: '10s' },\n    ...query.promQLQuery,\n  };\n  const onPromQLQueryChange = (q: PromQLQuery) => {\n    onChange({ ...query, promQLQuery: q });\n  };\n\n  const onMetricQueryChange = (q: CloudMonitoringQuery) => {\n    if (\n      (q.queryType === QueryType.TIME_SERIES_LIST && !isEqual(q.timeSeriesList, defaultTimeSeriesList(datasource))) ||\n      (q.queryType === QueryType.TIME_SERIES_QUERY && !isEqual(q.timeSeriesQuery, defaultTimeSeriesQuery(datasource)))\n    ) {\n      setQueryHasBeenEdited(true);\n    }\n    onChange(q);\n  };\n\n  const meta = props.data?.series.length ? props.data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    expanded: false,\n    options: datasource.getVariables().map(toOption),\n  };\n\n  // Use a known query type\n  useEffect(() => {\n    if (!query.queryType || !Object.values(QueryType).includes(query.queryType)) {\n      onChange({ ...query, queryType: QueryType.TIME_SERIES_LIST });\n    }\n  });\n  const queryType = query.queryType;\n\n  const checkForModalDisplay = (q: CloudMonitoringQuery) => {\n    if (\n      queryHasBeenEdited &&\n      (currentQuery.queryType === QueryType.TIME_SERIES_LIST || currentQuery.queryType === QueryType.TIME_SERIES_QUERY)\n    ) {\n      if (currentQuery.queryType !== q.queryType) {\n        setModalIsOpen(true);\n      }\n    } else {\n      onChange(q);\n    }\n    setCurrentQuery(q);\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.container}>\n      <EditorRows>\n        <ConfirmModal\n          data-testid=\"switch-query-type-modal\"\n          title=\"Warning\"\n          body=\"By switching your query type, your current query will be lost.\"\n          isOpen={modalIsOpen}\n          onConfirm={() => {\n            setModalIsOpen(false);\n            onChange(currentQuery);\n            setQueryHasBeenEdited(false);\n          }}\n          confirmText=\"Confirm\"\n          onDismiss={() => {\n            setModalIsOpen(false);\n            setCurrentQuery(query);\n          }}\n        />\n        <QueryHeader query={query} onChange={checkForModalDisplay} onRunQuery={onRunQuery} />\n\n        {queryType === QueryType.PROMQL && (\n          <PromQLQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            onChange={onPromQLQueryChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={promQLQuery}\n          />\n        )}\n\n        {queryType !== QueryType.SLO && (\n          <MetricQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onMetricQueryChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={query}\n            range={range || getDefaultTimeRange()}\n          />\n        )}\n\n        {queryType === QueryType.SLO && (\n          <SLOQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onSLOQueryChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={sloQuery}\n            aliasBy={query.aliasBy}\n            onChangeAliasBy={(aliasBy: string) => onChange({ ...query, aliasBy })}\n          />\n        )}\n      </EditorRows>\n    </span>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { LOOKBACK_PERIODS } from '../constants';\n\nexport interface Props {\n  refId: string;\n  onChange: (lookbackPeriod: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  current?: string;\n}\n\nexport const LookbackPeriodSelect = ({ refId, current, templateVariableOptions, onChange }: Props) => {\n  const options = LOOKBACK_PERIODS.map((lp) => ({\n    ...lp,\n    label: lp.text,\n  }));\n  if (current && !options.find((op) => op.value === current)) {\n    options.push({ label: current, text: current, value: current, hidden: false });\n  }\n  const visibleOptions = options.filter((lp) => !lp.hidden);\n\n  return (\n    <EditorField label=\"Lookback period\" htmlFor={`${refId}-lookback-period`}>\n      <Select\n        inputId={`${refId}-lookback-period`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          {\n            label: 'Predefined periods',\n            expanded: true,\n            options: visibleOptions,\n          },\n        ]}\n        onChange={({ value }) => onChange(value!)}\n      />\n    </EditorField>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const SLO = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  const [slos, setSLOs] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName, serviceId } = query;\n\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then((sloIds: Array<SelectableValue<string>>) => {\n      setSLOs([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...sloIds,\n      ]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"SLO\">\n      <Select\n        inputId={`${refId}-slo`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.sloId && { value: query?.sloId, label: query?.sloName || query?.sloId }}\n        placeholder=\"Select SLO\"\n        options={slos}\n        onChange={async ({ value: sloId = '', label: sloName = '' }) => {\n          const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n          const slo = slos.find(({ value }) => value === datasource.templateSrv.replace(sloId));\n          onChange({ ...query, sloId, sloName, goal: slo?.goal });\n        }}\n      />\n    </EditorField>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { SELECTORS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Selector = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  return (\n    <EditorField label=\"Selector\" htmlFor={`${refId}-slo-selector`}>\n      <Select\n        inputId={`${refId}-slo-selector`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...SELECTORS, ...templateVariableOptions].find((s) => s.value === query?.selectorName ?? '')}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          ...SELECTORS,\n        ]}\n        onChange={({ value: selectorName }) => onChange({ ...query, selectorName: selectorName ?? '' })}\n      />\n    </EditorField>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Service = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName } = query;\n\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then((services: Array<SelectableValue<string>>) => {\n      setServices([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...services,\n      ]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"Service\">\n      <Select\n        inputId={`${refId}-slo-service`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.serviceId && { value: query?.serviceId, label: query?.serviceName || query?.serviceId }}\n        placeholder=\"Select service\"\n        options={services}\n        onChange={({ value: serviceId = '', label: serviceName = '' }) =>\n          onChange({ ...query, serviceId, serviceName, sloId: '' })\n        }\n      />\n    </EditorField>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS, SLO_BURN_RATE_SELECTOR_NAME } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { alignmentPeriodLabel } from '../functions';\nimport { AlignmentTypes, SLOQuery } from '../types/query';\nimport { CustomMetaData } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { LookbackPeriodSelect } from './LookbackPeriodSelect';\nimport { PeriodSelect } from './PeriodSelect';\nimport { Project } from './Project';\nimport { SLO } from './SLO';\nimport { Selector } from './Selector';\nimport { Service } from './Service';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: SLOQuery) => void;\n  onRunQuery: () => void;\n  query: SLOQuery;\n  datasource: CloudMonitoringDatasource;\n  aliasBy?: string;\n  onChangeAliasBy: (aliasBy: string) => void;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => SLOQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: '',\n  lookbackPeriod: '',\n});\n\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData,\n  aliasBy,\n  onChangeAliasBy,\n}: React.PropsWithChildren<Props>) {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <span data-testid={selectors.components.queryEditor.sloQueryEditor.container.input}>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <Service\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <SLO\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <Selector\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        {query.selectorName === SLO_BURN_RATE_SELECTOR_NAME && (\n          <LookbackPeriodSelect\n            refId={refId}\n            onChange={(lookbackPeriod) => onChange({ ...query, lookbackPeriod: lookbackPeriod })}\n            current={query.lookbackPeriod}\n            templateVariableOptions={variableOptionGroup.options}\n          />\n        )}\n\n        <EditorFieldGroup>\n          <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n            <PeriodSelect\n              inputId={`${refId}-alignment-period`}\n              templateVariableOptions={variableOptionGroup.options}\n              current={query.alignmentPeriod}\n              onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n              aligmentPeriods={ALIGNMENT_PERIODS}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n\n        <AliasBy refId={refId} value={aliasBy} onChange={onChangeAliasBy} />\n      </EditorRow>\n    </span>\n  );\n}\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, TimeRange } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { getSelectStyles, Select, AsyncSelect, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { getAlignmentPickerData, getMetricType, setMetricType } from '../functions';\nimport { PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from '../types/query';\nimport { CustomMetaData, MetricDescriptor } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { Alignment } from './Alignment';\nimport { GroupBy } from './GroupBy';\nimport { LabelFilter } from './LabelFilter';\nimport { defaultTimeSeriesList } from './MetricQueryEditor';\nimport { Preprocessor } from './Preprocessor';\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  onChange: (query: TimeSeriesList) => void;\n  datasource: CloudMonitoringDatasource;\n  query: TimeSeriesList;\n  variableOptionGroup: SelectableValue<string>;\n  aliasBy?: string;\n  onChangeAliasBy: (aliasBy: string) => void;\n  range: TimeRange;\n}\n\nexport function Editor({\n  refId,\n  onChange,\n  datasource,\n  query,\n  variableOptionGroup,\n  customMetaData,\n  aliasBy,\n  onChangeAliasBy,\n  range,\n}: React.PropsWithChildren<Props>) {\n  const [labels, setLabels] = useState<{ [k: string]: string[] }>({});\n  const [metricDescriptors, setMetricDescriptors] = useState<MetricDescriptor[]>([]);\n  const [metricDescriptor, setMetricDescriptor] = useState<MetricDescriptor>();\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const [service, setService] = useState<string>('');\n  const [timeRange, setTimeRange] = useState<TimeRange>({ ...range });\n\n  const useTime = (time: TimeRange) => {\n    if (\n      timeRange !== null &&\n      (timeRange.raw.from.toString() !== time.raw.from.toString() ||\n        timeRange.raw.to.toString() !== time.raw.to.toString())\n    ) {\n      setTimeRange({ ...time });\n    }\n  };\n\n  useTime(range);\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const { projectName, groupBys, crossSeriesReducer } = query;\n  const metricType = getMetricType(query);\n  const { templateSrv } = datasource;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource\n        .getLabels(metricType, refId, projectName, { groupBys, crossSeriesReducer }, timeRange)\n        .then((labels) => setLabels(labels));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer, timeRange]);\n\n  useEffect(() => {\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        reportInteraction('cloud-monitoring-metric-descriptors-loaded', {\n          count: metricDescriptors.length,\n        });\n        const services = getServicesList(metricDescriptors);\n        setMetricDescriptors(metricDescriptors);\n        setServices(services);\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, projectName, customStyle, selectStyles.optionDescription]);\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n\n    const metrics = getMetricsList(metricDescriptors);\n    const service = metrics.length > 0 ? metrics[0].service : '';\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n    setMetricDescriptor(metricDescriptor);\n    setMetrics(metrics);\n    setService(service);\n  }, [metricDescriptors, getSelectedMetricDescriptor, metricType, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: SelectableValue<string>) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n    // On service change reset all query values except the project name\n    query.filters = [];\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0]);\n      setService(service!);\n      setMetrics(metrics);\n    } else {\n      setService(service!);\n      setMetrics(metrics);\n    }\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  const filterMetrics = async (filter: string) => {\n    const metrics = await datasource.filterMetricsByType(projectName, service);\n    const filtered = metrics\n      .filter((m) => m.type.includes(filter.toLowerCase()))\n      .map((m) => ({\n        value: m.type,\n        label: m.displayName,\n        component: function optionComponent() {\n          return (\n            <div>\n              <div className={customStyle}>{m.type}</div>\n              <div className={selectStyles.optionDescription}>{m.description}</div>\n            </div>\n          );\n        },\n      }));\n    return [\n      {\n        label: 'Template Variables',\n        options: variableOptionGroup.options,\n      },\n      ...filtered,\n    ];\n  };\n\n  const debounceFilter = debounce(filterMetrics, 400);\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>) => {\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, value!);\n    setMetricDescriptor(metricDescriptor);\n    const { metricKind, valueType } = metricDescriptor;\n    const preprocessor =\n      metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION\n        ? PreprocessorType.None\n        : PreprocessorType.Rate;\n    const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, query.perSeriesAligner, preprocessor);\n\n    // On metric name change reset query to defaults except project name and filters\n    Object.assign(query, {\n      ...defaultTimeSeriesList(datasource),\n      projectName: query.projectName,\n      filters: query.filters,\n    });\n    onChange({\n      ...setMetricType(\n        {\n          ...query,\n          perSeriesAligner,\n        },\n        value!\n      ),\n      preprocessor,\n    });\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.visualMetricsQueryEditor.container.input}>\n      <EditorRow>\n        <EditorFieldGroup>\n          <Project\n            refId={refId}\n            templateVariableOptions={variableOptionGroup.options}\n            projectName={projectName}\n            datasource={datasource}\n            onChange={(projectName) => {\n              onChange({ ...query, projectName });\n            }}\n          />\n\n          <EditorField label=\"Service\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onServiceChange}\n              isLoading={services.length === 0}\n              value={[...services, ...variableOptionGroup.options].find((s) => s.value === service)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: variableOptionGroup.options,\n                },\n                ...services,\n              ]}\n              placeholder=\"Select Services\"\n              inputId={`${refId}-service`}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width=\"auto\" htmlFor={`${refId}-select-metric`}>\n            <span title={service === '' ? 'Select a service first' : 'Type to search metrics'}>\n              <AsyncSelect\n                width=\"auto\"\n                onChange={onMetricTypeChange}\n                value={[...metrics, ...variableOptionGroup.options].find((s) => s.value === metricType)}\n                loadOptions={debounceFilter}\n                defaultOptions={[\n                  {\n                    label: 'Template Variables',\n                    options: variableOptionGroup.options,\n                  },\n                  ...metrics.slice(0, 100),\n                ]}\n                placeholder=\"Select Metric\"\n                inputId={`${refId}-select-metric`}\n                disabled={service === ''}\n              />\n            </span>\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <>\n        <LabelFilter\n          labels={labels}\n          filters={query.filters!}\n          onChange={(filters: string[]) => onChange({ ...query, filters })}\n          variableOptionGroup={variableOptionGroup}\n        />\n        <EditorRow>\n          <Preprocessor metricDescriptor={metricDescriptor} query={query} onChange={onChange} />\n          <GroupBy\n            refId={refId}\n            labels={Object.keys(labels)}\n            query={query}\n            onChange={onChange}\n            variableOptionGroup={variableOptionGroup}\n            metricDescriptor={metricDescriptor}\n          />\n          <Alignment\n            refId={refId}\n            datasource={datasource}\n            templateVariableOptions={variableOptionGroup.options}\n            query={query}\n            customMetaData={customMetaData}\n            onChange={onChange}\n            metricDescriptor={metricDescriptor}\n            preprocessor={query.preprocessor}\n          />\n          <AliasBy refId={refId} value={aliasBy} onChange={onChangeAliasBy} />\n        </EditorRow>\n      </>\n    </span>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;\n\nexport const VisualMetricQueryEditor = React.memo(Editor);\n","import React from 'react';\n\nexport const AnnotationsHelp = () => {\n  return (\n    <div className=\"gf-form grafana-info-box alert-info\">\n      <div>\n        <h5>Annotation Query Format</h5>\n        <p>\n          An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is\n          important to limit the number of rows returned.{' '}\n        </p>\n        <p>\n          The Title and Text fields support templating and can use data returned from the query. For example, the Title\n          field could have the following text:\n        </p>\n        <code>\n          {`${'{{metric.type}}'}`} has value: {`${'{{metric.value}}'}`}\n        </code>\n        <p>\n          Example Result: <code>monitoring.googleapis.com/uptime_check/http_status has this value: 502</code>\n        </p>\n        <span>Patterns:</span>\n        <p>\n          <code>{`${'{{metric.value}}'}`}</code> = value of the metric/point\n        </p>\n        <p>\n          <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n        </p>\n        <p>\n          <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n        </p>\n        <p>\n          <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Field, Select } from '@grafana/ui';\n\ninterface VariableQueryFieldProps {\n  onChange: (value: string) => void;\n  options: SelectableValue[];\n  value: string;\n  label: string;\n  allowCustomValue?: boolean;\n}\n\nexport const VariableQueryField = ({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n}: VariableQueryFieldProps) => {\n  return (\n    <Field label={label}>\n      <Select\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n      />\n    </Field>\n  );\n};\n","import { QueryType, MetricKind, ValueTypes } from './types/query';\n\n// not super excited about using uneven numbers, but this makes it align perfectly with rows that has two fields\nexport const INPUT_WIDTH = 71;\nexport const LABEL_WIDTH = 19;\nexport const INNER_LABEL_WIDTH = 14;\nexport const SELECT_WIDTH = 28;\n\nexport const ALIGNMENTS = [\n  {\n    text: 'none',\n    value: 'ALIGN_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'delta',\n    value: 'ALIGN_DELTA',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'rate',\n    value: 'ALIGN_RATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'interpolate',\n    value: 'ALIGN_INTERPOLATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'next older',\n    value: 'ALIGN_NEXT_OLDER',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'min',\n    value: 'ALIGN_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'max',\n    value: 'ALIGN_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'mean',\n    value: 'ALIGN_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count',\n    value: 'ALIGN_COUNT',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'sum',\n    value: 'ALIGN_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'stddev',\n    value: 'ALIGN_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count true',\n    value: 'ALIGN_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'count false',\n    value: 'ALIGN_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'fraction true',\n    value: 'ALIGN_FRACTION_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'percentile 99',\n    value: 'ALIGN_PERCENTILE_99',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 95',\n    value: 'ALIGN_PERCENTILE_95',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 50',\n    value: 'ALIGN_PERCENTILE_50',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 05',\n    value: 'ALIGN_PERCENTILE_05',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percent change',\n    value: 'ALIGN_PERCENT_CHANGE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n];\n\nexport const AGGREGATIONS = [\n  {\n    text: 'none',\n    value: 'REDUCE_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'mean',\n    value: 'REDUCE_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'min',\n    value: 'REDUCE_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'max',\n    value: 'REDUCE_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'sum',\n    value: 'REDUCE_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'std. dev.',\n    value: 'REDUCE_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'count',\n    value: 'REDUCE_COUNT',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'count true',\n    value: 'REDUCE_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count false',\n    value: 'REDUCE_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '99th percentile',\n    value: 'REDUCE_PERCENTILE_99',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '95th percentile',\n    value: 'REDUCE_PERCENTILE_95',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '50th percentile',\n    value: 'REDUCE_PERCENTILE_50',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '5th percentile',\n    value: 'REDUCE_PERCENTILE_05',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n];\n\nexport type periodOption = {\n  text: string;\n  value: string;\n  hidden?: boolean;\n};\n\nexport const ALIGNMENT_PERIODS: periodOption[] = [\n  { text: 'grafana auto', value: 'grafana-auto' },\n  { text: 'stackdriver auto', value: 'stackdriver-auto', hidden: true },\n  { text: 'cloud monitoring auto', value: 'cloud-monitoring-auto' },\n  { text: '1m', value: '+60s' },\n  { text: '2m', value: '+120s' },\n  { text: '5m', value: '+300s' },\n  { text: '10m', value: '+600s' },\n  { text: '30m', value: '+1800s' },\n  { text: '1h', value: '+3600s' },\n  { text: '3h', value: '+7200s' },\n  { text: '6h', value: '+21600s' },\n  { text: '1d', value: '+86400s' },\n  { text: '3d', value: '+259200s' },\n  { text: '1w', value: '+604800s' },\n];\n\nexport const GRAPH_PERIODS: periodOption[] = [\n  { text: 'auto', value: 'auto' },\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '1d', value: '1d' },\n  { text: '3d', value: '3d' },\n  { text: '1w', value: '1w' },\n];\n\n// Usable units: ns, us, ms, s, m, h\n// ref. https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/timeseries-selectors#tss-names-args\nexport const LOOKBACK_PERIODS: periodOption[] = [\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '24h', value: '24h' },\n  { text: '72h', value: '72h' },\n];\n\nexport const SYSTEM_LABELS = [\n  'metadata.system_labels.cloud_account',\n  'metadata.system_labels.name',\n  'metadata.system_labels.region',\n  'metadata.system_labels.state',\n  'metadata.system_labels.instance_group',\n  'metadata.system_labels.node_name',\n  'metadata.system_labels.service_name',\n  'metadata.system_labels.top_level_controller_type',\n  'metadata.system_labels.top_level_controller_name',\n  'metadata.system_labels.container_image',\n];\n\nexport const SLO_BURN_RATE_SELECTOR_NAME = 'select_slo_burn_rate';\n\nexport const SELECTORS = [\n  { label: 'SLI Value', value: 'select_slo_health' },\n  { label: 'SLO Compliance', value: 'select_slo_compliance' },\n  { label: 'SLO Error Budget Remaining', value: 'select_slo_budget_fraction' },\n  { label: 'SLO Burn Rate', value: SLO_BURN_RATE_SELECTOR_NAME },\n];\n\nexport const QUERY_TYPES = [\n  { label: 'Builder', value: QueryType.TIME_SERIES_LIST },\n  { label: 'MQL', value: QueryType.TIME_SERIES_QUERY },\n  { label: 'Service Level Objectives (SLO)', value: QueryType.SLO },\n  { label: 'PromQL', value: QueryType.PROMQL },\n];\n","import { E2ESelectors } from '@grafana/e2e-selectors';\n\nexport const components = {\n  queryEditor: {\n    container: 'data-testid cloud-monitoring-query-editor',\n    header: {\n      select: 'data-testid cloud-monitoring-header',\n    },\n    visualMetricsQueryEditor: {\n      container: { input: 'data-testid cloud-monitoring-visual-metrics-query-editor' },\n    },\n    mqlMetricsQueryEditor: {\n      container: { input: 'data-testid cloud-monitoring-mql-query-editor' },\n    },\n    sloQueryEditor: {\n      container: {\n        input: 'data-testid cloud-monitoring-slo-query-editor',\n      },\n    },\n    promQlQueryEditor: {\n      container: {\n        input: 'data-testid cloud-monitoring-prom-ql-query-editor',\n      },\n    },\n  },\n};\n\nexport const selectors: { components: E2ESelectors<typeof components> } = {\n  components: components,\n};\n","import { chunk, initial, startCase, uniqBy } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { AGGREGATIONS, ALIGNMENTS, SYSTEM_LABELS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from './types/query';\nimport { CustomMetaData, MetricDescriptor } from './types/types';\n\nexport const extractServicesFromMetricDescriptors = (metricDescriptors: MetricDescriptor[]) =>\n  uniqBy(metricDescriptors, 'service');\n\nexport const getMetricTypesByService = (metricDescriptors: MetricDescriptor[], service: string) =>\n  metricDescriptors.filter((m: MetricDescriptor) => m.service === service);\n\nexport const getMetricTypes = (\n  metricDescriptors: MetricDescriptor[],\n  metricType: string,\n  interpolatedMetricType: string,\n  selectedService: string\n) => {\n  const metricTypes = getMetricTypesByService(metricDescriptors, selectedService).map((m) => ({\n    value: m.type,\n    name: m.displayName,\n  }));\n  const metricTypeExistInArray = metricTypes.some(\n    (m: { value: string; name: string }) => m.value === interpolatedMetricType\n  );\n  const metricTypeByService = metricTypes.length ? metricTypes[0].value : '';\n  const selectedMetricType = metricTypeExistInArray ? metricType : metricTypeByService;\n  return {\n    metricTypes,\n    selectedMetricType,\n  };\n};\n\nexport const getAlignmentOptionsByMetric = (\n  metricValueType?: string,\n  metricKind?: string,\n  preprocessor?: PreprocessorType\n) => {\n  if (preprocessor && preprocessor === PreprocessorType.Rate) {\n    metricKind = MetricKind.GAUGE;\n  }\n\n  return !metricValueType\n    ? []\n    : ALIGNMENTS.filter((i) => {\n        return (\n          i.valueTypes.indexOf(metricValueType as ValueTypes) !== -1 &&\n          i.metricKinds.indexOf(metricKind as MetricKind) !== -1\n        );\n      });\n};\n\nexport const getAggregationOptionsByMetric = (valueType: ValueTypes, metricKind: MetricKind) => {\n  return !metricKind\n    ? []\n    : AGGREGATIONS.filter((i) => {\n        return i.valueTypes.indexOf(valueType) !== -1 && i.metricKinds.indexOf(metricKind) !== -1;\n      });\n};\n\nexport const getLabelKeys = async (\n  datasource: CloudMonitoringDatasource,\n  selectedMetricType: string,\n  projectName: string\n) => {\n  const refId = 'handleLabelKeysQuery';\n  const labels = await datasource.getLabels(selectedMetricType, refId, projectName);\n  return [...Object.keys(labels), ...SYSTEM_LABELS];\n};\n\nexport const getAlignmentPickerData = (\n  valueType: string | undefined = ValueTypes.DOUBLE,\n  metricKind: string | undefined = MetricKind.GAUGE,\n  perSeriesAligner: string | undefined = AlignmentTypes.ALIGN_MEAN,\n  preprocessor?: PreprocessorType\n) => {\n  const templateSrv: TemplateSrv = getTemplateSrv();\n  const alignOptions = getAlignmentOptionsByMetric(valueType, metricKind, preprocessor).map((option) => ({\n    ...option,\n    label: option.text,\n  }));\n  if (!alignOptions.some((o: { value: string }) => o.value === templateSrv.replace(perSeriesAligner))) {\n    perSeriesAligner = alignOptions.length > 0 ? alignOptions[0].value : AlignmentTypes.ALIGN_MEAN;\n  }\n  return { alignOptions, perSeriesAligner };\n};\n\nexport const labelsToGroupedOptions = (groupBys: string[]) => {\n  const groups = groupBys.reduce<\n    Record<\n      string,\n      Array<{\n        value: string;\n        label: string;\n      }>\n    >\n  >((acc, curr) => {\n    const arr = curr.split('.').map(startCase);\n    const group = (arr.length === 2 ? arr : initial(arr)).join(' ');\n    const option = {\n      value: curr,\n      label: curr,\n    };\n    if (acc[group]) {\n      acc[group] = [...acc[group], option];\n    } else {\n      acc[group] = [option];\n    }\n    return acc;\n  }, {});\n  return Object.entries(groups).map(([label, options]) => ({ label, options, expanded: true }), []);\n};\n\nexport const stringArrayToFilters = (filterArray: string[]) =>\n  chunk(filterArray, 4).map(([key, operator, value, condition = 'AND']) => ({\n    key,\n    operator,\n    value,\n    condition,\n  }));\n\nexport const alignmentPeriodLabel = (customMetaData: CustomMetaData, datasource: CloudMonitoringDatasource) => {\n  const { perSeriesAligner, alignmentPeriod } = customMetaData;\n  if (!alignmentPeriod || !perSeriesAligner) {\n    return '';\n  }\n\n  const alignment = ALIGNMENTS.find((ap) => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n  const seconds = parseInt(alignmentPeriod, 10);\n  const hms = rangeUtil.secondsToHms(seconds);\n  return `${hms} interval (${alignment?.text ?? ''})`;\n};\n\nexport const getMetricType = (query?: TimeSeriesList) => {\n  const metricTypeKey = query?.filters?.findIndex((f) => f === 'metric.type')!;\n  // filters are in the format [key, operator, value] so we need to add 2 to get the value\n  const metricType = query?.filters?.[metricTypeKey + 2];\n  return metricType || '';\n};\n\nexport const setMetricType = (query: TimeSeriesList, metricType: string) => {\n  if (!query.filters) {\n    query.filters = ['metric.type', '=', metricType];\n    return query;\n  }\n  const metricTypeKey = query?.filters?.findIndex((f) => f === 'metric.type')!;\n  if (metricTypeKey === -1) {\n    query.filters.push('metric.type', '=', metricType);\n  } else {\n    // filters are in the format [key, operator, value] so we need to add 2 to get the value\n    query.filters![metricTypeKey + 2] = metricType;\n  }\n  return query;\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface CloudMonitoringQuery extends common.DataQuery {\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.\n   */\n  aliasBy?: string;\n  /**\n   * Time interval in milliseconds.\n   */\n  intervalMs?: number;\n  /**\n   * PromQL sub-query properties.\n   */\n  promQLQuery?: PromQLQuery;\n  /**\n   * SLO sub-query properties.\n   */\n  sloQuery?: SLOQuery;\n  /**\n   * GCM query type.\n   * queryType: #QueryType\n   * Time Series List sub-query properties.\n   */\n  timeSeriesList?: TimeSeriesList;\n  /**\n   * Time Series sub-query properties.\n   */\n  timeSeriesQuery?: TimeSeriesQuery;\n}\n\n/**\n * Defines the supported queryTypes.\n */\nexport enum QueryType {\n  ANNOTATION = 'annotation',\n  PROMQL = 'promQL',\n  SLO = 'slo',\n  TIME_SERIES_LIST = 'timeSeriesList',\n  TIME_SERIES_QUERY = 'timeSeriesQuery',\n}\n\n/**\n * Time Series List sub-query properties.\n */\nexport interface TimeSeriesList {\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  crossSeriesReducer: string;\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters?: Array<string>;\n  /**\n   * Array of labels to group data by.\n   */\n  groupBys?: Array<string>;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * Preprocessor is not part of the API, but is used to store the preprocessor and not affect the UI for the rest of parameters\n   */\n  preprocessor?: PreprocessorType;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * Only present if a preprocessor is selected. Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  secondaryAlignmentPeriod?: string;\n  /**\n   * Only present if a preprocessor is selected. Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  secondaryCrossSeriesReducer?: string;\n  /**\n   * Only present if a preprocessor is selected. Array of labels to group data by.\n   */\n  secondaryGroupBys?: Array<string>;\n  /**\n   * Only present if a preprocessor is selected. Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  secondaryPerSeriesAligner?: string;\n  /**\n   * Annotation text.\n   */\n  text?: string;\n  /**\n   * Annotation title.\n   */\n  title?: string;\n  /**\n   * Data view, defaults to FULL.\n   */\n  view?: string;\n}\n\nexport const defaultTimeSeriesList: Partial<TimeSeriesList> = {\n  filters: [],\n  groupBys: [],\n  secondaryGroupBys: [],\n};\n\n/**\n * Types of pre-processor available. Defined by the metric.\n */\nexport enum PreprocessorType {\n  Delta = 'delta',\n  None = 'none',\n  Rate = 'rate',\n}\n\n/**\n * Time Series sub-query properties.\n */\nexport interface TimeSeriesQuery {\n  /**\n   * To disable the graphPeriod, it should explictly be set to 'disabled'.\n   */\n  graphPeriod?: ('disabled' | string);\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * MQL query to be executed.\n   */\n  query: string;\n}\n\n/**\n * SLO sub-query properties.\n */\nexport interface SLOQuery {\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * SLO goal value.\n   */\n  goal?: number;\n  /**\n   * Specific lookback period for the SLO.\n   */\n  lookbackPeriod?: string;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * SLO selector.\n   */\n  selectorName: string;\n  /**\n   * ID for the service the SLO is in.\n   */\n  serviceId: string;\n  /**\n   * Name for the service the SLO is in.\n   */\n  serviceName: string;\n  /**\n   * ID for the SLO.\n   */\n  sloId: string;\n  /**\n   * Name of the SLO.\n   */\n  sloName: string;\n}\n\n/**\n * PromQL sub-query properties.\n */\nexport interface PromQLQuery {\n  /**\n   * PromQL expression/query to be executed.\n   */\n  expr: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * PromQL min step\n   */\n  step: string;\n}\n\n/**\n * @deprecated This type is for migration purposes only. Replaced by TimeSeriesList Metric sub-query properties.\n */\nexport interface MetricQuery {\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.\n   */\n  aliasBy?: string;\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  crossSeriesReducer: string;\n  editorMode: string;\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters?: Array<string>;\n  /**\n   * To disable the graphPeriod, it should explictly be set to 'disabled'.\n   */\n  graphPeriod?: ('disabled' | string);\n  /**\n   * Array of labels to group data by.\n   */\n  groupBys?: Array<string>;\n  metricKind?: MetricKind;\n  metricType: string;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * Preprocessor is not part of the API, but is used to store the preprocessor and not affect the UI for the rest of parameters\n   */\n  preprocessor?: PreprocessorType;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * MQL query to be executed.\n   */\n  query: string;\n  valueType?: string;\n  view?: string;\n}\n\nexport const defaultMetricQuery: Partial<MetricQuery> = {\n  filters: [],\n  groupBys: [],\n};\n\nexport enum MetricKind {\n  CUMULATIVE = 'CUMULATIVE',\n  DELTA = 'DELTA',\n  GAUGE = 'GAUGE',\n  METRIC_KIND_UNSPECIFIED = 'METRIC_KIND_UNSPECIFIED',\n}\n\nexport enum ValueTypes {\n  BOOL = 'BOOL',\n  DISTRIBUTION = 'DISTRIBUTION',\n  DOUBLE = 'DOUBLE',\n  INT64 = 'INT64',\n  MONEY = 'MONEY',\n  STRING = 'STRING',\n  VALUE_TYPE_UNSPECIFIED = 'VALUE_TYPE_UNSPECIFIED',\n}\n\nexport enum AlignmentTypes {\n  ALIGN_COUNT = 'ALIGN_COUNT',\n  ALIGN_COUNT_FALSE = 'ALIGN_COUNT_FALSE',\n  ALIGN_COUNT_TRUE = 'ALIGN_COUNT_TRUE',\n  ALIGN_DELTA = 'ALIGN_DELTA',\n  ALIGN_FRACTION_TRUE = 'ALIGN_FRACTION_TRUE',\n  ALIGN_INTERPOLATE = 'ALIGN_INTERPOLATE',\n  ALIGN_MAX = 'ALIGN_MAX',\n  ALIGN_MEAN = 'ALIGN_MEAN',\n  ALIGN_MIN = 'ALIGN_MIN',\n  ALIGN_NEXT_OLDER = 'ALIGN_NEXT_OLDER',\n  ALIGN_NONE = 'ALIGN_NONE',\n  ALIGN_PERCENTILE_05 = 'ALIGN_PERCENTILE_05',\n  ALIGN_PERCENTILE_50 = 'ALIGN_PERCENTILE_50',\n  ALIGN_PERCENTILE_95 = 'ALIGN_PERCENTILE_95',\n  ALIGN_PERCENTILE_99 = 'ALIGN_PERCENTILE_99',\n  ALIGN_PERCENT_CHANGE = 'ALIGN_PERCENT_CHANGE',\n  ALIGN_RATE = 'ALIGN_RATE',\n  ALIGN_STDDEV = 'ALIGN_STDDEV',\n  ALIGN_SUM = 'ALIGN_SUM',\n}\n\n/**\n * @deprecated Use TimeSeriesList instead. Legacy annotation query properties for migration purposes.\n */\nexport interface LegacyCloudMonitoringAnnotationQuery {\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters: Array<string>;\n  metricKind: MetricKind;\n  metricType: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * Query refId.\n   */\n  refId: string;\n  /**\n   * Annotation text.\n   */\n  text: string;\n  /**\n   * Annotation title.\n   */\n  title: string;\n  valueType: string;\n}\n\nexport const defaultLegacyCloudMonitoringAnnotationQuery: Partial<LegacyCloudMonitoringAnnotationQuery> = {\n  filters: [],\n};\n\n/**\n * Query filter representation.\n */\nexport interface Filter {\n  /**\n   * Filter condition.\n   */\n  condition?: string;\n  /**\n   * Filter key.\n   */\n  key: string;\n  /**\n   * Filter operator.\n   */\n  operator: string;\n  /**\n   * Filter value.\n   */\n  value: string;\n}\n\nexport enum MetricFindQueryTypes {\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n  DefaultProject = 'defaultProject',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  MetricTypes = 'metricTypes',\n  Projects = 'projects',\n  ResourceTypes = 'resourceTypes',\n  SLO = 'slo',\n  SLOServices = 'sloServices',\n  Selectors = 'selectors',\n  Services = 'services',\n}\n\nexport interface GoogleCloudMonitoring {}\n"],"names":["EditorHeader","children","styles","getStyles","theme","FlexItem","grow","shrink","__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","__objRest","source","exclude","target","InlineSelect","_a","_b","labelProp","props","getSelectStyles","id","components","SelectContainer","ValueContainer","className","Aggregation","aggOptions","useAggregationOptionsByMetric","selected","useSelectedFromOptions","metricDescriptor","valueType","metricKind","s","AliasBy","refId","onChange","alias","setAlias","propagateOnChange","onInputChange","e","Alignment","templateVariableOptions","query","customMetaData","datasource","preprocessor","alignmentLabel","q","period","AlignmentFunction","inputId","psa","perSeriesAligner","alignOptions","GroupBy","groupBys","variableOptionGroup","options","o","crossSeriesReducer","DEFAULT_OPERATOR","DEFAULT_CONDITION","filtersToStringArray","filters","operator","condition","operators","protectedFilterKeys","LabelFilter","labels","filterArray","_onChange","rawFilters","protectedFilters","getOptions","op","opp","valueOptions","items","renderItem","item","onChangeItem","onDeleteItem","v","MQLQueryEditor","onRunQuery","onKeyDown","event","GraphPeriod","graphPeriod","EditorRow","EditorField","Switch","defaultTimeSeriesList","dataSource","defaultTimeSeriesQuery","Editor","onQueryChange","range","onChangeTimeSeriesList","timeSeriesList","filtersComplete","filter","onChangeTimeSeriesQuery","timeSeriesQuery","EditorRows","VisualMetricQueryEditor","aliasBy","Stack","Project","projectName","MetricQueryEditor","PeriodSelect","current","disabled","aligmentPeriods","ap","visibleOptions","NONE_OPTION","Preprocessor","useOptions","projects","setProjects","projectsWithTemplateVariables","defaultQuery","PromQLQueryEditor","onReturnKeyDown","selectors","TextArea","Input","QueryHeader","queryType","QueryEditor","modalIsOpen","setModalIsOpen","migrated","currentQuery","setCurrentQuery","queryHasBeenEdited","setQueryHasBeenEdited","sloQuery","onSLOQueryChange","promQLQuery","onPromQLQueryChange","onMetricQueryChange","checkForModalDisplay","ConfirmModal","LookbackPeriodSelect","lp","Select","SLO","slos","setSLOs","serviceId","sloIds","sloId","sloName","slo","Selector","selectorName","Service","services","setServices","serviceName","SLOQueryEditor","onChangeAliasBy","lookbackPeriod","EditorFieldGroup","setLabels","metricDescriptors","setMetricDescriptors","setMetricDescriptor","metrics","setMetrics","service","setService","timeRange","setTimeRange","time","selectStyles","customStyle","metricType","templateSrv","getSelectedMetricDescriptor","md","getServicesList","selectedMetricDescriptor","m","onServiceChange","onMetricTypeChange","filterMetrics","filtered","debounceFilter","AnnotationsHelp","VariableQueryField","label","allowCustomValue","Field","INPUT_WIDTH","LABEL_WIDTH","INNER_LABEL_WIDTH","SELECT_WIDTH","ALIGNMENTS","AGGREGATIONS","ALIGNMENT_PERIODS","GRAPH_PERIODS","LOOKBACK_PERIODS","SYSTEM_LABELS","SLO_BURN_RATE_SELECTOR_NAME","SELECTORS","QUERY_TYPES","extractServicesFromMetricDescriptors","getMetricTypesByService","getMetricTypes","interpolatedMetricType","selectedService","metricTypes","metricTypeExistInArray","metricTypeByService","getAlignmentOptionsByMetric","metricValueType","i","getAggregationOptionsByMetric","getLabelKeys","selectedMetricType","getAlignmentPickerData","option","labelsToGroupedOptions","groups","acc","curr","arr","group","stringArrayToFilters","alignmentPeriodLabel","alignmentPeriod","alignment","seconds","getMetricType","metricTypeKey","f","setMetricType","QueryType","PreprocessorType","defaultMetricQuery","MetricKind","ValueTypes","AlignmentTypes","defaultLegacyCloudMonitoringAnnotationQuery","MetricFindQueryTypes"],"sourceRoot":""}