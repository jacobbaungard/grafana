{"version":3,"file":"AdminAuthentication.b7044adf53b669e61a87.js","mappings":"gSAQA,MAAMA,EAAmD,IAAM,CAC7D,MAAMC,KAAS,MAAWC,CAAS,EACnC,OACE,gBAAC,OAAI,UAAWD,EAAO,WACrB,gBAACE,EAAA,EAAK,CAAC,IAAK,EAAG,WAAY,UACzB,gBAACC,EAAA,EAAI,CAAC,KAAM,MAAO,EACnB,gBAACC,EAAA,EAAI,KAAC,wBAAsB,CAC9B,EACA,gBAACA,EAAA,EAAI,CAAC,QAAS,YAAa,MAAO,aAAa,iEAEhD,EACA,gBAACC,EAAA,EAAQ,CAAC,KAAM,yDAA0D,SAAQ,IAAC,+DAEnF,CACF,CAEJ,EAEMJ,EAAaK,IACV,CACL,aAAW,OAAI,CACb,QAAS,OACT,cAAe,SACf,IAAKA,EAAM,QAAQ,CAAC,EACpB,gBAAiBA,EAAM,OAAO,WAAW,UACzC,aAAcA,EAAM,MAAM,OAAO,QACjC,QAASA,EAAM,QAAQ,CAAC,EACxB,MAAO,cACP,OAAQA,EAAM,QAAQ,EAAG,MAAM,CACjC,CAAC,CACH,GAGF,EAAeP,E,0DCzBR,SAASQ,GAAa,CAAE,WAAAC,EAAY,QAAAC,EAAS,WAAAC,EAAY,SAAAC,EAAU,QAAAC,CAAQ,EAAU,CAE1F,MAAMC,KAAM,MAAe,CAAE,WAAAH,EAAY,GAAIF,CAAW,CAAC,EACnD,CAACM,EAAUC,CAAW,EAAI,KAAMP,CAAU,GAAK,CAAC,OAAQA,EAAW,YAAY,CAAC,EACtF,OACE,gBAACQ,EAAA,EAAI,CAAC,KAAMH,EAAK,QAAAD,CAAA,EACf,gBAACI,EAAA,EAAK,QAAL,KAAcD,CAAY,EAC3B,gBAACC,EAAA,EAAK,KAAL,KAAWL,CAAS,KACpB,MAAWG,CAAQ,GAClB,gBAACE,EAAA,EAAK,OAAL,KACC,gBAACb,EAAA,EAAI,CAAC,KAAMW,EAAU,KAAM,OAAQ,CACtC,EAEF,gBAACE,EAAA,EAAK,QAAL,KACC,gBAACC,EAAA,EAAK,CAAC,KAAMR,EAAU,UAAY,cAAe,MAAOA,EAAU,QAAU,OAAQ,CACvF,CACF,CAEJ,C,4BChBA,SAASS,GAAgBC,EAAmB,CAC1C,KAAM,CAAE,UAAAC,EAAW,iBAAAC,EAAkB,UAAAC,CAAU,EAAIH,EAAM,WACzD,MAAO,CACL,UAAAC,EACA,iBAAAC,EACA,UAAAC,CACF,CACF,CAEA,MAAMC,GAAqB,CACzB,aAAY,KACd,EAEMC,MAAY,WAAQN,GAAiBK,EAAkB,EAEhDE,GAA4B,CAAC,CACxC,iBAAAJ,EACA,UAAAD,EACA,aAAAM,EACA,UAAAJ,CACF,IAA0B,IACxB,aAAU,IAAM,CACdI,EAAa,CACf,EAAG,CAACA,CAAY,CAAC,EAGjB,MAAMC,KADgB,+BAA2B,EACR,OAAQC,GAAM,CAACP,EAAiBO,EAAE,EAAE,GAAG,IAAI,EAC9EC,EAAuBC,GAAyB,IACpD,MAAkB,qCAAsC,CAAE,SAAUA,CAAa,CAAC,CACpF,EAEMC,EAAeJ,EAAmB,OACpC,CACE,GAAGA,EAAmB,IAAKC,IAAO,CAChC,SAAUA,EAAE,GACZ,SAAU,CAAE,GAAGP,EAAiBO,EAAE,EAAE,EAAG,WAAYA,EAAE,WAAY,KAAMA,EAAE,IAAK,CAChF,EAAE,EACF,GAAGN,CACL,EACAA,EACJ,OACE,gBAACU,EAAA,GACC,MAAM,iBACN,SACE,gCAAE,+EAC6E,IAC7E,gBAAC3B,EAAA,GACC,SAAU,GACV,KAAK,mGACN,eAED,EAAW,GAEb,GAGF,gBAAC2B,EAAA,EAAK,SAAL,CAAc,UAAAZ,CAAA,EACXW,EAAa,OAGb,gBAACE,EAAA,EAAI,CAAC,IAAK,EAAG,eAAgB,IAC3BF,EAEE,OAAO,CAAC,CAAE,SAAAG,CAAS,IAAM,CAAC,CAAC,aAAa,EAAE,SAASA,CAAQ,CAAC,EAC5D,IAAI,CAAC,CAAE,SAAAA,EAAU,SAAAC,CAAS,IACzB,gBAAC5B,GAAA,CACC,IAAK2B,EACL,SAAUC,EAAS,MAAQ,QAC3B,WAAYD,EACZ,QAASC,EAAS,QAClB,QAAS,IAAMN,EAAoBK,CAAQ,EAE3C,WAAYC,EAAS,WACvB,CACD,CACL,EAjBA,gBAAC,EAAgB,IAAC,CAmBtB,CACF,CAEJ,EAEA,GAAeX,GAAUC,EAAyB,C,iSC/E3C,MAAMW,GAAa,CAAC,CAAE,gBAAAC,EAAiB,UAAAC,EAAW,iBAAAC,CAAiB,IAAa,CACrF,KAAM,CAACC,EAAaC,CAAc,KAAI,YAAS,EAAK,EAC9C,CAACC,EAAiBC,CAAkB,KAAI,YAAkC,IAAI,EAC9E,CAACC,EAAkBC,CAAmB,KAAI,YAAS,EAAK,KAE9D,aAAU,IAAM,CACd,MAAMC,EAAkBC,GAAyB,CAC3CV,IACFU,EAAE,eAAe,EACjBA,EAAE,YAAc,GAEpB,EACA,cAAO,iBAAiB,eAAgBD,CAAc,EAC/C,IAAM,CACX,OAAO,oBAAoB,eAAgBA,CAAc,CAC3D,CACF,EAAG,CAACT,CAAe,CAAC,EAGpB,MAAMW,EAAkBC,GAA+B,CAErD,MAAMC,EAAc,OAAO,SAAS,SAC9BC,EAAWF,EAAS,SAC1B,GAAIC,IAAgBC,EAClB,MAAO,GAGT,MAAMC,EAAsBb,IAAmBU,CAAQ,EAEvD,IAAII,EAAgBhB,GAAmB,CAACO,EAKxC,OAJIQ,IAAwB,SAC1BC,EAAgBA,GAAiBD,GAG/BC,GACFZ,EAAe,EAAI,EACnBE,EAAmBM,CAAQ,EACpB,KAGLG,GACFd,EAAU,EAGL,GACT,EAEMgB,EAAe,IAAM,CACzBb,EAAe,EAAK,EACpBE,EAAmB,IAAI,CACzB,EAEMY,EAAmB,IAAM,CAC7Bd,EAAe,EAAK,EACpBI,EAAoB,EAAI,EACxBP,EAAU,CACZ,EAEA,OACE,gCACE,gBAAC,MAAM,CAAC,KAAM,GAAM,QAASU,CAAA,CAAgB,EAC5CN,GAAmBE,GAAoB,gBAAC,MAAQ,CAAC,GAAIF,CAAA,CAAiB,EACvE,gBAACc,GAAA,CAAoB,OAAQhB,EAAa,UAAWe,EAAkB,aAAAD,CAAA,CAA4B,CACrG,CAEJ,EAQME,GAAsB,CAAC,CAAE,UAAAlB,EAAW,aAAAgB,EAAc,OAAAG,CAAO,IAE3D,gBAACC,GAAA,GACC,OAAAD,EACA,MAAM,cACN,UAAWH,EACX,KAAK,uBACL,aAAW,OAAI,CAAE,MAAO,OAAQ,CAAC,GAEjC,gBAAC,UAAG,yCAAuC,EAC3C,gBAACI,GAAA,EAAM,UAAN,KACC,gBAACC,EAAA,GAAM,CAAC,QAAQ,YAAY,QAASL,EAAc,KAAK,WAAU,kBAElE,EACA,gBAACK,EAAA,GAAM,CAAC,QAAQ,cAAc,QAASrB,CAAA,EAAW,yBAElD,CACF,CACF,E,gGC9GG,SAASsB,EAAkBC,EAA4C,CAC5E,OAAO,MAAM,QAAQA,CAAK,GAAKA,EAAM,MAAOC,GAAM,OAAOA,GAAM,UAAYA,IAAM,MAAQ,UAAWA,CAAC,CACvG,C,cCOO,MAAMC,EAAgF,CAC3F,OAAQ,CAAC,OAAQ,WAAY,eAAgB,UAAW,sBAAsB,EAC9E,OAAQ,CAAC,OAAQ,WAAY,eAAgB,gBAAgB,EAC7D,OAAQ,CAAC,OAAQ,WAAY,eAAgB,uBAAwB,SAAS,EAC9E,QAAS,CAAC,OAAQ,WAAY,eAAgB,UAAW,WAAY,SAAU,gBAAiB,gBAAgB,EAChH,KAAM,CACJ,OACA,WACA,eACA,UACA,WACA,SACA,oBACA,gBACA,gBACF,CACF,EAYaC,EAAyB,CACpC,cAAe,CACb,CACE,KAAM,mBACN,GAAI,UACJ,OAAQ,CACN,OACA,WACA,eACA,YACA,SACA,UACA,WACA,SACA,cACA,YACA,oBACF,CACF,EACA,CACE,KAAM,eACN,GAAI,OACJ,OAAQ,CACN,oBACA,qBACA,qBACA,qBACA,uBACA,oBACA,sBACA,0BACA,iBACF,CACF,EACA,CACE,KAAM,0BACN,GAAI,QACJ,OAAQ,CACN,uBACA,iBACA,sBACA,CAAE,KAAM,gBAAiB,UAAW,qBAAsB,EAC1D,CAAE,KAAM,sBAAuB,UAAW,qBAAsB,EAChE,wBACA,CAAE,KAAM,UAAW,UAAW,uBAAwB,EACtD,CAAE,KAAM,WAAY,UAAW,uBAAwB,EACvD,CAAE,KAAM,uBAAwB,UAAW,uBAAwB,EACnE,UACA,iBACF,CACF,EACA,CACE,KAAM,MACN,GAAI,MACJ,OAAQ,CAAC,wBAAyB,gBAAiB,eAAgB,aAAa,CAClF,CACF,CACF,EAKO,SAASC,EAAS/B,EAA6C,CACpE,MAAO,CACL,SAAU,CACR,MAAO,YACP,KAAM,OACN,YAAa,oCACb,WAAY,CACV,SAAU,GACV,QAAS,wBACX,CACF,EACA,aAAc,CACZ,MAAO,gBACP,KAAM,SACN,YAAa,uCACf,EACA,qBAAsB,CACpB,MAAO,wBACP,KAAM,SACN,YACE;AAAA,yCAEF,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,EACV,YAAa,iEACf,EACA,eAAgB,CACd,MAAO,kBACP,KAAM,SACN,YACE;AAAA,uBACF,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,CACZ,EACA,QAAS,CACP,MAAO,WACP,KAAM,OACN,YAAa,sDACb,WAAY,CACV,SAAU,GACV,SAAW2B,MACF,KAAWA,CAAK,EAEzB,QAAS,iDACX,CACF,EACA,UAAW,CACT,MAAO,aACP,KAAM,SACN,YAAa,oGACb,MAAO,GACP,QAAS,CACP,CAAE,MAAO,aAAc,MAAO,YAAa,EAC3C,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,WAAY,MAAO,UAAW,CACzC,EACA,aAAc,CAAE,MAAO,aAAc,MAAO,YAAa,CAC3D,EACA,SAAU,CACR,MAAO,YACP,KAAM,OACN,YAAa,8CACb,WAAY,CACV,SAAU,GACV,SAAWA,MACF,KAAWA,CAAK,EAEzB,QAAS,iDACX,CACF,EACA,OAAQ,CACN,MAAO,SACP,KAAM,SACN,YAAa,mDACb,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,CACZ,EACA,cAAe,CACb,MAAO,iBACP,KAAM,SACN,YACE,gCAAE,yGACuG,IACtG3B,IAAa,iBACZ,iFACJ,EAEF,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,EACV,WACEA,IAAa,UACT,CACE,SAAW2B,GACL,OAAOA,GAAU,YACZ,MAAaA,CAAK,EAEvBD,EAAkBC,CAAK,EAClBA,EAAM,MAAOC,GAAMA,GAAG,UAAS,MAAaA,EAAE,KAAK,CAAC,EAEtD,GAET,QAAS,oCACX,EACA,MACR,EACA,OAAQ,CACN,MAAO,UACP,KAAM,OACN,YACE,gCAAE,uHAEgB,IAChB,gBAACzD,EAAA,EAAQ,CAAC,KAAM,2DAA4D,SAAQ,GAAC,QAAS,aAAa,iBAE3G,EAAW,GAEb,EAEF,WAAY,CACV,SAAU,GACV,SAAWwD,GACL,OAAOA,GAAU,SACZ,GAGLA,EAAM,UACD,KAAWA,CAAK,EAGlB,GAET,QAAS,wCACX,CACF,EACA,kBAAmB,CACjB,MAAO,sBACP,YAAa,sDACb,KAAM,OACN,WAAY,CACV,SAAU,EACZ,CACF,EACA,KAAM,CACJ,MAAO,eACP,YACE,mIACF,KAAM,MACR,EACA,YAAa,CACX,MAAO,gBACP,YAAa,sEACb,KAAM,QACR,EACA,UAAW,CACT,MAAO,aACP,YAAa,mDACb,KAAM,QACR,EACA,mBAAoB,CAClB,MAAO,wBACP,YAAa,kEACb,KAAM,OACN,WAAY,CACV,SAAU,EACZ,CACF,EACA,mBAAoB,CAClB,MAAO,uBACP,YAAa,6FACb,KAAM,MACR,EACA,mBAAoB,CAClB,MAAO,uBACP,YAAa,8EACb,KAAM,MACR,EACA,kBAAmB,CACjB,MAAO,sBACP,YACE;AAAA,yDAEF,KAAM,MACR,EACA,mBAAoB,CAClB,MAAO,uBACP,YAAa,2EACb,KAAM,MACR,EACA,qBAAsB,CACpB,MAAO,0BACP,YAAa,mFACb,KAAM,MACR,EACA,oBAAqB,CACnB,MAAO,6BACP,YAAa,mGACb,KAAM,QACR,EACA,wBAAyB,CACvB,MAAO,6BACP,YAAa,gFACb,KAAM,SACN,OAAQ,CAAC,KAAW,cACtB,EACA,gBAAiB,CACf,MAAO,8BACP,YAAa,sEACb,KAAM,QACR,EACA,oBAAqB,CACnB,MAAO,wBACP,KAAM,QACR,EACA,sBAAuB,CACrB,MAAO,2BACP,KAAM,QACR,EACA,QAAS,CACP,MAAO,WACP,YACE,gCAAE,+BAC6B,IAC7B,gBAACxD,EAAA,EAAQ,CAAC,SAAQ,GAAC,QAAS,YAAa,KAAM,iDAAiD,oCAEhG,EAAY,IAAI,2CAElB,EAEF,KAAM,UACR,EACA,gBAAiB,CACf,MAAO,oBACP,YACE,6GACF,KAAM,UACR,EACA,YAAa,CACX,MAAO,gBACP,YAAa,+FACb,KAAM,MACR,EACA,cAAe,CACb,MAAO,kBACP,YAAa,wEACb,KAAM,MACR,EACA,aAAc,CACZ,MAAO,iBACP,YAAa,gEACb,KAAM,MACR,EACA,sBAAuB,CACrB,MAAO,kBACP,YACE;AAAA;AAAA,mDAGF,KAAM,QACR,EACA,oBAAqB,CACnB,MAAO,wBACP,YACE;AAAA,gDAEF,KAAM,MACR,EACA,SAAU,CACR,MAAO,YACP,YACE,gCAAE,+EAC6E,IAC5E6B,IAAa,iBACZ,8EACJ,EAEF,KAAM,OACN,WAAY,CACV,SAAU,CAAC2B,EAAOK,IAAe,CAC/B,IAAIC,EAAS,GACb,OAAID,EAAW,QAAQ,SACrBC,EAAS,CAAC,CAACN,GAGT,OAAOA,GAAU,UAAYA,EAAM,SACrCM,KAAS,KAAWN,CAAK,GAEpBM,CACT,EACA,QAAS,4EACX,CACF,EACA,qBAAsB,CACpB,MAAO,0BACP,YACE,mHACF,KAAM,OACN,WAAY,CACV,SAAU,CAACN,EAAOK,IACZA,EAAW,QAAQ,OACd,CAAC,CAACL,EAEJ,GAET,QAAS,oDACX,CACF,EACA,QAAS,CACP,MAAO,WACP,KAAM,SACN,YACE,gCACG3B,IAAa,SAAW,UAAY,SAAS,4FACnB,IAC1BA,IAAa,iBACZ,2FACJ,EAEF,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,EACV,YAAa,wCACb,WACEA,IAAa,SACT,CACE,SAAW2B,GACL,OAAOA,GAAU,SACZO,EAAUP,CAAK,EAEpBD,EAAkBC,CAAK,EAClBA,EAAM,MAAOC,GAAMA,GAAG,OAASM,EAAUN,EAAE,KAAK,CAAC,EAEnD,GAET,QAAS,2BACX,EACA,MACR,CACF,CACF,CAGA,SAASM,EAAUP,EAAe,CAChC,MAAO,UAAU,KAAKA,CAAK,CAC7B,CC9aO,MAAMQ,EAAgB,CAAC,CAC5B,MAAAC,EACA,SAAAC,EACA,OAAAC,EACA,MAAAC,EACA,SAAAC,EACA,QAAAC,EACA,WAAAC,EACA,iBAAAC,EACA,SAAA3C,CACF,IAA0B,CACxB,KAAM,CAAC4C,EAAoBC,CAAqB,KAAI,YAASF,CAAgB,EACvEG,EAAmB,OAAOV,GAAU,SACpCW,EAAOD,EAAmBV,EAAM,KAAOA,EACvCY,EAAcF,EAAmBP,EAAMH,EAAM,SAAS,EAAI,KAC1Da,EAAYlB,EAAS/B,CAAQ,EAAE+C,CAAI,EACnC3E,KAAQ,OAAU,EAUxB,MARA,aAAU,IAAM,CACV0E,IACGE,GACHN,EAAWK,CAAI,EAGrB,EAAG,CAACL,EAAYK,EAAMC,EAAaF,CAAgB,CAAC,EAEhD,CAACV,EACH,eAAQ,IAAI,iBAAkBW,CAAI,EAC3B,KAQT,GALME,EAAU,QAKZH,GAEE,CADgBP,EAAMH,EAAM,SAAS,EAEvC,OAAO,KAGX,MAAMc,EAAa,CACjB,MAAOD,EAAU,MACjB,SAAU,CAAC,CAACA,EAAU,YAAY,SAClC,QAAS,CAAC,CAACX,EAAOS,CAAI,EACtB,MAAOE,EAAU,YAAY,QAC7B,IAAKF,EACL,YAAaE,EAAU,YACvB,aAAcA,EAAU,cAAc,KACxC,EAEA,OAAQA,EAAU,KAAM,CACtB,IAAK,OACH,OACE,gBAACE,EAAA,EAAK,CAAE,GAAGD,CAAA,EACT,gBAACE,GAAA,EAAK,CAAE,GAAGf,EAASU,EAAME,EAAU,UAAU,EAAG,KAAMA,EAAU,KAAM,GAAIF,EAAM,aAAc,MAAO,CACxG,EAEJ,IAAK,SACH,OACE,gBAACI,EAAA,EAAK,CAAE,GAAGD,EAAY,QAASH,CAAA,EAC9B,gBAAC,MACC,KAAAA,EACA,QAAAN,EACA,MAAOQ,EAAU,WACjB,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAI,GAAK,MAAA1B,EAAO,GAAGS,CAAM,CAAE,IACzC,gBAACkB,GAAA,IACE,GAAGlB,EACJ,aAAc,MACd,GAAIW,EACJ,MAAO,OAAOpB,GAAU,SAAWA,EAAQ,GAC3C,aAAciB,EACd,QAAS,IAAM,CACbC,EAAsB,EAAK,EAC3BL,EAASO,EAAM,EAAE,CACnB,EACF,EAEJ,CACF,EAEJ,IAAK,SACH,MAAMQ,EAAehB,EAAMQ,CAAI,EAC/B,IAAIS,EAAUP,EAAU,QACxB,OAAKA,EAAU,SAAS,SACtBO,EAAU9B,EAAkB6B,CAAY,EAAIA,EAAe,CAAC,GAG5D,gBAACJ,EAAA,EAAK,CAAE,GAAGD,EAAY,QAASH,CAAA,EAC9B,gBAAC,MACC,MAAOE,EAAU,WACjB,KAAAF,EACA,QAAAN,EACA,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAY,GAAK,SAAAI,EAAU,GAAGP,CAAW,EAAG,WAAY,CAAE,QAAAQ,EAAQ,CAAE,IAExE,gBAACC,GAAA,IACE,GAAGT,EACJ,YAAaD,EAAU,YACvB,QAASA,EAAU,MACnB,QAAAS,GACA,QAASX,EACT,QAAAS,EACA,iBAAkB,CAAC,CAACP,EAAU,iBAC9B,aAAcA,EAAU,aACxB,SAAAQ,EACA,eAAiB7B,IAAM,CACrB,MAAMgC,EAAc,CAAE,MAAOhC,GAAG,MAAOA,EAAE,EACzC6B,EAAS,CAAC,GAAID,GAAW,CAAC,EAAII,CAAW,CAAC,CAC5C,EACF,CAEJ,CACF,CACF,EAEJ,IAAK,SACH,OACE,gBAACT,EAAA,EAAK,CAAE,GAAGD,CAAA,EACT,gBAACW,EAAA,EAAM,CAAE,GAAGxB,EAASU,CAAI,EAAG,GAAIA,CAAA,CAAM,CACxC,EAEJ,IAAK,WACH,OACE,gBAACe,GAAA,EAAQ,CAAE,GAAGzB,EAASU,CAAI,EAAG,GAAIA,EAAO,GAAGG,EAAY,aAAW,OAAI,CAAE,aAAc9E,EAAM,QAAQ,CAAC,CAAE,CAAC,EAAG,EAEhH,QACE,eAAQ,MAAM,uBAAuB6E,EAAU,MAAM,EAC9C,IACX,CACF,EC7Iac,EAAgC,CAC3C,wBAAyB,GACzB,YAAa,GACb,eAAgB,CAAC,EACjB,cAAe,CAAC,EAChB,qBAAsB,CAAC,EACvB,OAAQ,GACR,UAAW,GACX,QAAS,GACT,UAAW,GACX,SAAU,GACV,aAAc,GACd,mBAAoB,GACpB,mBAAoB,GACpB,YAAa,GACb,QAAS,GACT,MAAO,CAAC,EACR,oBAAqB,GACrB,aAAc,GACd,KAAM,SACN,KAAM,GACN,kBAAmB,GACnB,oBAAqB,GACrB,OAAQ,CAAC,EACT,mBAAoB,GACpB,gBAAiB,GACjB,QAAS,CAAC,EACV,qBAAsB,GACtB,SAAU,GACV,YAAa,GACb,cAAe,GACf,aAAc,GACd,cAAe,GACf,SAAU,GACV,KAAM,GACN,QAAS,GACT,gBAAiB,EACnB,EAEMC,GAAcC,GACbA,GAAK,OAGN,MAAM,QAAQA,CAAG,EACZA,EAAI,IAAKrC,IAAO,CAAE,MAAOA,EAAG,MAAOA,CAAE,EAAE,EAEzCqC,EAAI,MAAM,OAAO,EAAE,IAAKC,IAAO,CAAE,MAAOA,EAAG,MAAOA,CAAE,EAAE,EALpD,CAAC,EAQL,SAASC,GAAUC,EAAoC,CAC5D,GAAI,CAACA,EACH,OAAOL,EAET,MAAMM,EAAcC,GAAevC,EAASqC,EAAK,QAAQ,CAAC,EACpDnE,EAAW,CAAE,GAAGmE,EAAK,QAAS,EACpC,UAAWhC,KAASiC,EAElBpE,EAASmC,CAAK,EAAI4B,GAAW/D,EAASmC,CAAK,CAAC,EAG9C,OAAOnC,CACT,CAEA,MAAMsE,GAAkBC,GACfA,EAAO,IAAI,CAAC,CAAE,MAAA7C,CAAM,IAAMA,CAAK,EAAE,KAAK,GAAG,EAG5C8C,GAA0B,CAC9BC,EACAC,IAC4B,CAC5B,GAAI,CAACA,EACH,OAAOD,EAET,IAAIzC,EAAkC,CAAC,EACvC,UAAW2C,KAAOD,EAEhB1C,EAAO2C,CAAG,EAAIF,EAAIE,CAAG,EAEvB,OAAO3C,CACT,EAGO,SAAS4C,GAAUC,EAAqB9E,EAAkB,CAC/D,MAAMqE,EAAcC,GAAevC,EAAS/B,CAAQ,CAAC,EACrD,IAAI+E,EAAmCD,EAEnCjD,EAAO7B,CAAQ,IACjB+E,EAAUN,GAAwBK,EAAK,CAAC,GAAGjD,EAAO7B,CAAQ,EAAG,SAAS,CAAC,GAEzE,MAAMC,EAAW,CAAE,GAAG8E,CAAQ,EAE9B,UAAW3C,KAASiC,EAAa,CAC/B,MAAM1C,EAAQoD,EAAQ3C,CAAK,EACvBT,IACED,EAAkBC,CAAK,EAEzB1B,EAASmC,CAAK,EAAImC,GAAe5C,CAAK,EAC7BD,EAAkB,CAACC,CAAK,CAAC,IAElC1B,EAASmC,CAAK,EAAIT,EAAM,QAI9B,OAAO1B,CACT,CAEO,SAASqE,GAAeI,EAA6D,CAC1F,OAAO,OAAO,QAAQA,CAAG,EACtB,OAAO,CAAC,CAACM,EAAGrD,CAAK,IAAMA,EAAM,OAAS,QAAQ,EAC9C,IAAI,CAAC,CAACiD,CAAG,IAAMA,CAA2B,CAC/C,CCvGA,MAAM,MAAY,MAAa,EAQlBK,GAAqB,CAAC,CAAE,OAAAC,EAAQ,SAAAlF,EAAU,UAAAd,CAAU,IAA2B,CAC1F,KAAM,CACJ,SAAAmD,EACA,aAAA8C,EACA,QAAA1C,EACA,MAAA2C,EACA,MAAA7C,EACA,SAAAC,EACA,WAAAE,EACA,UAAW,CAAE,OAAAJ,EAAQ,YAAA+C,EAAa,YAAAC,CAAY,CAChD,KAAI,MAAQ,CAAE,cAAenB,GAAUe,CAAM,EAAG,KAAM,WAAY,eAAgB,UAAW,CAAC,EACxF,CAACK,EAAUC,CAAW,KAAI,YAAS,EAAK,EACxCC,EAAiB5D,EAAO7B,CAAQ,EAChC,CAAC0F,EAAaC,CAAc,KAAI,YAAS,EAAK,EAC9CC,EAAgBN,GAAe,CAACI,EAChCG,GAAW/D,EAAc9B,CAAQ,EACjC,CAAC8F,EAAaC,CAAc,KAAI,YAAS,EAAK,EAE9CC,GAAW,MAAO5B,GAAyB,CAC/CoB,EAAY,EAAI,EAChBG,EAAe,EAAK,EACpB,MAAMM,EAAcpB,GAAUT,EAAMpE,CAAQ,EAC5C,GAAI,CACF,QAAM,MAAc,EAAE,IACpB,wBAAwBA,IACxB,CACE,GAAIkF,GAAQ,GACZ,SAAUA,GAAQ,SAClB,SAAU,CAAE,GAAGe,CAAY,CAC7B,EACA,CACE,eAAgB,EAClB,CACF,KAEA,MAAkB,2CAA4C,CAC5D,SAAAjG,EACA,QAASiG,EAAY,OACvB,CAAC,EAED,GAAU,QAAQ,CAChB,KAAM,KAAU,aAAa,KAC7B,QAAS,CAAC,gBAAgB,CAC5B,CAAC,EACDb,EAAMhB,CAAI,EAEV,WAAW,IAAM,CACf,KAAgB,KAAK,uBAAuB,CAC9C,EAAG,GAAG,CACR,OAAS8B,EAAP,CACA,IAAIC,GAAU,MACV,MAAaD,CAAK,EACpBC,GAAUD,EAAM,KAAK,QACZA,aAAiB,QAC1BC,GAAUD,EAAM,SAElB,GAAU,QAAQ,CAChB,KAAM,KAAU,WAAW,KAC3B,QAAS,CAACC,EAAO,CACnB,CAAC,EACDR,EAAe,EAAI,EACnBH,EAAY,EAAK,CACnB,CACF,EAEMY,GAAgB,SAAY,CAChC,GAAI,CACF,QAAM,MAAc,EAAE,OAAO,wBAAwBpG,IAAY,OAAW,CAAE,iBAAkB,EAAM,CAAC,KACvG,MAAkB,6CAA8C,CAC9D,SAAAA,CACF,CAAC,EAED,GAAU,QAAQ,CAChB,KAAM,KAAU,aAAa,KAC7B,QAAS,CAAC,4BAA4B,CACxC,CAAC,EACD,WAAW,IAAM,CACf,KAAgB,KAAK,uBAAuB,CAC9C,CAAC,CACH,OAASkG,EAAP,CACA,IAAIC,EAAU,MACV,MAAaD,CAAK,EACpBC,EAAUD,EAAM,KAAK,QACZA,aAAiB,QAC1BC,EAAUD,EAAM,SAElB,GAAU,QAAQ,CAChB,KAAM,KAAU,WAAW,KAC3B,QAAS,CAACC,CAAO,CACnB,CAAC,CACH,CACF,EAEA,OACE,gBAACrG,EAAA,EAAK,SAAL,CAAc,UAAAZ,CAAA,EACb,gBAAC,QAAK,SAAUiG,EAAaa,EAAQ,EAAG,MAAO,CAAE,SAAU,OAAQ,GACjE,gCACE,gBAAC9F,GAAA,CACC,gBAAiB,CAAC,CAAC,OAAO,KAAKmF,CAAW,EAAE,QAAU,CAACO,EACvD,UAAW,IAAM,IACf,MAAkB,+CAAgD,CAChE,SAAA5F,CACF,CAAC,EACDoF,EAAM,CACR,EACF,EACA,gBAACjC,EAAA,EAAK,CAAC,MAAM,WACX,gBAACU,EAAA,EAAM,CAAE,GAAGxB,EAAS,SAAS,EAAG,GAAG,UAAU,MAAO,UAAW,CAClE,EACCwD,GACC,gBAAC7H,EAAA,EAAK,CAAC,IAAK,EAAG,UAAW,UACvB6H,GACE,OAAQQ,GAAY,CAACA,EAAQ,MAAM,EACnC,IAAI,CAACA,EAASC,IAEX,gBAACC,EAAA,EAAkB,CAAC,MAAOF,EAAQ,KAAM,OAAQC,IAAU,EAAG,IAAKD,EAAQ,MACxEA,EAAQ,OACN,OAAQjE,GAAW,OAAOA,GAAU,SAAW,CAACA,EAAM,OAAS,EAAK,EACpE,IAAKA,GAEF,gBAACD,EAAA,CACC,IAAK,OAAOC,GAAU,SAAWA,EAAQA,EAAM,KAC/C,MAAAA,EACA,QAAAK,EACA,OAAAH,EACA,SAAAE,EACA,SAAAH,EACA,MAAAE,EACA,WAAAG,EACA,SAAA1C,EACA,iBAAkB,CAAC,CAACkF,GAAQ,SAAS,aACvC,CAEH,CACL,CAEH,CACL,EAEA,gCACGO,EAAe,IAAKrD,GAEjB,gBAACD,EAAA,CACC,IAAKC,EACL,MAAAA,EACA,QAAAK,EACA,OAAAH,EACA,SAAAE,EACA,SAAAH,EACA,MAAAE,EACA,WAAAG,EACA,SAAA1C,EACA,iBAAkB,CAAC,CAACkF,GAAQ,SAAS,aACvC,CAEH,CACH,EAEF,gBAACsB,EAAA,EAAG,CAAC,QAAS,OAAQ,IAAK,EAAG,UAAW,GACvC,gBAACrD,EAAA,EAAK,KACJ,gBAAC1B,EAAA,GAAM,CAAC,KAAM,SAAU,SAAU8D,CAAA,EAC/BA,EAAW,YAAc,MAC5B,CACF,EACA,gBAACpC,EAAA,EAAK,KACJ,gBAAC,KAAU,CAAC,KAAM,wBAAyB,QAAS,aAAa,SAEjE,CACF,EACA,gBAACA,EAAA,EAAK,KACJ,gBAAC1B,EAAA,IACC,QAAS,YACT,OAAQyD,GAAQ,SAAW,SAC3B,QAAUuB,GAAU,CAClBV,EAAe,EAAI,CACrB,GACD,OAED,CACF,CACF,CACF,CACF,EACCD,GACC,gBAACY,EAAA,GACC,OAAM,GACN,KAAK,YACL,MAAM,QACN,KACE,gBAAC1I,EAAA,EAAK,CAAC,UAAW,SAAU,IAAK,GAC/B,gBAAC,YAAK,oDAAkD,EACxD,gBAAC,aAAM,wIAGP,CACF,EAEF,YAAY,QACZ,UAAW,IAAM+H,EAAe,EAAK,EACrC,UAAW,SAAY,CACrB,MAAMK,GAAc,EACpBL,EAAe,EAAK,CACtB,EACF,CAEJ,CAEJ,E,2BCxNA,MAAMY,GAAczB,GAAuC,CACzD,GAAI,CAACA,EACH,MAAO,CACL,KAAM,iBACN,SAAU,qCACV,KAAM,SACN,GAAI,gBACN,EAGF,MAAM0B,EAAsB,KAAM1B,EAAO,QAAQ,EAAE,CAAC,GAAKA,EAAO,SAAS,YAAY,EAErF,MAAO,CACL,KAAM0B,GAAuB,GAC7B,SAAU,gBAAgBA,oDAAsEA,8EAChG,KAAM1B,EAAO,SAAS,MAAQ,SAC9B,GAAIA,EAAO,QACb,CACF,EAIA,SAASlG,GAAgBC,EAAmB4H,EAAmB,CAC7D,KAAM,CAAE,UAAA3H,EAAW,UAAAE,CAAU,EAAIH,EAAM,WACjC,CAAE,SAAAe,CAAS,EAAI6G,EAAM,MAAM,OAEjC,MAAO,CACL,OAFazH,EAAU,KAAM8F,GAAWA,EAAO,WAAalF,CAAQ,EAGpE,UAAAd,EACA,SAAAc,CACF,CACF,CAEA,MAAMX,GAAqB,CACzB,cAAa,KACf,EAEMC,MAAY,WAAQN,GAAiBK,EAAkB,EAMhDyH,GAAqB,CAAC,CAAE,OAAA5B,EAAQ,cAAA6B,EAAe,UAAA7H,EAAW,SAAAc,CAAS,IAAa,CAC3F,MAAMgH,EAAUL,GAAWzB,CAAM,EAMjC,SAJA,aAAU,IAAM,CACd6B,EAAc/G,CAAQ,CACxB,EAAG,CAAC+G,EAAe/G,CAAQ,CAAC,EAEvBkF,EAIH,gBAACpF,EAAA,EAAI,CAAC,MAAM,iBAAiB,QAAAkH,CAAA,EAC3B,gBAAC/B,GAAkB,CAAC,OAAAC,EAAgB,UAAAhG,EAAsB,SAAAc,CAAA,CAAoB,CAChF,EALO,IAOX,EAEA,GAAeV,GAAUwH,EAAkB,C,0CCxEpC,MAAMG,EAAY,wBAGZC,EAA4C,CACvD,OAAQ,CAAC,SAAU,QAAQ,EAC3B,OAAQ,CAAC,SAAU,QAAQ,EAC3B,OAAQ,CAAC,SAAU,QAAQ,EAC3B,cAAe,CAAC,OAAQ,eAAe,EACvC,YAAa,CAAC,UAAW,aAAa,EACtC,QAAS,CAAC,YAAa,UAAU,EACjC,KAAM,CAAC,OAAQ,MAAM,CACvB,C,mHCMO,SAAS1H,GAA+C,CAC7D,MAAO,OAAO2H,GAAa,CACzB,GAAI,KAAW,cAAc,sBAAoB,YAAY,EAAG,CAC9DA,KAAS,MAAa,CAAC,EACvBA,EAASJ,EAAc,CAAC,EACxB,MAAM9E,EAAS,QAAM,MAAc,EAAE,IAAI,qBAAqB,EAC9D,OAAAkF,KAAS,MAAgBlF,CAAM,CAAC,EAChC,MAAMkF,EAASC,EAAqB,CAAC,EACrCD,KAAS,MAAW,CAAC,EACdlF,EAEX,CACF,CAEO,SAAS8E,EAAc/G,EAAW,GAAyC,CAChF,MAAO,OAAOmH,GAAa,CACzB,GAAI,CAAC,IAAO,eAAe,eACzB,MAAO,CAAC,EAEV,MAAMlF,EAAS,QAAM,MAAc,EAAE,IAAI,uBAAuBjC,EAAW,IAAIA,IAAa,IAAI,EAChG,OAAAmH,KAAS,MAAgBnH,EAAW,CAACiC,CAAM,EAAIA,CAAM,CAAC,EAC/CA,CACT,CACF,CAEO,SAASmF,GAA0C,CACxD,MAAO,OAAOD,GAAa,CACzB,MAAME,KAAsB,8BAA2B,EACjDlI,EAAuD,CAAC,EACxDmI,EAAwD,CAAC,EAC/D,UAAWtH,KAAYqH,EACrBC,EAAkB,QAAK,yBAAsBtH,EAAS,EAAE,CAAC,EAE3D,MAAMuH,EAAW,MAAM,QAAQ,IAAID,CAAiB,EACpD,QAASE,EAAI,EAAGA,EAAIH,EAAoB,OAAQG,IAAK,CACnD,MAAMxH,EAAWqH,EAAoBG,CAAC,EACtCrI,EAAiBa,EAAS,EAAE,EAAIuH,EAASC,CAAC,EAE5CL,KAAS,MAAuBhI,CAAgB,CAAC,CACnD,CACF,CAEO,SAASsI,EAAarD,EAA0D,CACrF,MAAO,OAAO+C,GAAa,CACzB,GAAI,WAAW,cAAc,oBAAoB,aAAa,EAC5D,GAAI,CACF,aAAM,cACJ,cAAc,EAAE,MAAM,CACpB,IAAK,sBACL,OAAQ,MACR,KAAA/C,EACA,iBAAkB,GAClB,eAAgB,EAClB,CAAC,CACH,EACA+C,EAAS,WAAW,CAAC,EACd,EACT,OAASjB,EAAP,CAEA,GADA,QAAQ,IAAIA,CAAK,EACb,aAAaA,CAAK,EAAG,CACvBA,EAAM,UAAY,GAClB,MAAMwB,EAA2B,CAC/B,QAASxB,EAAM,MAAM,QACrB,OAAQA,EAAM,MAAM,MACtB,EACA,OAAAiB,EAAS,SAASO,CAAS,CAAC,EACrB,GAEX,CAEF,MAAO,EACT,CACF,C,wDCxFO,SAASC,EAAe3H,EAA4B,CACzD,OAAO,KAAaA,EAAS,YAAcA,EAAS,GACtD,CAEO,MAAM4H,EAAcjJ,GAA0B,CACnD,GAAI,OAAOA,GAAQ,SACjB,MAAO,GAET,GAAI,CAEF,OADkB,IAAI,IAAIA,CAAG,EACZ,SAAS,SAAS,MAAM,CAC3C,MAAE,CACA,MAAO,EACT,CACF,C,kCCjBA,QAAe,sHCEf,SAASkJ,EAASC,EAAM,CACtB,OAAO,OAAOA,GAAS,UAAY,EAAM,KAAKA,CAAI,CACpD,CAEA,QAAeD,C","sources":["webpack://grafana/./public/app/features/auth-config/components/ConfigureAuthCTA.tsx","webpack://grafana/./public/app/features/auth-config/components/ProviderCard.tsx","webpack://grafana/./public/app/features/auth-config/AuthProvidersListPage.tsx","webpack://grafana/./public/app/core/components/FormPrompt/FormPrompt.tsx","webpack://grafana/./public/app/features/auth-config/utils/guards.ts","webpack://grafana/./public/app/features/auth-config/fields.tsx","webpack://grafana/./public/app/features/auth-config/FieldRenderer.tsx","webpack://grafana/./public/app/features/auth-config/utils/data.ts","webpack://grafana/./public/app/features/auth-config/ProviderConfigForm.tsx","webpack://grafana/./public/app/features/auth-config/ProviderConfigPage.tsx","webpack://grafana/./public/app/features/auth-config/constants.ts","webpack://grafana/./public/app/features/auth-config/state/actions.ts","webpack://grafana/./public/app/features/auth-config/utils/url.ts","webpack://grafana/./node_modules/uuid/dist/esm-browser/regex.js","webpack://grafana/./node_modules/uuid/dist/esm-browser/validate.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, TextLink, useStyles2 } from '@grafana/ui';\n\nexport interface Props {}\n\nconst ConfigureAuthCTA: React.FunctionComponent<Props> = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.container}>\n      <Stack gap={1} alignItems={'center'}>\n        <Icon name={'cog'} />\n        <Text>Configuration required</Text>\n      </Stack>\n      <Text variant={'bodySmall'} color={'secondary'}>\n        You have no authentication configuration created at the moment.\n      </Text>\n      <TextLink href={'https://grafana.com/docs/grafana/latest/auth/overview/'} external>\n        Refer to the documentation on how to configure authentication\n      </TextLink>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      width: 'max-content',\n      margin: theme.spacing(3, 'auto'),\n    }),\n  };\n};\n\nexport default ConfigureAuthCTA;\n","import React from 'react';\n\nimport { isIconName } from '@grafana/data';\nimport { Badge, Card, Icon } from '@grafana/ui';\n\nimport { UIMap } from '../constants';\nimport { getProviderUrl } from '../utils/url';\n\ntype Props = {\n  providerId: string;\n  enabled: boolean;\n  configPath?: string;\n  authType?: string;\n  onClick?: () => void;\n};\n\nexport function ProviderCard({ providerId, enabled, configPath, authType, onClick }: Props) {\n  //@ts-expect-error\n  const url = getProviderUrl({ configPath, id: providerId });\n  const [iconName, displayName] = UIMap[providerId] || ['lock', providerId.toUpperCase()];\n  return (\n    <Card href={url} onClick={onClick}>\n      <Card.Heading>{displayName}</Card.Heading>\n      <Card.Meta>{authType}</Card.Meta>\n      {isIconName(iconName) && (\n        <Card.Figure>\n          <Icon name={iconName} size={'xxxl'} />\n        </Card.Figure>\n      )}\n      <Card.Actions>\n        <Badge text={enabled ? 'Enabled' : 'Not enabled'} color={enabled ? 'green' : 'blue'} />\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { JSX, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Grid, TextLink } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport ConfigureAuthCTA from './components/ConfigureAuthCTA';\nimport { ProviderCard } from './components/ProviderCard';\nimport { loadSettings } from './state/actions';\n\nimport { getRegisteredAuthProviders } from './index';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  const { isLoading, providerStatuses, providers } = state.authConfig;\n  return {\n    isLoading,\n    providerStatuses,\n    providers,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadSettings,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const AuthConfigPageUnconnected = ({\n  providerStatuses,\n  isLoading,\n  loadSettings,\n  providers,\n}: Props): JSX.Element => {\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  const authProviders = getRegisteredAuthProviders();\n  const availableProviders = authProviders.filter((p) => !providerStatuses[p.id]?.hide);\n  const onProviderCardClick = (providerType: string) => {\n    reportInteraction('authentication_ui_provider_clicked', { provider: providerType });\n  };\n\n  const providerList = availableProviders.length\n    ? [\n        ...availableProviders.map((p) => ({\n          provider: p.id,\n          settings: { ...providerStatuses[p.id], configPath: p.configPath, type: p.type },\n        })),\n        ...providers,\n      ]\n    : providers;\n  return (\n    <Page\n      navId=\"authentication\"\n      subTitle={\n        <>\n          Manage your auth settings and configure single sign-on. Find out more in our{' '}\n          <TextLink\n            external={true}\n            href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication\"\n          >\n            documentation\n          </TextLink>\n          .\n        </>\n      }\n    >\n      <Page.Contents isLoading={isLoading}>\n        {!providerList.length ? (\n          <ConfigureAuthCTA />\n        ) : (\n          <Grid gap={3} minColumnWidth={34}>\n            {providerList\n              // Temporarily filter out providers that don't have the UI implemented\n              .filter(({ provider }) => !['grafana_com'].includes(provider))\n              .map(({ provider, settings }) => (\n                <ProviderCard\n                  key={provider}\n                  authType={settings.type || 'OAuth'}\n                  providerId={provider}\n                  enabled={settings.enabled}\n                  onClick={() => onProviderCardClick(provider)}\n                  //@ts-expect-error Remove legacy types\n                  configPath={settings.configPath}\n                />\n              ))}\n          </Grid>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AuthConfigPageUnconnected);\n","import { css } from '@emotion/css';\nimport history from 'history';\nimport React, { useEffect, useState } from 'react';\nimport { Prompt, Redirect } from 'react-router-dom';\n\nimport { Button, Modal } from '@grafana/ui';\n\nexport interface Props {\n  confirmRedirect?: boolean;\n  onDiscard: () => void;\n  /** Extra check to invoke when location changes.\n   * Could be useful in multistep forms where each step has a separate URL\n   */\n  onLocationChange?: (location: history.Location) => void;\n}\n\n/**\n * Component handling redirects when a form has unsaved changes.\n * Page reloads are handled in useEffect via beforeunload event.\n * URL navigation is handled by react-router's components since it does not trigger beforeunload event.\n */\nexport const FormPrompt = ({ confirmRedirect, onDiscard, onLocationChange }: Props) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [blockedLocation, setBlockedLocation] = useState<history.Location | null>(null);\n  const [changesDiscarded, setChangesDiscarded] = useState(false);\n\n  useEffect(() => {\n    const onBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (confirmRedirect) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n  }, [confirmRedirect]);\n\n  // Returning 'false' from this function will prevent navigation to the next URL\n  const handleRedirect = (location: history.Location) => {\n    // Do not show the unsaved changes modal if only the URL params have changed\n    const currentPath = window.location.pathname;\n    const nextPath = location.pathname;\n    if (currentPath === nextPath) {\n      return true;\n    }\n\n    const locationChangeCheck = onLocationChange?.(location);\n\n    let blockRedirect = confirmRedirect && !changesDiscarded;\n    if (locationChangeCheck !== undefined) {\n      blockRedirect = blockRedirect && locationChangeCheck;\n    }\n\n    if (blockRedirect) {\n      setModalIsOpen(true);\n      setBlockedLocation(location);\n      return false;\n    }\n\n    if (locationChangeCheck) {\n      onDiscard();\n    }\n\n    return true;\n  };\n\n  const onBackToForm = () => {\n    setModalIsOpen(false);\n    setBlockedLocation(null);\n  };\n\n  const onDiscardChanges = () => {\n    setModalIsOpen(false);\n    setChangesDiscarded(true);\n    onDiscard();\n  };\n\n  return (\n    <>\n      <Prompt when={true} message={handleRedirect} />\n      {blockedLocation && changesDiscarded && <Redirect to={blockedLocation} />}\n      <UnsavedChangesModal isOpen={modalIsOpen} onDiscard={onDiscardChanges} onBackToForm={onBackToForm} />\n    </>\n  );\n};\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onBackToForm: () => void;\n  isOpen: boolean;\n}\n\nconst UnsavedChangesModal = ({ onDiscard, onBackToForm, isOpen }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title=\"Leave page?\"\n      onDismiss={onBackToForm}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '500px' })}\n    >\n      <h5>Changes that you made may not be saved.</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onBackToForm} fill=\"outline\">\n          Continue editing\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard unsaved changes\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function isSelectableValue(value: unknown): value is SelectableValue[] {\n  return Array.isArray(value) && value.every((v) => typeof v === 'object' && v !== null && 'value' in v);\n}\n","import React from 'react';\nimport { validate as uuidValidate } from 'uuid';\n\nimport { TextLink } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { FieldData, SSOProvider, SSOSettingsField } from './types';\nimport { isSelectableValue } from './utils/guards';\nimport { isUrlValid } from './utils/url';\n\n/** Map providers to their settings */\nexport const fields: Record<SSOProvider['provider'], Array<keyof SSOProvider['settings']>> = {\n  github: ['name', 'clientId', 'clientSecret', 'teamIds', 'allowedOrganizations'],\n  google: ['name', 'clientId', 'clientSecret', 'allowedDomains'],\n  gitlab: ['name', 'clientId', 'clientSecret', 'allowedOrganizations', 'teamIds'],\n  azuread: ['name', 'clientId', 'clientSecret', 'authUrl', 'tokenUrl', 'scopes', 'allowedGroups', 'allowedDomains'],\n  okta: [\n    'name',\n    'clientId',\n    'clientSecret',\n    'authUrl',\n    'tokenUrl',\n    'apiUrl',\n    'roleAttributePath',\n    'allowedGroups',\n    'allowedDomains',\n  ],\n};\n\ntype Section = Record<\n  SSOProvider['provider'],\n  Array<{\n    name: string;\n    id: string;\n    hidden?: boolean;\n    fields: SSOSettingsField[];\n  }>\n>;\n\nexport const sectionFields: Section = {\n  generic_oauth: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: [\n        'name',\n        'clientId',\n        'clientSecret',\n        'authStyle',\n        'scopes',\n        'authUrl',\n        'tokenUrl',\n        'apiUrl',\n        'allowSignUp',\n        'autoLogin',\n        'signoutRedirectUrl',\n      ],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: [\n        'nameAttributePath',\n        'loginAttributePath',\n        'emailAttributeName',\n        'emailAttributePath',\n        'idTokenAttributeName',\n        'roleAttributePath',\n        'roleAttributeStrict',\n        'allowAssignGrafanaAdmin',\n        'skipOrgRoleSync',\n      ],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'allowedOrganizations',\n        'allowedDomains',\n        'defineAllowedGroups',\n        { name: 'allowedGroups', dependsOn: 'defineAllowedGroups' },\n        { name: 'groupsAttributePath', dependsOn: 'defineAllowedGroups' },\n        'defineAllowedTeamsIds',\n        { name: 'teamIds', dependsOn: 'defineAllowedTeamsIds' },\n        { name: 'teamsUrl', dependsOn: 'defineAllowedTeamsIds' },\n        { name: 'teamIdsAttributePath', dependsOn: 'defineAllowedTeamsIds' },\n        'usePkce',\n        'useRefreshToken',\n      ],\n    },\n    {\n      name: 'TLS',\n      id: 'tls',\n      fields: ['tlsSkipVerifyInsecure', 'tlsClientCert', 'tlsClientKey', 'tlsClientCa'],\n    },\n  ],\n};\n\n/**\n * List all the fields that can be used in the form\n */\nexport function fieldMap(provider: string): Record<string, FieldData> {\n  return {\n    clientId: {\n      label: 'Client Id',\n      type: 'text',\n      description: 'The client Id of your OAuth2 app.',\n      validation: {\n        required: true,\n        message: 'This field is required',\n      },\n    },\n    clientSecret: {\n      label: 'Client secret',\n      type: 'secret',\n      description: 'The client secret of your OAuth2 app.',\n    },\n    allowedOrganizations: {\n      label: 'Allowed organizations',\n      type: 'select',\n      description:\n        'List of comma- or space-separated organizations. The user should be a member \\n' +\n        'of at least one organization to log in.',\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      placeholder: 'Enter organizations (my-team, myteam...) and press Enter to add',\n    },\n    allowedDomains: {\n      label: 'Allowed domains',\n      type: 'select',\n      description:\n        'List of comma- or space-separated domains. The user should belong to at least \\n' + 'one domain to log in.',\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n    },\n    authUrl: {\n      label: 'Auth URL',\n      type: 'text',\n      description: 'The authorization endpoint of your OAuth2 provider.',\n      validation: {\n        required: true,\n        validate: (value) => {\n          return isUrlValid(value);\n        },\n        message: 'This field is required and must be a valid URL.',\n      },\n    },\n    authStyle: {\n      label: 'Auth style',\n      type: 'select',\n      description: 'It determines how client_id and client_secret are sent to Oauth2 provider. Default is AutoDetect.',\n      multi: false,\n      options: [\n        { value: 'AutoDetect', label: 'AutoDetect' },\n        { value: 'InParams', label: 'InParams' },\n        { value: 'InHeader', label: 'InHeader' },\n      ],\n      defaultValue: { value: 'AutoDetect', label: 'AutoDetect' },\n    },\n    tokenUrl: {\n      label: 'Token URL',\n      type: 'text',\n      description: 'The token endpoint of your OAuth2 provider.',\n      validation: {\n        required: true,\n        validate: (value) => {\n          return isUrlValid(value);\n        },\n        message: 'This field is required and must be a valid URL.',\n      },\n    },\n    scopes: {\n      label: 'Scopes',\n      type: 'select',\n      description: 'List of comma- or space-separated OAuth2 scopes.',\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n    },\n    allowedGroups: {\n      label: 'Allowed groups',\n      type: 'select',\n      description: (\n        <>\n          List of comma- or space-separated groups. The user should be a member of at least one group to log in.{' '}\n          {provider === 'generic_oauth' &&\n            'If you configure allowed_groups, you must also configure groups_attribute_path.'}\n        </>\n      ),\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      validation:\n        provider === 'azuread'\n          ? {\n              validate: (value) => {\n                if (typeof value === 'string') {\n                  return uuidValidate(value);\n                }\n                if (isSelectableValue(value)) {\n                  return value.every((v) => v?.value && uuidValidate(v.value));\n                }\n                return true;\n              },\n              message: 'Allowed groups must be Object Ids.',\n            }\n          : undefined,\n    },\n    apiUrl: {\n      label: 'API URL',\n      type: 'text',\n      description: (\n        <>\n          The user information endpoint of your OAuth2 provider. Information returned by this endpoint must be\n          compatible with{' '}\n          <TextLink href={'https://connect2id.com/products/server/docs/api/userinfo'} external variant={'bodySmall'}>\n            OpenID UserInfo\n          </TextLink>\n          .\n        </>\n      ),\n      validation: {\n        required: false,\n        validate: (value) => {\n          if (typeof value !== 'string') {\n            return false;\n          }\n\n          if (value.length) {\n            return isUrlValid(value);\n          }\n\n          return true;\n        },\n        message: 'This field must be a valid URL if set.',\n      },\n    },\n    roleAttributePath: {\n      label: 'Role attribute path',\n      description: 'JMESPath expression to use for Grafana role lookup.',\n      type: 'text',\n      validation: {\n        required: false,\n      },\n    },\n    name: {\n      label: 'Display name',\n      description:\n        'Will be displayed on the login page as \"Sign in with ...\". Helpful if you use more than one identity providers or SSO protocols.',\n      type: 'text',\n    },\n    allowSignUp: {\n      label: 'Allow sign up',\n      description: 'If not enabled, only existing Grafana users can log in using OAuth.',\n      type: 'switch',\n    },\n    autoLogin: {\n      label: 'Auto login',\n      description: 'Log in automatically, skipping the login screen.',\n      type: 'switch',\n    },\n    signoutRedirectUrl: {\n      label: 'Sign out redirect URL',\n      description: 'The URL to redirect the user to after signing out from Grafana.',\n      type: 'text',\n      validation: {\n        required: false,\n      },\n    },\n    emailAttributeName: {\n      label: 'Email attribute name',\n      description: 'Name of the key to use for user email lookup within the attributes map of OAuth2 ID token.',\n      type: 'text',\n    },\n    emailAttributePath: {\n      label: 'Email attribute path',\n      description: 'JMESPath expression to use for user email lookup from the user information.',\n      type: 'text',\n    },\n    nameAttributePath: {\n      label: 'Name attribute path',\n      description:\n        'JMESPath expression to use for user name lookup from the user ID token. \\n' +\n        'This name will be used as the user’s display name.',\n      type: 'text',\n    },\n    loginAttributePath: {\n      label: 'Login attribute path',\n      description: 'JMESPath expression to use for user login lookup from the user ID token.',\n      type: 'text',\n    },\n    idTokenAttributeName: {\n      label: 'ID token attribute name',\n      description: 'The name of the key used to extract the ID token from the returned OAuth2 token.',\n      type: 'text',\n    },\n    roleAttributeStrict: {\n      label: 'Role attribute strict mode',\n      description: 'If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.',\n      type: 'switch',\n    },\n    allowAssignGrafanaAdmin: {\n      label: 'Allow assign Grafana admin',\n      description: 'If enabled, it will automatically sync the Grafana server administrator role.',\n      type: 'switch',\n      hidden: !contextSrv.isGrafanaAdmin,\n    },\n    skipOrgRoleSync: {\n      label: 'Skip organization role sync',\n      description: 'Prevent synchronizing users’ organization roles from your IdP.',\n      type: 'switch',\n    },\n    defineAllowedGroups: {\n      label: 'Define allowed groups',\n      type: 'switch',\n    },\n    defineAllowedTeamsIds: {\n      label: 'Define allowed teams ids',\n      type: 'switch',\n    },\n    usePkce: {\n      label: 'Use PKCE',\n      description: (\n        <>\n          If enabled, Grafana will use{' '}\n          <TextLink external variant={'bodySmall'} href={'https://datatracker.ietf.org/doc/html/rfc7636'}>\n            Proof Key for Code Exchange (PKCE)\n          </TextLink>{' '}\n          with the OAuth2 Authorization Code Grant.\n        </>\n      ),\n      type: 'checkbox',\n    },\n    useRefreshToken: {\n      label: 'Use refresh token',\n      description:\n        'If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.',\n      type: 'checkbox',\n    },\n    tlsClientCa: {\n      label: 'TLS client ca',\n      description: 'The file path to the trusted certificate authority list. Is not applicable on Grafana Cloud.',\n      type: 'text',\n    },\n    tlsClientCert: {\n      label: 'TLS client cert',\n      description: 'The file path to the certificate. Is not applicable on Grafana Cloud.',\n      type: 'text',\n    },\n    tlsClientKey: {\n      label: 'TLS client key',\n      description: 'The file path to the key. Is not applicable on Grafana Cloud.',\n      type: 'text',\n    },\n    tlsSkipVerifyInsecure: {\n      label: 'TLS skip verify',\n      description:\n        'If enabled, the client accepts any certificate presented by the server and any host \\n' +\n        'name in that certificate. You should only use this for testing, because this mode leaves \\n' +\n        'SSL/TLS susceptible to man-in-the-middle attacks.',\n      type: 'switch',\n    },\n    groupsAttributePath: {\n      label: 'Groups attribute path',\n      description:\n        'JMESPath expression to use for user group lookup. If you configure allowed_groups, \\n' +\n        'you must also configure groups_attribute_path.',\n      type: 'text',\n    },\n    teamsUrl: {\n      label: 'Teams URL',\n      description: (\n        <>\n          The URL used to query for Team Ids. If not set, the default value is /teams.{' '}\n          {provider === 'generic_oauth' &&\n            'If you configure teams_url, you must also configure team_ids_attribute_path.'}\n        </>\n      ),\n      type: 'text',\n      validation: {\n        validate: (value, formValues) => {\n          let result = true;\n          if (formValues.teamIds.length) {\n            result = !!value;\n          }\n\n          if (typeof value === 'string' && value.length) {\n            result = isUrlValid(value);\n          }\n          return result;\n        },\n        message: 'This field must be set if Team Ids are configured and must be a valid URL.',\n      },\n    },\n    teamIdsAttributePath: {\n      label: 'Team Ids attribute path',\n      description:\n        'The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint.',\n      type: 'text',\n      validation: {\n        validate: (value, formValues) => {\n          if (formValues.teamIds.length) {\n            return !!value;\n          }\n          return true;\n        },\n        message: 'This field must be set if Team Ids are configured.',\n      },\n    },\n    teamIds: {\n      label: 'Team Ids',\n      type: 'select',\n      description: (\n        <>\n          {provider === 'github' ? 'Integer' : 'String'} list of Team Ids. If set, the user must be a member of one of\n          the given teams to log in.{' '}\n          {provider === 'generic_oauth' &&\n            'If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.'}\n        </>\n      ),\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      placeholder: 'Enter Team Ids and press Enter to add',\n      validation:\n        provider === 'github'\n          ? {\n              validate: (value) => {\n                if (typeof value === 'string') {\n                  return isNumeric(value);\n                }\n                if (isSelectableValue(value)) {\n                  return value.every((v) => v?.value && isNumeric(v.value));\n                }\n                return true;\n              },\n              message: 'Team Ids must be numbers.',\n            }\n          : undefined,\n    },\n  };\n}\n\n// Check if a string contains only numeric values\nfunction isNumeric(value: string) {\n  return /^-?\\d+$/.test(value);\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { UseFormReturn, Controller } from 'react-hook-form';\n\nimport { Checkbox, Field, Input, SecretInput, Select, Switch, useTheme2 } from '@grafana/ui';\n\nimport { fieldMap } from './fields';\nimport { SSOProviderDTO, SSOSettingsField } from './types';\nimport { isSelectableValue } from './utils/guards';\n\ninterface FieldRendererProps\n  extends Pick<UseFormReturn<SSOProviderDTO>, 'register' | 'control' | 'watch' | 'setValue' | 'unregister'> {\n  field: SSOSettingsField;\n  errors: UseFormReturn['formState']['errors'];\n  secretConfigured: boolean;\n  provider: string;\n}\n\nexport const FieldRenderer = ({\n  field,\n  register,\n  errors,\n  watch,\n  setValue,\n  control,\n  unregister,\n  secretConfigured,\n  provider,\n}: FieldRendererProps) => {\n  const [isSecretConfigured, setIsSecretConfigured] = useState(secretConfigured);\n  const isDependantField = typeof field !== 'string';\n  const name = isDependantField ? field.name : field;\n  const parentValue = isDependantField ? watch(field.dependsOn) : null;\n  const fieldData = fieldMap(provider)[name];\n  const theme = useTheme2();\n  // Unregister a field that depends on a toggle to clear its data\n  useEffect(() => {\n    if (isDependantField) {\n      if (!parentValue) {\n        unregister(name);\n      }\n    }\n  }, [unregister, name, parentValue, isDependantField]);\n\n  if (!field) {\n    console.log('missing field:', name);\n    return null;\n  }\n\n  if (!!fieldData.hidden) {\n    return null;\n  }\n\n  // Dependant field means the field depends on another field's value and shouldn't be rendered if the parent field is false\n  if (isDependantField) {\n    const parentValue = watch(field.dependsOn);\n    if (!parentValue) {\n      return null;\n    }\n  }\n  const fieldProps = {\n    label: fieldData.label,\n    required: !!fieldData.validation?.required,\n    invalid: !!errors[name],\n    error: fieldData.validation?.message,\n    key: name,\n    description: fieldData.description,\n    defaultValue: fieldData.defaultValue?.value,\n  };\n\n  switch (fieldData.type) {\n    case 'text':\n      return (\n        <Field {...fieldProps}>\n          <Input {...register(name, fieldData.validation)} type={fieldData.type} id={name} autoComplete={'off'} />\n        </Field>\n      );\n    case 'secret':\n      return (\n        <Field {...fieldProps} htmlFor={name}>\n          <Controller\n            name={name}\n            control={control}\n            rules={fieldData.validation}\n            render={({ field: { ref, value, ...field } }) => (\n              <SecretInput\n                {...field}\n                autoComplete={'off'}\n                id={name}\n                value={typeof value === 'string' ? value : ''}\n                isConfigured={isSecretConfigured}\n                onReset={() => {\n                  setIsSecretConfigured(false);\n                  setValue(name, '');\n                }}\n              />\n            )}\n          />\n        </Field>\n      );\n    case 'select':\n      const watchOptions = watch(name);\n      let options = fieldData.options;\n      if (!fieldData.options?.length) {\n        options = isSelectableValue(watchOptions) ? watchOptions : [];\n      }\n      return (\n        <Field {...fieldProps} htmlFor={name}>\n          <Controller\n            rules={fieldData.validation}\n            name={name}\n            control={control}\n            render={({ field: { ref, onChange, ...fieldProps }, fieldState: { invalid } }) => {\n              return (\n                <Select\n                  {...fieldProps}\n                  placeholder={fieldData.placeholder}\n                  isMulti={fieldData.multi}\n                  invalid={invalid}\n                  inputId={name}\n                  options={options}\n                  allowCustomValue={!!fieldData.allowCustomValue}\n                  defaultValue={fieldData.defaultValue}\n                  onChange={onChange}\n                  onCreateOption={(v) => {\n                    const customValue = { value: v, label: v };\n                    onChange([...(options || []), customValue]);\n                  }}\n                />\n              );\n            }}\n          />\n        </Field>\n      );\n    case 'switch':\n      return (\n        <Field {...fieldProps}>\n          <Switch {...register(name)} id={name} />\n        </Field>\n      );\n    case 'checkbox':\n      return (\n        <Checkbox {...register(name)} id={name} {...fieldProps} className={css({ marginBottom: theme.spacing(2) })} />\n      );\n    default:\n      console.error(`Unknown field type: ${fieldData.type}`);\n      return null;\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { fieldMap, fields } from '../fields';\nimport { FieldData, SSOProvider, SSOProviderDTO } from '../types';\n\nimport { isSelectableValue } from './guards';\n\nexport const emptySettings: SSOProviderDTO = {\n  allowAssignGrafanaAdmin: false,\n  allowSignUp: false,\n  allowedDomains: [],\n  allowedGroups: [],\n  allowedOrganizations: [],\n  apiUrl: '',\n  authStyle: '',\n  authUrl: '',\n  autoLogin: false,\n  clientId: '',\n  clientSecret: '',\n  emailAttributeName: '',\n  emailAttributePath: '',\n  emptyScopes: false,\n  enabled: false,\n  extra: {},\n  groupsAttributePath: '',\n  hostedDomain: '',\n  icon: 'shield',\n  name: '',\n  roleAttributePath: '',\n  roleAttributeStrict: false,\n  scopes: [],\n  signoutRedirectUrl: '',\n  skipOrgRoleSync: false,\n  teamIds: [],\n  teamIdsAttributePath: '',\n  teamsUrl: '',\n  tlsClientCa: '',\n  tlsClientCert: '',\n  tlsClientKey: '',\n  tlsSkipVerify: false,\n  tokenUrl: '',\n  type: '',\n  usePkce: false,\n  useRefreshToken: false,\n};\n\nconst strToValue = (val: string | string[]): SelectableValue[] => {\n  if (!val?.length) {\n    return [];\n  }\n  if (Array.isArray(val)) {\n    return val.map((v) => ({ label: v, value: v }));\n  }\n  return val.split(/[\\s,]/).map((s) => ({ label: s, value: s }));\n};\n\nexport function dataToDTO(data?: SSOProvider): SSOProviderDTO {\n  if (!data) {\n    return emptySettings;\n  }\n  const arrayFields = getArrayFields(fieldMap(data.provider));\n  const settings = { ...data.settings };\n  for (const field of arrayFields) {\n    //@ts-expect-error\n    settings[field] = strToValue(settings[field]);\n  }\n  //@ts-expect-error\n  return settings;\n}\n\nconst valuesToString = (values: Array<SelectableValue<string>>) => {\n  return values.map(({ value }) => value).join(',');\n};\n\nconst includeRequiredKeysOnly = (\n  obj: SSOProviderDTO,\n  requiredKeys: Array<keyof SSOProvider['settings']>\n): Partial<SSOProviderDTO> => {\n  if (!requiredKeys) {\n    return obj;\n  }\n  let result: Partial<SSOProviderDTO> = {};\n  for (const key of requiredKeys) {\n    //@ts-expect-error\n    result[key] = obj[key];\n  }\n  return result;\n};\n\n// Convert the DTO to the data format used by the API\nexport function dtoToData(dto: SSOProviderDTO, provider: string) {\n  const arrayFields = getArrayFields(fieldMap(provider));\n  let current: Partial<SSOProviderDTO> = dto;\n\n  if (fields[provider]) {\n    current = includeRequiredKeysOnly(dto, [...fields[provider], 'enabled']);\n  }\n  const settings = { ...current };\n\n  for (const field of arrayFields) {\n    const value = current[field];\n    if (value) {\n      if (isSelectableValue(value)) {\n        //@ts-expect-error\n        settings[field] = valuesToString(value);\n      } else if (isSelectableValue([value])) {\n        //@ts-expect-error\n        settings[field] = value.value;\n      }\n    }\n  }\n  return settings;\n}\n\nexport function getArrayFields(obj: Record<string, FieldData>): Array<keyof SSOProviderDTO> {\n  return Object.entries(obj)\n    .filter(([_, value]) => value.type === 'select')\n    .map(([key]) => key as keyof SSOProviderDTO);\n}\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { AppEvents } from '@grafana/data';\nimport { getAppEvents, getBackendSrv, isFetchError, locationService, reportInteraction } from '@grafana/runtime';\nimport { Box, Button, CollapsableSection, ConfirmModal, Field, LinkButton, Stack, Switch } from '@grafana/ui';\n\nimport { FormPrompt } from '../../core/components/FormPrompt/FormPrompt';\nimport { Page } from '../../core/components/Page/Page';\n\nimport { FieldRenderer } from './FieldRenderer';\nimport { fields, sectionFields } from './fields';\nimport { SSOProvider, SSOProviderDTO } from './types';\nimport { dataToDTO, dtoToData } from './utils/data';\n\nconst appEvents = getAppEvents();\n\ninterface ProviderConfigProps {\n  config?: SSOProvider;\n  isLoading?: boolean;\n  provider: string;\n}\n\nexport const ProviderConfigForm = ({ config, provider, isLoading }: ProviderConfigProps) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    watch,\n    setValue,\n    unregister,\n    formState: { errors, dirtyFields, isSubmitted },\n  } = useForm({ defaultValues: dataToDTO(config), mode: 'onSubmit', reValidateMode: 'onChange' });\n  const [isSaving, setIsSaving] = useState(false);\n  const providerFields = fields[provider];\n  const [submitError, setSubmitError] = useState(false);\n  const dataSubmitted = isSubmitted && !submitError;\n  const sections = sectionFields[provider];\n  const [resetConfig, setResetConfig] = useState(false);\n\n  const onSubmit = async (data: SSOProviderDTO) => {\n    setIsSaving(true);\n    setSubmitError(false);\n    const requestData = dtoToData(data, provider);\n    try {\n      await getBackendSrv().put(\n        `/api/v1/sso-settings/${provider}`,\n        {\n          id: config?.id,\n          provider: config?.provider,\n          settings: { ...requestData },\n        },\n        {\n          showErrorAlert: false,\n        }\n      );\n\n      reportInteraction('grafana_authentication_ssosettings_saved', {\n        provider,\n        enabled: requestData.enabled,\n      });\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: ['Settings saved'],\n      });\n      reset(data);\n      // Delay redirect so the form state can update\n      setTimeout(() => {\n        locationService.push(`/admin/authentication`);\n      }, 300);\n    } catch (error) {\n      let message = '';\n      if (isFetchError(error)) {\n        message = error.data.message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [message],\n      });\n      setSubmitError(true);\n      setIsSaving(false);\n    }\n  };\n\n  const onResetConfig = async () => {\n    try {\n      await getBackendSrv().delete(`/api/v1/sso-settings/${provider}`, undefined, { showSuccessAlert: false });\n      reportInteraction('grafana_authentication_ssosettings_removed', {\n        provider,\n      });\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: ['Settings reset to defaults'],\n      });\n      setTimeout(() => {\n        locationService.push(`/admin/authentication`);\n      });\n    } catch (error) {\n      let message = '';\n      if (isFetchError(error)) {\n        message = error.data.message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [message],\n      });\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={isLoading}>\n      <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '600px' }}>\n        <>\n          <FormPrompt\n            confirmRedirect={!!Object.keys(dirtyFields).length && !dataSubmitted}\n            onDiscard={() => {\n              reportInteraction('grafana_authentication_ssosettings_abandoned', {\n                provider,\n              });\n              reset();\n            }}\n          />\n          <Field label=\"Enabled\">\n            <Switch {...register('enabled')} id=\"enabled\" label={'Enabled'} />\n          </Field>\n          {sections ? (\n            <Stack gap={2} direction={'column'}>\n              {sections\n                .filter((section) => !section.hidden)\n                .map((section, index) => {\n                  return (\n                    <CollapsableSection label={section.name} isOpen={index === 0} key={section.name}>\n                      {section.fields\n                        .filter((field) => (typeof field !== 'string' ? !field.hidden : true))\n                        .map((field) => {\n                          return (\n                            <FieldRenderer\n                              key={typeof field === 'string' ? field : field.name}\n                              field={field}\n                              control={control}\n                              errors={errors}\n                              setValue={setValue}\n                              register={register}\n                              watch={watch}\n                              unregister={unregister}\n                              provider={provider}\n                              secretConfigured={!!config?.settings.clientSecret}\n                            />\n                          );\n                        })}\n                    </CollapsableSection>\n                  );\n                })}\n            </Stack>\n          ) : (\n            <>\n              {providerFields.map((field) => {\n                return (\n                  <FieldRenderer\n                    key={field}\n                    field={field}\n                    control={control}\n                    errors={errors}\n                    setValue={setValue}\n                    register={register}\n                    watch={watch}\n                    unregister={unregister}\n                    provider={provider}\n                    secretConfigured={!!config?.settings.clientSecret}\n                  />\n                );\n              })}\n            </>\n          )}\n          <Box display={'flex'} gap={2} marginTop={6}>\n            <Field>\n              <Button type={'submit'} disabled={isSaving}>\n                {isSaving ? 'Saving...' : 'Save'}\n              </Button>\n            </Field>\n            <Field>\n              <LinkButton href={'/admin/authentication'} variant={'secondary'}>\n                Discard\n              </LinkButton>\n            </Field>\n            <Field>\n              <Button\n                variant={'secondary'}\n                hidden={config?.source === 'system'}\n                onClick={(event) => {\n                  setResetConfig(true);\n                }}\n              >\n                Reset\n              </Button>\n            </Field>\n          </Box>\n        </>\n      </form>\n      {resetConfig && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title=\"Reset\"\n          body={\n            <Stack direction={'column'} gap={3}>\n              <span>Are you sure you want to reset this configuration?</span>\n              <small>\n                After resetting these settings Grafana will use the provider configuration from the system (config\n                file/environment variables) if any.\n              </small>\n            </Stack>\n          }\n          confirmText=\"Reset\"\n          onDismiss={() => setResetConfig(false)}\n          onConfirm={async () => {\n            await onResetConfig();\n            setResetConfig(false);\n          }}\n        />\n      )}\n    </Page.Contents>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { StoreState } from '../../types';\n\nimport { ProviderConfigForm } from './ProviderConfigForm';\nimport { UIMap } from './constants';\nimport { loadProviders } from './state/actions';\nimport { SSOProvider } from './types';\n\nconst getPageNav = (config?: SSOProvider): NavModelItem => {\n  if (!config) {\n    return {\n      text: 'Authentication',\n      subTitle: 'Configure authentication providers',\n      icon: 'shield',\n      id: 'authentication',\n    };\n  }\n\n  const providerDisplayName = UIMap[config.provider][1] || config.provider.toUpperCase();\n\n  return {\n    text: providerDisplayName || '',\n    subTitle: `To configure ${providerDisplayName} OAuth2 you must register your application with ${providerDisplayName}. The provider will generate a Client ID and Client Secret for you to use.`,\n    icon: config.settings.icon || 'shield',\n    id: config.provider,\n  };\n};\n\ninterface RouteProps extends GrafanaRouteComponentProps<{ provider: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: RouteProps) {\n  const { isLoading, providers } = state.authConfig;\n  const { provider } = props.match.params;\n  const config = providers.find((config) => config.provider === provider);\n  return {\n    config,\n    isLoading,\n    provider,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadProviders,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\n/**\n * Separate the Page logic from the Content logic for easier testing.\n */\nexport const ProviderConfigPage = ({ config, loadProviders, isLoading, provider }: Props) => {\n  const pageNav = getPageNav(config);\n\n  useEffect(() => {\n    loadProviders(provider);\n  }, [loadProviders, provider]);\n\n  if (!config) {\n    return null;\n  }\n  return (\n    <Page navId=\"authentication\" pageNav={pageNav}>\n      <ProviderConfigForm config={config} isLoading={isLoading} provider={provider} />\n    </Page>\n  );\n};\n\nexport default connector(ProviderConfigPage);\n","import { IconName } from '@grafana/data';\n\nexport const BASE_PATH = 'admin/authentication/';\n\n// TODO Remove when this is available from API\nexport const UIMap: Record<string, [IconName, string]> = {\n  github: ['github', 'GitHub'],\n  gitlab: ['gitlab', 'GitLab'],\n  google: ['google', 'Google'],\n  generic_oauth: ['lock', 'Generic OAuth'],\n  grafana_com: ['grafana', 'Grafana.com'],\n  azuread: ['microsoft', 'Azure AD'],\n  okta: ['okta', 'Okta'],\n};\n","import { lastValueFrom } from 'rxjs';\n\nimport { config, getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Settings, ThunkResult, UpdateSettingsQuery } from 'app/types';\n\nimport { getAuthProviderStatus, getRegisteredAuthProviders, SSOProvider } from '..';\nimport { AuthProviderStatus, SettingsError } from '../types';\n\nimport {\n  loadingBegin,\n  loadingEnd,\n  providersLoaded,\n  providerStatusesLoaded,\n  resetError,\n  setError,\n  settingsUpdated,\n} from './reducers';\n\nexport function loadSettings(): ThunkResult<Promise<Settings>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsRead)) {\n      dispatch(loadingBegin());\n      dispatch(loadProviders());\n      const result = await getBackendSrv().get('/api/admin/settings');\n      dispatch(settingsUpdated(result));\n      await dispatch(loadProviderStatuses());\n      dispatch(loadingEnd());\n      return result;\n    }\n  };\n}\n\nexport function loadProviders(provider = ''): ThunkResult<Promise<SSOProvider[]>> {\n  return async (dispatch) => {\n    if (!config.featureToggles.ssoSettingsApi) {\n      return [];\n    }\n    const result = await getBackendSrv().get(`/api/v1/sso-settings${provider ? `/${provider}` : ''}`);\n    dispatch(providersLoaded(provider ? [result] : result));\n    return result;\n  };\n}\n\nexport function loadProviderStatuses(): ThunkResult<void> {\n  return async (dispatch) => {\n    const registeredProviders = getRegisteredAuthProviders();\n    const providerStatuses: Record<string, AuthProviderStatus> = {};\n    const getStatusPromises: Array<Promise<AuthProviderStatus>> = [];\n    for (const provider of registeredProviders) {\n      getStatusPromises.push(getAuthProviderStatus(provider.id));\n    }\n    const statuses = await Promise.all(getStatusPromises);\n    for (let i = 0; i < registeredProviders.length; i++) {\n      const provider = registeredProviders[i];\n      providerStatuses[provider.id] = statuses[i];\n    }\n    dispatch(providerStatusesLoaded(providerStatuses));\n  };\n}\n\nexport function saveSettings(data: UpdateSettingsQuery): ThunkResult<Promise<boolean>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsWrite)) {\n      try {\n        await lastValueFrom(\n          getBackendSrv().fetch({\n            url: '/api/admin/settings',\n            method: 'PUT',\n            data,\n            showSuccessAlert: false,\n            showErrorAlert: false,\n          })\n        );\n        dispatch(resetError());\n        return true;\n      } catch (error) {\n        console.log(error);\n        if (isFetchError(error)) {\n          error.isHandled = true;\n          const updateErr: SettingsError = {\n            message: error.data?.message,\n            errors: error.data?.errors,\n          };\n          dispatch(setError(updateErr));\n          return false;\n        }\n      }\n    }\n    return false;\n  };\n}\n","import { BASE_PATH } from '../constants';\nimport { AuthProviderInfo } from '../types';\n\nexport function getProviderUrl(provider: AuthProviderInfo) {\n  return BASE_PATH + (provider.configPath || provider.id);\n}\n\nexport const isUrlValid = (url: unknown): boolean => {\n  if (typeof url !== 'string') {\n    return false;\n  }\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol.includes('http');\n  } catch (_) {\n    return false;\n  }\n};\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;"],"names":["ConfigureAuthCTA","styles","getStyles","Stack","Icon","Text","TextLink","theme","ProviderCard","providerId","enabled","configPath","authType","onClick","url","iconName","displayName","Card","Badge","mapStateToProps","state","isLoading","providerStatuses","providers","mapDispatchToProps","connector","AuthConfigPageUnconnected","loadSettings","availableProviders","p","onProviderCardClick","providerType","providerList","Page","Grid","provider","settings","FormPrompt","confirmRedirect","onDiscard","onLocationChange","modalIsOpen","setModalIsOpen","blockedLocation","setBlockedLocation","changesDiscarded","setChangesDiscarded","onBeforeUnload","e","handleRedirect","location","currentPath","nextPath","locationChangeCheck","blockRedirect","onBackToForm","onDiscardChanges","UnsavedChangesModal","isOpen","Modal","Button","isSelectableValue","value","v","fields","sectionFields","fieldMap","formValues","result","isNumeric","FieldRenderer","field","register","errors","watch","setValue","control","unregister","secretConfigured","isSecretConfigured","setIsSecretConfigured","isDependantField","name","parentValue","fieldData","fieldProps","Field","Input","ref","SecretInput","watchOptions","options","onChange","invalid","Select","customValue","Switch","Checkbox","emptySettings","strToValue","val","s","dataToDTO","data","arrayFields","getArrayFields","valuesToString","values","includeRequiredKeysOnly","obj","requiredKeys","key","dtoToData","dto","current","_","ProviderConfigForm","config","handleSubmit","reset","dirtyFields","isSubmitted","isSaving","setIsSaving","providerFields","submitError","setSubmitError","dataSubmitted","sections","resetConfig","setResetConfig","onSubmit","requestData","error","message","onResetConfig","section","index","CollapsableSection","Box","event","ConfirmModal","getPageNav","providerDisplayName","props","ProviderConfigPage","loadProviders","pageNav","BASE_PATH","UIMap","dispatch","loadProviderStatuses","registeredProviders","getStatusPromises","statuses","i","saveSettings","updateErr","getProviderUrl","isUrlValid","validate","uuid"],"sourceRoot":""}