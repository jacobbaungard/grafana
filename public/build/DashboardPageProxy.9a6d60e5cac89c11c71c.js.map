{"version":3,"file":"DashboardPageProxy.9a6d60e5cac89c11c71c.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/getAlertingValidationMessage.ts","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePage.tsx","webpack://grafana/./public/app/core/navigation/kiosk.ts","webpack://grafana/./public/app/features/plugins/angularDeprecation/AngularDeprecationNotice.tsx","webpack://grafana/./public/app/features/storage/StorageFolderPage.tsx","webpack://grafana/./public/app/features/dashboard/components/AddWidgetModal/AddWidgetModal.tsx","webpack://grafana/./public/app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/actions.ts","webpack://grafana/./public/app/features/dashboard/components/SaveDashboard/UnsavedChangesModal.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardPrompt/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/SupportSnapshotService.ts","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/HelpWizard.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/usePanelLatestData.ts","webpack://grafana/./public/app/features/inspector/InspectMetadataTab.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/InspectContent.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/PanelInspector.tsx","webpack://grafana/./public/app/features/variables/pickers/PickerRenderer.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenuItems.tsx","webpack://grafana/./public/app/features/dashboard/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationButton.tsx","webpack://grafana/./public/app/features/library-panels/components/ChangeLibraryPanelModal/ChangeLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationSelectPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTableView.tsx","webpack://grafana/./public/app/features/alerting/StateHistory.tsx","webpack://grafana/./public/app/features/alerting/TestRuleResult.tsx","webpack://grafana/./public/app/features/alerting/AlertTab.tsx","webpack://grafana/./public/app/features/alerting/unified/components/panel-alerts-tab/NewRuleFromPanelButton.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTabContent.tsx","webpack://grafana/./public/app/features/alerting/AlertTabIndex.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTab.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorQueries.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTabs.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/AnnotationPicker.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/Annotations.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/DashboardLinks.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenu.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPageProxy.tsx","webpack://grafana/./public/app/features/storage/storage.ts"],"sourcesContent":["import { DataQuery, DataSourceRef, DataTransformerConfig } from '@grafana/data';\nimport { DataSourceSrv } from '@grafana/runtime';\n\nexport const getDefaultCondition = () => ({\n  type: 'query',\n  query: { params: ['A', '5m', 'now'] },\n  reducer: { type: 'avg', params: [] },\n  evaluator: { type: 'gt', params: [null] },\n  operator: { type: 'and' },\n});\n\nexport const getAlertingValidationMessage = async (\n  transformations: DataTransformerConfig[] | undefined,\n  targets: DataQuery[],\n  datasourceSrv: DataSourceSrv,\n  datasource: DataSourceRef | null\n): Promise<string> => {\n  if (targets.length === 0) {\n    return 'Could not find any metric queries';\n  }\n\n  if (transformations && transformations.length) {\n    return 'Transformations are not supported in alert queries';\n  }\n\n  let alertingNotSupported = 0;\n  let templateVariablesNotSupported = 0;\n\n  for (const target of targets) {\n    const dsRef = target.datasource || datasource;\n    const ds = await datasourceSrv.get(dsRef);\n    if (!ds.meta.alerting) {\n      alertingNotSupported++;\n    } else if (ds.targetContainsTemplate && ds.targetContainsTemplate(target)) {\n      templateVariablesNotSupported++;\n    }\n  }\n\n  if (alertingNotSupported === targets.length) {\n    return 'The datasource does not support alerting queries';\n  }\n\n  if (templateVariablesNotSupported === targets.length) {\n    return 'Template variables are not supported in alert queries';\n  }\n\n  return '';\n};\n","// Libraries\nimport React, { useEffect } from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';\nimport { DashboardRoutes } from 'app/types';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> {}\n\nexport function DashboardScenePage({ match, route, queryParams, history }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n  // After scene migration is complete and we get rid of old dashboard we should refactor dashboardWatcher so this route reload is not need\n  const routeReloadCounter = (history.location.state as any)?.routeReloadCounter;\n\n  useEffect(() => {\n    if (route.routeName === DashboardRoutes.Normal && match.params.type === 'snapshot') {\n      stateManager.loadSnapshot(match.params.slug!);\n    } else {\n      stateManager.loadDashboard({\n        uid: match.params.uid ?? '',\n        route: route.routeName as DashboardRoutes,\n        urlFolderUid: queryParams.folderUid,\n      });\n    }\n\n    return () => {\n      stateManager.clearState();\n    };\n  }, [\n    stateManager,\n    match.params.uid,\n    route.routeName,\n    queryParams.folderUid,\n    routeReloadCounter,\n    match.params.slug,\n    match.params.type,\n  ]);\n\n  if (!dashboard) {\n    return (\n      <Page layout={PageLayoutType.Canvas} data-testid={'dashboard-scene-page'}>\n        {isLoading && <PageLoader />}\n        {loadError && <h2>{loadError}</h2>}\n      </Page>\n    );\n  }\n\n  return <dashboard.Component model={dashboard} />;\n}\n\nexport default DashboardScenePage;\n","import { UrlQueryMap } from '@grafana/data';\n\nimport { KioskMode } from '../../types';\n\n// TODO Remove after topnav feature toggle is permanent and old NavBar is removed\nexport function getKioskMode(queryParams: UrlQueryMap): KioskMode | null {\n  switch (queryParams.kiosk) {\n    case 'tv':\n      return KioskMode.TV;\n    //  legacy support\n    case '1':\n    case true:\n      return KioskMode.Full;\n    default:\n      return null;\n  }\n}\n","import React from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nconst LOCAL_STORAGE_KEY_PREFIX = 'grafana.angularDeprecation.dashboardNotice.isDismissed';\n\nfunction localStorageKey(dashboardUid: string): string {\n  return LOCAL_STORAGE_KEY_PREFIX + '.' + dashboardUid;\n}\n\nexport interface Props {\n  dashboardUid: string;\n}\n\nexport function AngularDeprecationNotice({ dashboardUid }: Props) {\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={localStorageKey(dashboardUid)} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <div>\n            <Alert\n              severity=\"warning\"\n              title=\"This dashboard depends on Angular, which is deprecated and will stop working in future releases of Grafana.\"\n              onRemove={() => {\n                reportInteraction('angular_deprecation_notice_dismissed');\n                onDismiss(true);\n              }}\n            >\n              <div className=\"markdown-html\">\n                <ul>\n                  <li>\n                    <a\n                      href=\"https://grafana.com/docs/grafana/latest/developers/angular_deprecation/\"\n                      className=\"external-link\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      Read our deprecation notice and migration advice.\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </Alert>\n          </div>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, NavModel, NavModelItem } from '@grafana/data';\nimport { Card, Icon, Spinner } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getGrafanaStorage } from './storage';\n\nexport interface Props extends GrafanaRouteComponentProps<{ slug: string }> {}\n\nexport function StorageFolderPage(props: Props) {\n  const slug = props.match.params.slug ?? '';\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage().list('content/' + slug);\n  }, [slug]);\n\n  const childRoot = slug.length > 0 ? `g/${slug}/` : 'g/';\n  const pageNav = getPageNavFromSlug(slug);\n\n  const renderListing = () => {\n    if (listing.value) {\n      const names = listing.value.fields[0].values;\n      return names.map((item: string) => {\n        let name = item;\n        const isFolder = name.indexOf('.') < 0;\n        const isDash = !isFolder && name.endsWith('.json');\n        const url = `${childRoot}${name}`;\n\n        return (\n          <Card key={name} href={isFolder || isDash ? url : undefined}>\n            <Card.Heading>{name}</Card.Heading>\n            <Card.Figure>\n              <Icon name={isFolder ? 'folder' : isDash ? 'gf-grid' : 'file-alt'} size=\"sm\" />\n            </Card.Figure>\n          </Card>\n        );\n      });\n    }\n    if (listing.loading) {\n      return <Spinner />;\n    }\n    return <div>?</div>;\n  };\n\n  const navModel = getRootContentNavModel();\n\n  return (\n    <Page navModel={navModel} pageNav={pageNav}>\n      {renderListing()}\n    </Page>\n  );\n}\n\nexport function getPageNavFromSlug(slug: string) {\n  const parts = slug.split('/');\n  let pageNavs: NavModelItem[] = [];\n  let url = 'g';\n  let lastPageNav: NavModelItem | undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    url += `/${parts[i]}`;\n    pageNavs.push({ text: parts[i], url, parentItem: lastPageNav });\n    lastPageNav = pageNavs[pageNavs.length - 1];\n  }\n\n  return lastPageNav;\n}\n\nexport function getRootContentNavModel(): NavModel {\n  return { main: { text: 'C:' }, node: { text: 'Content', url: '/g' } };\n}\n\nexport default StorageFolderPage;\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelPluginMeta } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { CustomScrollbar, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { onCreateNewWidgetPanel } from 'app/features/dashboard/utils/dashboard';\nimport { VizTypePickerPlugin } from 'app/features/panel/components/VizTypePicker/VizTypePickerPlugin';\nimport { filterPluginList, getWidgetPluginMeta } from 'app/features/panel/state/util';\nimport { useSelector } from 'app/types';\n\nexport const AddWidgetModal = () => {\n  const styles = useStyles2(getStyles);\n  const [searchQuery, setSearchQuery] = useState('');\n  const dashboard = useSelector((state) => state.dashboard.getModel());\n\n  const widgetsList: PanelPluginMeta[] = useMemo(() => {\n    return getWidgetPluginMeta();\n  }, []);\n\n  const filteredWidgetsTypes = useMemo((): PanelPluginMeta[] => {\n    return filterPluginList(widgetsList, searchQuery);\n  }, [widgetsList, searchQuery]);\n\n  const onDismiss = () => {\n    locationService.partial({ addWidget: null });\n  };\n\n  return (\n    <Modal\n      title=\"Select widget type\"\n      closeOnEscape\n      closeOnBackdropClick\n      isOpen\n      className={styles.modal}\n      onClickBackdrop={onDismiss}\n      onDismiss={onDismiss}\n    >\n      <Input\n        type=\"search\"\n        autoFocus\n        className={styles.searchInput}\n        value={searchQuery}\n        prefix={<Icon name=\"search\" />}\n        placeholder=\"Search widget\"\n        onChange={(e) => {\n          setSearchQuery(e.currentTarget.value);\n        }}\n      />\n      <CustomScrollbar>\n        <div className={styles.grid}>\n          {filteredWidgetsTypes.map((plugin, index) => (\n            <VizTypePickerPlugin\n              disabled={false}\n              key={plugin.id}\n              isCurrent={false}\n              plugin={plugin}\n              onClick={(e) => {\n                const id = onCreateNewWidgetPanel(dashboard!, plugin.id);\n                locationService.partial({ editPanel: id, addWidget: null });\n              }}\n            />\n          ))}\n        </div>\n      </CustomScrollbar>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 65%;\n    max-width: 960px;\n\n    ${theme.breakpoints.down('md')} {\n      width: 100%;\n    }\n  `,\n  searchInput: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  grid: css`\n    display: grid;\n    grid-gap: ${theme.spacing(1)};\n  `,\n});\n","import React, { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\n\nimport { Button, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { PanelModelWithLibraryPanel } from '../../types';\nimport { usePanelSave } from '../../utils/usePanelSave';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  folderUid: string;\n  isUnsavedPrompt?: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  onDiscard: () => void;\n}\n\nexport const SaveLibraryPanelModal = ({\n  panel,\n  folderUid,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard,\n}: Props) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n    if (searchHits.length > 0) {\n      return searchHits.map((dash) => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n\n  const [filteredDashboards, setFilteredDashboards] = useState<string[]>([]);\n  useDebounce(\n    () => {\n      if (!dashState.value) {\n        return setFilteredDashboards([]);\n      }\n\n      return setFilteredDashboards(\n        dashState.value.filter((dashName) => dashName.toLowerCase().includes(searchString.toLowerCase()))\n      );\n    },\n    300,\n    [dashState.value, searchString]\n  );\n\n  const { saveLibraryPanel } = usePanelSave();\n  const styles = useStyles2(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n\n  return (\n    <Modal title={title} icon=\"save\" onDismiss={onDismiss} isOpen={true}>\n      <div>\n        <p className={styles.textInfo}>\n          {'This update will affect '}\n          <strong>\n            {panel.libraryPanel.meta?.connectedDashboards}{' '}\n            {panel.libraryPanel.meta?.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}.\n          </strong>\n          The following dashboards using the panel will be affected:\n        </p>\n        <Input\n          className={styles.dashboardSearch}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search affected dashboards\"\n          value={searchString}\n          onChange={(e) => setSearchString(e.currentTarget.value)}\n        />\n        {dashState.loading ? (\n          <p>Loading connected dashboards...</p>\n        ) : (\n          <table className={styles.myTable}>\n            <thead>\n              <tr>\n                <th>Dashboard name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredDashboards.map((dashName, i) => (\n                <tr key={`dashrow-${i}`}>\n                  <td>{dashName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          {isUnsavedPrompt && (\n            <Button variant=\"destructive\" onClick={discardAndClose}>\n              Discard\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              saveLibraryPanel(panel, folderUid).then(() => {\n                onConfirm();\n              });\n            }}\n          >\n            Update all\n          </Button>\n        </Modal.ButtonRow>\n      </div>\n    </Modal>\n  );\n};\n","import { pick } from 'lodash';\n\nimport store from 'app/core/store';\nimport { removePanel } from 'app/features/dashboard/utils/panel';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { panelModelAndPluginReady } from 'app/features/panel/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../../state';\n\nimport {\n  closeEditor,\n  PANEL_EDITOR_UI_STATE_STORAGE_KEY,\n  PanelEditorUIState,\n  setDiscardChanges,\n  setPanelEditorUIState,\n  updateEditorInitState,\n} from './reducers';\n\nexport function initPanelEditor(sourcePanel: PanelModel, dashboard: DashboardModel): ThunkResult<void> {\n  return async (dispatch) => {\n    const panel = dashboard.initEditPanel(sourcePanel);\n\n    dispatch(\n      updateEditorInitState({\n        panel,\n        sourcePanel,\n      })\n    );\n  };\n}\n\nexport function discardPanelChanges(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { getPanel } = getStore().panelEditor;\n    getPanel().configRev = 0;\n    dispatch(setDiscardChanges(true));\n  };\n}\n\nexport function updateDuplicateLibraryPanels(\n  modifiedPanel: PanelModel,\n  dashboard: DashboardModel | null\n): ThunkResult<void> {\n  return (dispatch) => {\n    if (modifiedPanel.libraryPanel?.uid === undefined || !dashboard) {\n      return;\n    }\n\n    const modifiedSaveModel = modifiedPanel.getSaveModel();\n    for (const panel of dashboard.panels) {\n      if (skipPanelUpdate(modifiedPanel, panel)) {\n        continue;\n      }\n\n      panel.restoreModel({\n        ...modifiedSaveModel,\n        ...pick(panel, 'gridPos', 'id'),\n      });\n\n      // Loaded plugin is not included in the persisted properties\n      // So is not handled by restoreModel\n      const pluginChanged = panel.plugin?.meta.id !== modifiedPanel.plugin?.meta.id;\n      panel.plugin = modifiedPanel.plugin;\n      panel.configRev++;\n\n      if (pluginChanged) {\n        panel.generateNewKey();\n\n        dispatch(panelModelAndPluginReady({ key: panel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        panel.getQueryRunner().useLastResultFrom(modifiedPanel.getQueryRunner());\n      }, 20);\n    }\n\n    if (modifiedPanel.repeat) {\n      // We skip any repeated library panels so we need to update them by calling processRepeats\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => dashboard.processRepeats(), 20);\n    }\n  };\n}\n\nexport function skipPanelUpdate(modifiedPanel: PanelModel, panelToUpdate: PanelModel): boolean {\n  // don't update library panels that aren't of the same type\n  if (panelToUpdate.libraryPanel?.uid !== modifiedPanel.libraryPanel!.uid) {\n    return true;\n  }\n\n  // don't update the modifiedPanel twice\n  if (panelToUpdate.id && panelToUpdate.id === modifiedPanel.id) {\n    return true;\n  }\n\n  // don't update library panels that are repeated\n  if (panelToUpdate.repeatPanelId) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function exitPanelEditor(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard.getModel();\n    const { getPanel, getSourcePanel, shouldDiscardChanges } = getStore().panelEditor;\n    const panel = getPanel();\n\n    if (dashboard) {\n      dashboard.exitPanelEditor();\n    }\n\n    const sourcePanel = getSourcePanel();\n    if (hasPanelChangedInPanelEdit(panel) && !shouldDiscardChanges) {\n      const modifiedSaveModel = panel.getSaveModel();\n      const panelTypeChanged = sourcePanel.type !== panel.type;\n\n      dispatch(updateDuplicateLibraryPanels(panel, dashboard));\n\n      sourcePanel.restoreModel(modifiedSaveModel);\n      sourcePanel.configRev++; // force check the configs\n\n      if (panelTypeChanged) {\n        // Loaded plugin is not included in the persisted properties so is not handled by restoreModel\n        sourcePanel.plugin = panel.plugin;\n        sourcePanel.generateNewKey();\n\n        await dispatch(panelModelAndPluginReady({ key: sourcePanel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        sourcePanel.getQueryRunner().useLastResultFrom(panel.getQueryRunner());\n        sourcePanel.render();\n\n        // If all changes where saved then reset configRev after applying changes\n        if (panel.hasSavedPanelEditChange && !panel.hasChanged) {\n          sourcePanel.configRev = 0;\n        }\n      }, 20);\n    }\n\n    // A new panel is only new until the first time we exit the panel editor\n    if (sourcePanel.isNew) {\n      if (!shouldDiscardChanges) {\n        delete sourcePanel.isNew;\n      } else {\n        dashboard && removePanel(dashboard, sourcePanel, true);\n      }\n    }\n\n    dispatch(cleanUpPanelState(panel.key));\n    dispatch(closeEditor());\n  };\n}\n\nfunction hasPanelChangedInPanelEdit(panel: PanelModel) {\n  return panel.hasChanged || panel.hasSavedPanelEditChange || panel.isAngularPlugin();\n}\n\nexport function updatePanelEditorUIState(uiState: Partial<PanelEditorUIState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().panelEditor.ui, ...uiState };\n    dispatch(setPanelEditorUIState(nextState));\n    try {\n      store.setObject(PANEL_EDITOR_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Button, Modal } from '@grafana/ui';\n\nimport { DashboardModel } from '../../state';\n\nimport { SaveDashboardButton } from './SaveDashboardButton';\n\ninterface UnsavedChangesModalProps {\n  dashboard: DashboardModel;\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveSuccess?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ dashboard, onSaveSuccess, onDiscard, onDismiss }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={true}\n      title=\"Unsaved changes\"\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={css`\n        width: 500px;\n      `}\n    >\n      <h5>Do you want to save your changes?</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard\n        </Button>\n        <SaveDashboardButton dashboard={dashboard} onSaveSuccess={onSaveSuccess} />\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { find } from 'lodash';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema';\nimport { ModalsContext } from '@grafana/ui';\nimport { appEvents } from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { useDispatch } from 'app/types';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { discardPanelChanges, exitPanelEditor } from '../PanelEditor/state/actions';\nimport { UnsavedChangesModal } from '../SaveDashboard/UnsavedChangesModal';\n\nexport interface Props {\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  original: object | null;\n  originalPath?: string;\n}\n\nexport const DashboardPrompt = React.memo(({ dashboard }: Props) => {\n  const [state, setState] = useState<State>({ original: null });\n  const dispatch = useDispatch();\n  const { original, originalPath } = state;\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    // This timeout delay is to wait for panels to load and migrate scheme before capturing the original state\n    // This is to minimize unsaved changes warnings due to automatic schema migrations\n    const timeoutId = setTimeout(() => {\n      const originalPath = locationService.getLocation().pathname;\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    }, 1000);\n\n    const savedEventUnsub = appEvents.subscribe(DashboardSavedEvent, () => {\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    });\n\n    return () => {\n      clearTimeout(timeoutId);\n      savedEventUnsub.unsubscribe();\n    };\n  }, [dashboard, originalPath]);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard, original)) {\n        return;\n      }\n      if (hasChanges(dashboard, original)) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard, original]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelInEdit = dashboard.panelInEdit;\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelInEdit && panelInEdit.libraryPanel && panelInEdit.hasChanged && !search.has('editPanel')) {\n      showModal(SaveLibraryPanelModal, {\n        isUnsavedPrompt: true,\n        panel: dashboard.panelInEdit as PanelModelWithLibraryPanel,\n        folderUid: dashboard.meta.folderUid ?? '',\n        onConfirm: () => {\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          dispatch(discardPanelChanges());\n          moveToBlockedLocationAfterReactStateUpdate(location);\n          hideModal();\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname || !original) {\n      // This is here due to timing reasons we want the exit panel editor state changes to happen before router update\n      if (panelInEdit && !search.has('editPanel')) {\n        dispatch(exitPanelEditor());\n      }\n\n      return true;\n    }\n\n    if (ignoreChanges(dashboard, original)) {\n      return true;\n    }\n\n    if (!hasChanges(dashboard, original)) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard: dashboard,\n      onSaveSuccess: () => {\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDiscard: () => {\n        setState({ ...state, original: null });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(current: DashboardModel | null, original: object | null) {\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if ((original as DashboardModel).version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!current) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = current.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n\n/**\n * Remove stuff that should not count in diff\n */\nfunction cleanDashboardFromIgnoredChanges(dashData: Dashboard) {\n  // need to new up the domain model class to get access to expand / collapse row logic\n  const model = new DashboardModel(dashData);\n\n  // Expand all rows before making comparison. This is required because row expand / collapse\n  // change order of panel array and panel positions.\n  model.expandRows();\n\n  const dash = model.getSaveModelClone();\n\n  // ignore time and refresh\n  delete dash.time;\n  delete dash.refresh;\n  dash.schemaVersion = 0;\n  delete dash.timezone;\n\n  dash.panels = [];\n\n  // ignore template variable values\n  if (dash.templating?.list) {\n    for (const variable of dash.templating.list) {\n      delete variable.current;\n      delete variable.options;\n      // @ts-expect-error\n      delete variable.filters;\n    }\n  }\n\n  return dash;\n}\n\n// TODO: Adapt original to be Dashboard type instead\nexport function hasChanges(current: DashboardModel, original: unknown) {\n  if (current.hasUnsavedChanges()) {\n    return true;\n  }\n\n  // TODO: Make getSaveModelClone return Dashboard type instead\n  const currentClean = cleanDashboardFromIgnoredChanges(current.getSaveModelCloneOld() as unknown as Dashboard);\n  const originalClean = cleanDashboardFromIgnoredChanges(original as Dashboard);\n\n  const currentTimepicker = find((currentClean as any).nav, { type: 'timepicker' });\n  const originalTimepicker = find((originalClean as any).nav, { type: 'timepicker' });\n\n  if (currentTimepicker && originalTimepicker) {\n    currentTimepicker.now = originalTimepicker.now;\n  }\n\n  const currentJson = JSON.stringify(currentClean, null);\n  const originalJson = JSON.stringify(originalClean, null);\n\n  return currentJson !== originalJson;\n}\n","import saveAs from 'file-saver';\n\nimport { dateTimeFormat, formattedValueToString, getValueFormat, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { SceneObject } from '@grafana/scenes';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport { Randomize } from 'app/features/dashboard-scene/inspect/HelpWizard/randomizer';\nimport { createDashboardSceneFromDashboardModel } from 'app/features/dashboard-scene/serialization/transformSaveModelToScene';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { setDashboardToFetchFromLocalStorage } from '../../state/initDashboard';\n\nimport { getDebugDashboard, getGithubMarkdown } from './utils';\n\ninterface SupportSnapshotState {\n  currentTab: SnapshotTab;\n  showMessage: ShowMessage;\n  options: Array<SelectableValue<ShowMessage>>;\n  snapshotText: string;\n  markdownText: string;\n  snapshotSize?: string;\n  randomize: Randomize;\n  loading?: boolean;\n  error?: {\n    title: string;\n    message: string;\n  };\n  panel: PanelModel;\n  panelTitle: string;\n\n  // eslint-disable-next-line\n  snapshot?: any;\n  snapshotUpdate: number;\n  scene?: SceneObject;\n}\n\nexport enum SnapshotTab {\n  Support,\n  Data,\n}\n\nexport enum ShowMessage {\n  PanelSnapshot,\n  GithubComment,\n}\n\nexport class SupportSnapshotService extends StateManagerBase<SupportSnapshotState> {\n  constructor(panel: PanelModel) {\n    super({\n      panel,\n      panelTitle: panel.replaceVariables(panel.title, undefined, 'text') || 'Panel',\n      currentTab: SnapshotTab.Support,\n      showMessage: ShowMessage.GithubComment,\n      snapshotText: '',\n      markdownText: '',\n      randomize: {},\n      snapshotUpdate: 0,\n      options: [\n        {\n          label: 'GitHub comment',\n          description: 'Copy and paste this message into a GitHub issue or comment',\n          value: ShowMessage.GithubComment,\n        },\n        {\n          label: 'Panel support snapshot',\n          description: 'Dashboard JSON used to help troubleshoot visualization issues',\n          value: ShowMessage.PanelSnapshot,\n        },\n      ],\n    });\n  }\n\n  async buildDebugDashboard() {\n    const { panel, randomize, snapshotUpdate } = this.state;\n    const snapshot = await getDebugDashboard(panel, randomize, getTimeSrv().timeRange());\n    const snapshotText = JSON.stringify(snapshot, null, 2);\n    const markdownText = getGithubMarkdown(panel, snapshotText);\n    const snapshotSize = formattedValueToString(getValueFormat('bytes')(snapshotText?.length ?? 0));\n\n    let scene: SceneObject | undefined = undefined;\n\n    if (!panel.isAngularPlugin()) {\n      try {\n        const oldModel = new DashboardModel(snapshot, { isEmbedded: true });\n        const dash = createDashboardSceneFromDashboardModel(oldModel);\n        scene = dash.state.body; // skip the wrappers\n      } catch (ex) {\n        console.log('Error creating scene:', ex);\n      }\n    }\n\n    this.setState({ snapshot, snapshotText, markdownText, snapshotSize, snapshotUpdate: snapshotUpdate + 1, scene });\n  }\n\n  onCurrentTabChange = (value: SnapshotTab) => {\n    this.setState({ currentTab: value });\n  };\n\n  onShowMessageChange = (value: SelectableValue<ShowMessage>) => {\n    this.setState({ showMessage: value.value! });\n  };\n\n  onGetMarkdownForClipboard = () => {\n    const { markdownText } = this.state;\n    const maxLen = Math.pow(1024, 2) * 1.5; // 1.5MB\n\n    if (markdownText.length > maxLen) {\n      this.setState({\n        error: {\n          title: 'Copy to clipboard failed',\n          message: 'Snapshot is too large, consider download and attaching a file instead',\n        },\n      });\n\n      return '';\n    }\n\n    return markdownText;\n  };\n\n  onDownloadDashboard = () => {\n    const { snapshotText, panelTitle } = this.state;\n    const blob = new Blob([snapshotText], {\n      type: 'text/plain',\n    });\n    const fileName = `debug-${panelTitle}-${dateTimeFormat(new Date())}.json.txt`;\n    saveAs(blob, fileName);\n  };\n\n  onSetSnapshotText = (snapshotText: string) => {\n    this.setState({ snapshotText });\n  };\n\n  onToggleRandomize = (k: keyof Randomize) => {\n    const { randomize } = this.state;\n    this.setState({ randomize: { ...randomize, [k]: !randomize[k] } });\n  };\n\n  onPreviewDashboard = () => {\n    const { snapshot } = this.state;\n    if (snapshot) {\n      setDashboardToFetchFromLocalStorage({ meta: {}, dashboard: snapshot });\n      global.open(config.appUrl + 'dashboard/new', '_blank');\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { PanelPlugin, GrafanaTheme2, FeatureState } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Drawer,\n  Tab,\n  TabsBar,\n  CodeEditor,\n  useStyles2,\n  Field,\n  HorizontalGroup,\n  InlineSwitch,\n  Button,\n  Spinner,\n  Alert,\n  FeatureBadge,\n  Select,\n  ClipboardButton,\n  Icon,\n  Stack,\n} from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { AccessControlAction } from 'app/types';\n\nimport { ShowMessage, SnapshotTab, SupportSnapshotService } from './SupportSnapshotService';\n\ninterface Props {\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  onClose: () => void;\n}\n\nexport function HelpWizard({ panel, plugin, onClose }: Props) {\n  const styles = useStyles2(getStyles);\n  const service = useMemo(() => new SupportSnapshotService(panel), [panel]);\n\n  const {\n    currentTab,\n    loading,\n    error,\n    options,\n    showMessage,\n    snapshotSize,\n    markdownText,\n    snapshotText,\n    randomize,\n    panelTitle,\n    scene,\n  } = service.useState();\n\n  useEffect(() => {\n    service.buildDebugDashboard();\n  }, [service, plugin, randomize]);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const tabs = [\n    { label: 'Snapshot', value: SnapshotTab.Support },\n    { label: 'Data', value: SnapshotTab.Data },\n  ];\n\n  const hasSupportBundleAccess =\n    config.supportBundlesEnabled && contextSrv.hasPermission(AccessControlAction.ActionSupportBundlesCreate);\n\n  return (\n    <Drawer\n      title={`Get help with this panel`}\n      size=\"lg\"\n      onClose={onClose}\n      subtitle={\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <FeatureBadge featureState={FeatureState.beta} />\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/troubleshooting/\"\n              target=\"blank\"\n              className=\"external-link\"\n              rel=\"noopener noreferrer\"\n            >\n              Troubleshooting docs <Icon name=\"external-link-alt\" />\n            </a>\n          </Stack>\n          <span className=\"muted\">\n            To request troubleshooting help, send a snapshot of this panel to Grafana Labs Technical Support. The\n            snapshot contains query response data and panel settings.\n          </span>\n          {hasSupportBundleAccess && (\n            <span className=\"muted\">\n              You can also retrieve a support bundle containing information concerning your Grafana instance and\n              configured datasources in the <a href=\"/support-bundles\">support bundles section</a>.\n            </span>\n          )}\n        </Stack>\n      }\n      tabs={\n        <TabsBar>\n          {tabs.map((t, index) => (\n            <Tab\n              key={`${t.value}-${index}`}\n              label={t.label}\n              active={t.value === currentTab}\n              onChangeTab={() => service.onCurrentTabChange(t.value!)}\n            />\n          ))}\n        </TabsBar>\n      }\n    >\n      {loading && <Spinner />}\n      {error && <Alert title={error.title}>{error.message}</Alert>}\n\n      {currentTab === SnapshotTab.Data && (\n        <div className={styles.code}>\n          <div className={styles.opts}>\n            <Field label=\"Template\" className={styles.field}>\n              <Select options={options} value={showMessage} onChange={service.onShowMessageChange} />\n            </Field>\n\n            {showMessage === ShowMessage.GithubComment ? (\n              <ClipboardButton icon=\"copy\" getText={service.onGetMarkdownForClipboard}>\n                Copy to clipboard\n              </ClipboardButton>\n            ) : (\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Download ({snapshotSize})\n              </Button>\n            )}\n          </div>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language={showMessage === ShowMessage.GithubComment ? 'markdown' : 'json'}\n                showLineNumbers={true}\n                showMiniMap={true}\n                value={showMessage === ShowMessage.GithubComment ? markdownText : snapshotText}\n                readOnly={false}\n                onBlur={service.onSetSnapshotText}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      )}\n      {currentTab === SnapshotTab.Support && (\n        <>\n          <Field\n            label=\"Randomize data\"\n            description=\"Modify the original data to hide sensitve information.  Note the lengths will stay the same, and duplicate values will be equal.\"\n          >\n            <HorizontalGroup>\n              <InlineSwitch\n                label=\"Labels\"\n                id=\"randomize-labels\"\n                showLabel={true}\n                value={Boolean(randomize.labels)}\n                onChange={() => service.onToggleRandomize('labels')}\n              />\n              <InlineSwitch\n                label=\"Field names\"\n                id=\"randomize-field-names\"\n                showLabel={true}\n                value={Boolean(randomize.names)}\n                onChange={() => service.onToggleRandomize('names')}\n              />\n              <InlineSwitch\n                label=\"String values\"\n                id=\"randomize-string-values\"\n                showLabel={true}\n                value={Boolean(randomize.values)}\n                onChange={() => service.onToggleRandomize('values')}\n              />\n            </HorizontalGroup>\n          </Field>\n\n          <Field label=\"Support snapshot\" description={`Panel: ${panelTitle}`}>\n            <Stack>\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Dashboard ({snapshotSize})\n              </Button>\n              <ClipboardButton\n                icon=\"github\"\n                getText={service.onGetMarkdownForClipboard}\n                title=\"Copy a complete GitHub comment to the clipboard\"\n              >\n                Copy to clipboard\n              </ClipboardButton>\n              <Button\n                onClick={service.onPreviewDashboard}\n                variant=\"secondary\"\n                title=\"Open support snapshot dashboard in a new tab\"\n              >\n                Preview\n              </Button>\n            </Stack>\n          </Field>\n\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <div style={{ height, overflow: 'auto' }}>{scene && <scene.Component model={scene} />}</div>\n            )}\n          </AutoSizer>\n        </>\n      )}\n    </Drawer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  code: css`\n    flex-grow: 1;\n    height: 100%;\n    overflow: scroll;\n  `,\n  field: css`\n    width: 100%;\n  `,\n  opts: css`\n    display: flex;\n    display: flex;\n    width: 100%;\n    flex-grow: 0;\n    align-items: center;\n    justify-content: flex-end;\n\n    button {\n      margin-left: 8px;\n    }\n  `,\n});\n","import { useEffect, useRef, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { PanelModel } from '../../state';\n\ninterface UsePanelLatestData {\n  data?: PanelData;\n  hasError: boolean;\n  isLoading: boolean;\n  hasSeries: boolean;\n}\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (\n  panel: PanelModel,\n  options: GetDataOptions,\n  checkSchema?: boolean\n): UsePanelLatestData => {\n  const querySubscription = useRef<Unsubscribable>();\n  const [latestData, setLatestData] = useState<PanelData>();\n\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n\n    querySubscription.current = panel\n      .getQueryRunner()\n      // We apply field config later\n      .getData({ withTransforms: options.withTransforms, withFieldConfig: false })\n      .subscribe({\n        next: (data) => {\n          if (checkSchema) {\n            if (lastRev === data.structureRev) {\n              const now = Date.now();\n              const elapsed = now - lastUpdate;\n              if (elapsed < 10000) {\n                return; // avoid updates if the schema has not changed for 10s\n              }\n              lastUpdate = now;\n            }\n            lastRev = data.structureRev ?? -1;\n          }\n          setLatestData(data);\n        },\n      });\n\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withTransforms]);\n\n  return {\n    data: latestData,\n    isLoading: latestData?.state === LoadingState.Loading,\n    hasSeries: latestData ? !!latestData.series : false,\n    hasError: Boolean(\n      latestData && (latestData.error || latestData?.errors?.length || latestData.state === LoadingState.Error)\n    ),\n  };\n};\n","import React from 'react';\n\nimport { DataSourceApi, PanelData } from '@grafana/data';\nimport { Trans } from 'app/core/internationalization';\n\ninterface InspectMetadataTabProps {\n  data: PanelData;\n  metadataDatasource?: DataSourceApi;\n}\nexport const InspectMetadataTab = ({ data, metadataDatasource }: InspectMetadataTabProps) => {\n  if (!metadataDatasource || !metadataDatasource.components?.MetadataInspector) {\n    return <Trans i18nKey=\"dashboard.inspect-meta.no-inspector\">No Metadata Inspector</Trans>;\n  }\n  return <metadataDatasource.components.MetadataInspector datasource={metadataDatasource} data={data.series} />;\n};\n","import { isEmpty } from 'lodash';\nimport React, { useState } from 'react';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  formattedValueToString,\n  getValueFormat,\n  PanelData,\n  PanelPlugin,\n  LoadingState,\n  DataQueryError,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  defaultTab?: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  // The last raw response\n  data?: PanelData;\n  isDataLoading: boolean;\n  dataOptions: GetDataOptions;\n  // If the datasource supports custom metadata\n  metadataDatasource?: DataSourceApi;\n  onDataOptionsChange: (options: GetDataOptions) => void;\n  onClose: () => void;\n}\n\nexport const InspectContent = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose,\n}: Props) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab ?? InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  let errors = getErrors(data);\n\n  // Validate that the active tab is actually valid and allowed\n  let activeTab = currentTab;\n  if (!tabs.find((item) => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const panelTitle = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text') || 'Panel';\n  const title = t('dashboard.inspect.title', 'Inspect: {{panelTitle}}', { panelTitle });\n\n  return (\n    <Drawer\n      title={title}\n      subtitle={data && formatStats(data)}\n      onClose={onClose}\n      tabs={\n        <TabsBar>\n          {tabs.map((tab, index) => {\n            return (\n              <Tab\n                key={`${tab.value}-${index}`}\n                label={tab.label}\n                active={tab.value === activeTab}\n                onChangeTab={() => setCurrentTab(tab.value || InspectTab.Data)}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {activeTab === InspectTab.Data && (\n        <InspectDataTab\n          dataName={panel.getDisplayTitle()}\n          panelPluginId={panel.type}\n          fieldConfig={panel.fieldConfig}\n          hasTransformations={Boolean(panel.transformations?.length)}\n          data={data && data.series}\n          isLoading={isDataLoading}\n          options={dataOptions}\n          onOptionsChange={onDataOptionsChange}\n          timeZone={dashboard.timezone}\n          app={CoreApp.Dashboard}\n        />\n      )}\n      {data && activeTab === InspectTab.Meta && (\n        <InspectMetadataTab data={data} metadataDatasource={metadataDatasource} />\n      )}\n\n      {activeTab === InspectTab.JSON && (\n        <InspectJSONTab panel={panel} dashboard={dashboard} data={data} onClose={onClose} />\n      )}\n      {activeTab === InspectTab.Error && <InspectErrorTab errors={errors} />}\n      {data && activeTab === InspectTab.Stats && <InspectStatsTab data={data} timeZone={dashboard.getTimezone()} />}\n      {data && activeTab === InspectTab.Query && <QueryInspector data={data} onRefreshQuery={() => panel.refresh()} />}\n    </Drawer>\n  );\n};\n\n// This will combine\nfunction getErrors(data: PanelData | undefined): DataQueryError[] {\n  let errors = data?.errors ?? [];\n  if (data?.error && !errors.includes(data.error)) {\n    errors = [data.error, ...errors];\n  }\n  if (!errors.length && data?.state === LoadingState.Error) {\n    return [\n      {\n        message: 'Error loading data',\n      },\n    ];\n  }\n  return errors;\n}\n\nfunction formatStats(data: PanelData) {\n  const { request } = data;\n\n  if (!request || isEmpty(request)) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return (\n    <Trans i18nKey=\"dashboard.inspect.subtitle\">\n      {{ queryCount }} queries with total query time of {{ formatted }}\n    </Trans>\n  );\n}\n","import React, { useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { HelpWizard } from '../HelpWizard/HelpWizard';\nimport { usePanelLatestData } from '../PanelEditor/usePanelLatestData';\n\nimport { InspectContent } from './InspectContent';\nimport { useDatasourceMetadata, useInspectTabs } from './hooks';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport type Props = OwnProps & ConnectedProps;\n\nconst PanelInspectorUnconnected = ({ panel, dashboard, plugin }: Props) => {\n  const location = useLocation();\n  const defaultTab = new URLSearchParams(location.search).get('inspectTab') as InspectTab;\n  const [dataOptions, setDataOptions] = useState<GetDataOptions>({\n    withTransforms: defaultTab === InspectTab.Error,\n    withFieldConfig: true,\n  });\n\n  const { data, isLoading, hasError } = usePanelLatestData(panel, dataOptions, false);\n  const metaDs = useDatasourceMetadata(data);\n  const tabs = useInspectTabs(panel, dashboard, plugin, hasError, metaDs);\n\n  const onClose = () => {\n    locationService.partial({\n      inspect: null,\n      inspectTab: null,\n    });\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  if (defaultTab === InspectTab.Help) {\n    return <HelpWizard panel={panel} plugin={plugin} onClose={onClose} />;\n  }\n\n  return (\n    <InspectContent\n      dashboard={dashboard}\n      panel={panel}\n      plugin={plugin}\n      defaultTab={defaultTab}\n      tabs={tabs}\n      data={data}\n      isDataLoading={isLoading}\n      dataOptions={dataOptions}\n      onDataOptionsChange={setDataOptions}\n      metadataDatasource={metaDs}\n      onClose={onClose}\n    />\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = getPanelStateForModel(state, props.panel);\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nexport const PanelInspector = connect(mapStateToProps)(PanelInspectorUnconnected);\n","import React, { PropsWithChildren, ReactElement, useMemo } from 'react';\n\nimport { TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip } from '@grafana/ui';\n\nimport { variableAdapters } from '../adapters';\nimport { VARIABLE_PREFIX } from '../constants';\n\ninterface Props {\n  variable: TypedVariableModel;\n  readOnly?: boolean;\n}\n\nexport const PickerRenderer = (props: Props) => {\n  const PickerToRender = useMemo(() => variableAdapters.get(props.variable.type).picker, [props.variable]);\n\n  if (!props.variable) {\n    return <div>Couldn&apos;t load variable</div>;\n  }\n\n  return (\n    <div className=\"gf-form\">\n      <PickerLabel variable={props.variable} />\n      {props.variable.hide !== VariableHide.hideVariable && PickerToRender && (\n        <PickerToRender variable={props.variable} readOnly={props.readOnly ?? false} />\n      )}\n    </div>\n  );\n};\n\nfunction PickerLabel({ variable }: PropsWithChildren<Props>): ReactElement | null {\n  const labelOrName = useMemo(() => variable.label || variable.name, [variable]);\n\n  if (variable.hide !== VariableHide.dontHide) {\n    return null;\n  }\n\n  const elementId = VARIABLE_PREFIX + variable.id;\n  if (variable.description) {\n    return (\n      <Tooltip content={variable.description} placement={'bottom'}>\n        <label\n          className=\"gf-form-label gf-form-label--variable\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n          htmlFor={elementId}\n        >\n          {labelOrName}\n        </label>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <label\n      className=\"gf-form-label gf-form-label--variable\"\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n      htmlFor={elementId}\n    >\n      {labelOrName}\n    </label>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { PickerRenderer } from '../../../variables/pickers/PickerRenderer';\n\ninterface Props {\n  variables: TypedVariableModel[];\n  readOnly?: boolean;\n}\n\nexport const SubMenuItems = ({ variables, readOnly }: Props) => {\n  const [visibleVariables, setVisibleVariables] = useState<TypedVariableModel[]>([]);\n\n  useEffect(() => {\n    setVisibleVariables(variables.filter((state) => state.hide !== VariableHide.hideVariable));\n  }, [variables]);\n\n  if (visibleVariables.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {visibleVariables.map((variable) => (\n        <div\n          key={variable.id}\n          className=\"submenu-item gf-form-inline\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}\n        >\n          <PickerRenderer variable={variable} readOnly={readOnly} />\n        </div>\n      ))}\n    </>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { StoreState } from 'app/types';\n\nimport { getPanelPluginNotFound } from '../../panel/components/PanelPluginError';\n\nexport const getPanelPluginWithFallback =\n  (panelType: string) =>\n  (state: StoreState): PanelPlugin => {\n    const plugin = state.plugins.panels[panelType];\n    return plugin || getPanelPluginNotFound(`Panel plugin not found (${panelType})`, true);\n  };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ToolbarButton, ButtonGroup } from '@grafana/ui';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { PanelModel } from '../../state';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { updatePanelEditorUIState } from './state/actions';\nimport { toggleVizPicker } from './state/reducers';\n\ntype Props = {\n  panel: PanelModel;\n};\n\nexport const VisualizationButton = ({ panel }: Props) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const isPanelOptionsVisible = useSelector((state) => state.panelEditor.ui.isPanelOptionsVisible);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n\n  const onToggleOpen = () => {\n    dispatch(toggleVizPicker(!isVizPickerOpen));\n  };\n\n  const onToggleOptionsPane = () => {\n    dispatch(updatePanelEditorUIState({ isPanelOptionsVisible: !isPanelOptionsVisible }));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <ButtonGroup>\n        <ToolbarButton\n          className={styles.vizButton}\n          tooltip=\"Click to change visualization\"\n          imgSrc={plugin.meta.info.logos.small}\n          isOpen={isVizPickerOpen}\n          onClick={onToggleOpen}\n          data-testid={selectors.components.PanelEditor.toggleVizPicker}\n          aria-label=\"Change Visualization\"\n          variant=\"canvas\"\n          fullWidth\n        >\n          {plugin.meta.name}\n        </ToolbarButton>\n        <ToolbarButton\n          tooltip={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n          icon={isPanelOptionsVisible ? 'angle-right' : 'angle-left'}\n          onClick={onToggleOptionsPane}\n          variant=\"canvas\"\n          data-testid={selectors.components.PanelEditor.toggleVizOptions}\n          aria-label={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n        />\n      </ButtonGroup>\n    </div>\n  );\n};\n\nVisualizationButton.displayName = 'VisualizationTab';\n\nconst styles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  vizButton: css`\n    text-align: left;\n  `,\n};\n","import React from 'react';\n\nimport { ConfirmModal } from '@grafana/ui';\n\nimport { PanelModel } from '../../../dashboard/state';\nimport { isPanelModelLibraryPanel } from '../../guard';\n\nexport interface ChangeLibraryPanelModalProps {\n  panel: PanelModel;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const ChangeLibraryPanelModal = ({ onConfirm, onDismiss, panel }: ChangeLibraryPanelModalProps): JSX.Element => {\n  const isLibraryPanel = isPanelModelLibraryPanel(panel);\n  const title = `${isLibraryPanel ? 'Changing' : 'Replace with'} library panel`;\n  const body = `${\n    isLibraryPanel ? 'Changing' : 'Replacing with a'\n  } library panel will remove any changes since last save.`;\n  return (\n    <ConfirmModal\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n      confirmText={isLibraryPanel ? 'Change' : 'Replace'}\n      title={title}\n      body={body}\n      dismissText=\"Cancel\"\n      isOpen={true}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { PanelPluginMeta } from '@grafana/data';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\nimport { useDispatch } from 'app/types';\n\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryElementDTO } from '../../types';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\ninterface Props {\n  panel: PanelModel;\n  searchQuery: string;\n  isWidget?: boolean;\n}\n\nexport const PanelLibraryOptionsGroup = ({ panel, searchQuery, isWidget = false }: Props) => {\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState<LibraryElementDTO | undefined>(undefined);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n  const onPanelFilterChange = useCallback(\n    (plugins: PanelPluginMeta[]) => {\n      setPanelFilter(plugins.map((p) => p.id));\n    },\n    [setPanelFilter]\n  );\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => setShowingAddPanelModal(true);\n  const onDismissChangeToPanel = () => setChangeToPanel(undefined);\n  return (\n    <VerticalGroup spacing=\"md\">\n      {!panel.libraryPanel && (\n        <VerticalGroup align=\"center\">\n          <Button icon=\"plus\" onClick={onAddToPanelLibrary} variant=\"secondary\" fullWidth>\n            Create new library panel\n          </Button>\n        </VerticalGroup>\n      )}\n\n      <PanelTypeFilter onChange={onPanelFilterChange} isWidget={isWidget} />\n\n      <div className={styles.libraryPanelsView}>\n        <LibraryPanelsView\n          currentPanelId={panel.libraryPanel?.uid}\n          searchString={searchQuery}\n          panelFilter={panelFilter}\n          onClickCard={setChangeToPanel}\n          showSecondaryActions\n          isWidget={isWidget}\n        />\n      </div>\n\n      {showingAddPanelModal && (\n        <AddLibraryPanelModal\n          panel={panel}\n          onDismiss={() => setShowingAddPanelModal(false)}\n          initialFolderUid={dashboard?.meta.folderUid}\n          isOpen={showingAddPanelModal}\n        />\n      )}\n\n      {changeToPanel && (\n        <ChangeLibraryPanelModal panel={panel} onDismiss={onDismissChangeToPanel} onConfirm={useLibraryPanel} />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst styles = {\n  libraryPanelsView: css`\n    width: 100%;\n  `,\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, CustomScrollbar, FilterInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { Field } from '@grafana/ui/src/components/Forms/Field';\nimport { LS_VISUALIZATION_SELECT_TAB_KEY, LS_WIDGET_SELECT_TAB_KEY } from 'app/core/constants';\nimport { PanelLibraryOptionsGroup } from 'app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup';\nimport { VisualizationSuggestions } from 'app/features/panel/components/VizTypePicker/VisualizationSuggestions';\nimport { VizTypeChangeDetails } from 'app/features/panel/components/VizTypePicker/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { VizTypePicker } from '../../../panel/components/VizTypePicker/VizTypePicker';\nimport { changePanelPlugin } from '../../../panel/state/actions';\nimport { PanelModel } from '../../state/PanelModel';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { toggleVizPicker } from './state/reducers';\nimport { VisualizationSelectPaneTab } from './types';\n\ninterface Props {\n  panel: PanelModel;\n  data?: PanelData;\n}\n\nexport const VisualizationSelectPane = ({ panel, data }: Props) => {\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Add support to show widgets in the visualization picker\n  const isWidget = !!plugin.meta.skipDataQuery;\n  const isWidgetEnabled = Boolean(isWidget && config.featureToggles.vizAndWidgetSplit);\n\n  const tabKey = isWidgetEnabled ? LS_WIDGET_SELECT_TAB_KEY : LS_VISUALIZATION_SELECT_TAB_KEY;\n  const defaultTab = isWidgetEnabled ? VisualizationSelectPaneTab.Widgets : VisualizationSelectPaneTab.Visualizations;\n\n  const [listMode, setListMode] = useLocalStorage(tabKey, defaultTab);\n\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n\n  const onVizChange = useCallback(\n    (pluginChange: VizTypeChangeDetails) => {\n      dispatch(changePanelPlugin({ panel: panel, ...pluginChange }));\n\n      // close viz picker unless a mod key is pressed while clicking\n      if (!pluginChange.withModKey) {\n        dispatch(toggleVizPicker(false));\n      }\n    },\n    [dispatch, panel]\n  );\n\n  const onCloseVizPicker = () => {\n    dispatch(toggleVizPicker(false));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  const radioOptions: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Visualizations', value: VisualizationSelectPaneTab.Visualizations },\n    { label: 'Suggestions', value: VisualizationSelectPaneTab.Suggestions },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  const radioOptionsWidgetFlow: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Widgets', value: VisualizationSelectPaneTab.Widgets },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  return (\n    <div className={styles.openWrapper}>\n      <div className={styles.formBox}>\n        <div className={styles.searchRow}>\n          <FilterInput\n            value={searchQuery}\n            onChange={setSearchQuery}\n            ref={searchRef}\n            autoFocus={true}\n            placeholder=\"Search for...\"\n          />\n          <Button\n            title=\"Close\"\n            variant=\"secondary\"\n            icon=\"angle-up\"\n            className={styles.closeButton}\n            aria-label={selectors.components.PanelEditor.toggleVizPicker}\n            onClick={onCloseVizPicker}\n          />\n        </div>\n        <Field className={styles.customFieldMargin}>\n          <RadioButtonGroup\n            options={isWidgetEnabled ? radioOptionsWidgetFlow : radioOptions}\n            value={listMode}\n            onChange={setListMode}\n            fullWidth\n          />\n        </Field>\n      </div>\n      <div className={styles.scrollWrapper}>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <div className={styles.scrollContent}>\n            {listMode === VisualizationSelectPaneTab.Visualizations && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} />\n            )}\n            {listMode === VisualizationSelectPaneTab.Widgets && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} isWidget />\n            )}\n\n            {listMode === VisualizationSelectPaneTab.Suggestions && (\n              <VisualizationSuggestions onChange={onVizChange} searchQuery={searchQuery} panel={panel} data={data} />\n            )}\n            {listMode === VisualizationSelectPaneTab.LibraryPanels && (\n              <PanelLibraryOptionsGroup\n                searchQuery={searchQuery}\n                panel={panel}\n                key=\"Panel Library\"\n                isWidget={isWidget}\n              />\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    </div>\n  );\n};\n\nVisualizationSelectPane.displayName = 'VisualizationSelectPane';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css`\n      color: ${theme.v1.palette.gray33};\n    `,\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 0;\n      height: 100%;\n    `,\n    vizButton: css`\n      text-align: left;\n    `,\n    scrollWrapper: css`\n      flex-grow: 1;\n      min-height: 0;\n    `,\n    scrollContent: css`\n      padding: ${theme.spacing(1)};\n    `,\n    openWrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 100%;\n      height: 100%;\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n    `,\n    searchRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    closeButton: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    customFieldMargin: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    formBox: css`\n      padding: ${theme.spacing(1)};\n      padding-bottom: 0;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { useSelector } from 'app/types';\n\nimport { OptionsPaneOptions } from './OptionsPaneOptions';\nimport { VisualizationButton } from './VisualizationButton';\nimport { VisualizationSelectPane } from './VisualizationSelectPane';\nimport { OptionPaneRenderProps } from './types';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport const OptionsPane = ({\n  plugin,\n  panel,\n  onFieldConfigsChange,\n  onPanelOptionsChanged,\n  onPanelConfigChange,\n  dashboard,\n  instanceState,\n}: OptionPaneRenderProps) => {\n  const styles = useStyles2(getStyles);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, true);\n\n  return (\n    <div className={styles.wrapper} aria-label={selectors.components.PanelEditor.OptionsPane.content}>\n      {!isVizPickerOpen && (\n        <>\n          <div className={styles.vizButtonWrapper}>\n            <VisualizationButton panel={panel} />\n          </div>\n          <div className={styles.optionsWrapper}>\n            <OptionsPaneOptions\n              panel={panel}\n              dashboard={dashboard}\n              plugin={plugin}\n              instanceState={instanceState}\n              data={data}\n              onFieldConfigsChange={onFieldConfigsChange}\n              onPanelOptionsChanged={onPanelOptionsChanged}\n              onPanelConfigChange={onPanelConfigChange}\n            />\n          </div>\n        </>\n      )}\n      {isVizPickerOpen && <VisualizationSelectPane panel={panel} data={data} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      height: 100%;\n      width: 100%;\n      display: flex;\n      flex: 1 1 0;\n      flex-direction: column;\n      padding: 0;\n    `,\n    optionsWrapper: css`\n      flex-grow: 1;\n      min-height: 0;\n    `,\n    vizButtonWrapper: css`\n      padding: 0 ${theme.spacing(2, 2)} 0;\n    `,\n    legacyOptions: css`\n      label: legacy-options;\n      .panel-options-grid {\n        display: flex;\n        flex-direction: column;\n      }\n      .panel-options-group {\n        margin-bottom: 0;\n      }\n      .panel-options-group__body {\n        padding: ${theme.spacing(2)} 0;\n      }\n\n      .section {\n        display: block;\n        margin: ${theme.spacing(2)} 0;\n\n        &:first-child {\n          margin-top: 0;\n        }\n      }\n    `,\n  };\n};\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <button type=\"button\" className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </button>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { useEffect, useState } from 'react';\n\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport { Options } from 'app/plugins/panel/table/panelcfg.gen';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport interface Props {\n  width: number;\n  height: number;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport function PanelEditorTableView({ width, height, panel, dashboard }: Props) {\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, false);\n  const [options, setOptions] = useState<Options>({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true,\n  });\n\n  // Subscribe to panel event\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n      panel.runAllPanelQueries({\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        timeData,\n        width,\n      });\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n\n  const errorMessage = data?.errors\n    ? data.errors.length > 1\n      ? 'Multiple errors found. Click for more details'\n      : data.errors[0].message\n    : data?.error?.message;\n  return (\n    <PanelChrome width={width} height={height} padding=\"none\">\n      {(innerWidth, innerHeight) => (\n        <>\n          <PanelHeaderCorner panel={panel} error={errorMessage} />\n          <PanelRenderer\n            title=\"Raw data\"\n            pluginId=\"table\"\n            width={innerWidth}\n            height={innerHeight}\n            data={data}\n            options={options}\n            onOptionsChange={setOptions}\n          />\n        </>\n      )}\n    </PanelChrome>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Icon, ConfirmButton, Button } from '@grafana/ui';\n\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\n\nimport alertDef from './state/alertDef';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panelId: number;\n  onRefresh: () => void;\n}\n\ninterface State {\n  stateHistoryItems: any[];\n}\n\nclass StateHistory extends PureComponent<Props, State> {\n  state: State = {\n    stateHistoryItems: [],\n  };\n\n  componentDidMount(): void {\n    const { dashboard, panelId } = this.props;\n\n    getBackendSrv()\n      .get(\n        `/api/annotations?dashboardId=${dashboard.id}&panelId=${panelId}&limit=50&type=alert`,\n        {},\n        `state-history-${dashboard.id}-${panelId}`\n      )\n      .then((data) => {\n        const items = data.map((item: any) => {\n          return {\n            stateModel: alertDef.getStateDisplayModel(item.newState),\n            time: dashboard.formatDate(item.time, 'MMM D, YYYY HH:mm:ss'),\n            info: alertDef.getAlertAnnotationInfo(item),\n          };\n        });\n\n        this.setState({\n          stateHistoryItems: items,\n        });\n      });\n  }\n\n  clearHistory = async () => {\n    const { dashboard, panelId, onRefresh } = this.props;\n\n    await getBackendSrv().post('/api/annotations/mass-delete', {\n      dashboardId: dashboard.id,\n      panelId: panelId,\n    });\n\n    this.setState({ stateHistoryItems: [] });\n    onRefresh();\n  };\n\n  render() {\n    const { stateHistoryItems } = this.state;\n\n    return (\n      <div>\n        {stateHistoryItems.length > 0 && (\n          <div className=\"p-b-1\">\n            <span className=\"muted\">Last 50 state changes</span>\n            <ConfirmButton onConfirm={this.clearHistory} confirmVariant=\"destructive\" confirmText=\"Clear\">\n              <Button\n                className={css`\n                  direction: ltr;\n                `}\n                variant=\"destructive\"\n                icon=\"trash-alt\"\n              >\n                Clear history\n              </Button>\n            </ConfirmButton>\n          </div>\n        )}\n        <ol className=\"alert-rule-list\">\n          {stateHistoryItems.length > 0 ? (\n            stateHistoryItems.map((item, index) => {\n              return (\n                <li className=\"alert-rule-item\" key={`${item.time}-${index}`}>\n                  <div className={`alert-rule-item__icon ${item.stateModel.stateClass}`}>\n                    <Icon name={item.stateModel.iconClass} size=\"xl\" />\n                  </div>\n                  <div className=\"alert-rule-item__body\">\n                    <div className=\"alert-rule-item__header\">\n                      <p className=\"alert-rule-item__name\">{item.alertName}</p>\n                      <div className=\"alert-rule-item__text\">\n                        <span className={`${item.stateModel.stateClass}`}>{item.stateModel.text}</span>\n                      </div>\n                    </div>\n                    {item.info}\n                  </div>\n                  <div className=\"alert-rule-item__time\">{item.time}</div>\n                </li>\n              );\n            })\n          ) : (\n            <i>No state changes recorded</i>\n          )}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default StateHistory;\n","import React, { PureComponent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport {\n  LoadingPlaceholder,\n  JSONFormatter,\n  Icon,\n  HorizontalGroup,\n  ClipboardButton,\n  clearButtonStyles,\n  withTheme2,\n  Themeable2,\n} from '@grafana/ui';\n\nimport { DashboardModel, PanelModel } from '../dashboard/state';\n\nexport interface Props extends Themeable2 {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface State {\n  isLoading: boolean;\n  allNodesExpanded: boolean | null;\n  testRuleResponse: {};\n}\n\nclass UnThemedTestRuleResult extends PureComponent<Props, State> {\n  readonly state: State = {\n    isLoading: false,\n    allNodesExpanded: null,\n    testRuleResponse: {},\n  };\n\n  formattedJson: any;\n  clipboard: any;\n\n  componentDidMount() {\n    this.testRule();\n  }\n\n  async testRule() {\n    const { dashboard, panel } = this.props;\n\n    // dashboard save model\n    const model = dashboard.getSaveModelCloneOld();\n\n    // now replace panel to get current edits\n    model.panels = model.panels.map((dashPanel) => {\n      return dashPanel.id === panel.id ? panel.getSaveModel() : dashPanel;\n    });\n\n    const payload = { dashboard: model, panelId: panel.id };\n\n    this.setState({ isLoading: true });\n    const testRuleResponse = await getBackendSrv().post(`/api/alerts/test`, payload);\n    this.setState({ isLoading: false, testRuleResponse });\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  renderExpandCollapse = () => {\n    const { allNodesExpanded } = this.state;\n\n    const collapse = (\n      <>\n        <Icon name=\"minus-circle\" /> Collapse All\n      </>\n    );\n    const expand = (\n      <>\n        <Icon name=\"plus-circle\" /> Expand All\n      </>\n    );\n    return allNodesExpanded ? collapse : expand;\n  };\n\n  render() {\n    const { testRuleResponse, isLoading } = this.state;\n    const clearButton = clearButtonStyles(this.props.theme);\n\n    if (isLoading === true) {\n      return <LoadingPlaceholder text=\"Evaluating rule\" />;\n    }\n\n    const openNodes = this.getNrOfOpenNodes();\n\n    return (\n      <>\n        <div className=\"pull-right\">\n          <HorizontalGroup spacing=\"md\">\n            <button type=\"button\" className={clearButton} onClick={this.onToggleExpand}>\n              {this.renderExpandCollapse()}\n            </button>\n            <ClipboardButton getText={this.getTextForClipboard} icon=\"copy\">\n              Copy to Clipboard\n            </ClipboardButton>\n          </HorizontalGroup>\n        </div>\n\n        <JSONFormatter json={testRuleResponse} open={openNodes} onDidRender={this.setFormattedJson} />\n      </>\n    );\n  }\n}\n\nexport const TestRuleResult = withTheme2(UnThemedTestRuleResult);\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n\nimport { EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, config, getAngularLoader, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, ConfirmModal, Container, CustomScrollbar, HorizontalGroup, Modal } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { AppNotificationSeverity, StoreState } from 'app/types';\n\nimport { AlertState } from '../../plugins/datasource/alertmanager/types';\nimport { PanelNotSupported } from '../dashboard/components/PanelEditor/PanelNotSupported';\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport { PanelModel } from '../dashboard/state/PanelModel';\n\nimport StateHistory from './StateHistory';\nimport { TestRuleResult } from './TestRuleResult';\nimport { getAlertingValidationMessage } from './getAlertingValidationMessage';\n\ninterface AngularPanelController {\n  _enableAlert: () => void;\n  alertState: AlertState | null;\n  render: () => void;\n  refresh: () => void;\n}\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface ConnectedProps {\n  angularPanelComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  validationMessage: string;\n  showStateHistory: boolean;\n  showDeleteConfirmation: boolean;\n  showTestRule: boolean;\n}\n\nclass UnConnectedAlertTab extends PureComponent<Props, State> {\n  element?: HTMLDivElement | null;\n  component?: AngularComponent;\n  panelCtrl?: AngularPanelController;\n\n  state: State = {\n    validationMessage: '',\n    showStateHistory: false,\n    showDeleteConfirmation: false,\n    showTestRule: false,\n  };\n\n  async componentDidMount() {\n    if (config.angularSupportEnabled) {\n      await import(/* webpackChunkName: \"AlertTabCtrl\" */ 'app/features/alerting/AlertTabCtrl');\n      this.loadAlertTab();\n    } else {\n      // TODO probably need to migrate AlertTab to react\n      alert('Angular support disabled, legacy alerting cannot function without angular support');\n    }\n  }\n\n  onAngularPanelUpdated = () => {\n    this.forceUpdate();\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    this.loadAlertTab();\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  async loadAlertTab() {\n    const { panel, angularPanelComponent } = this.props;\n\n    if (!this.element || this.component) {\n      return;\n    }\n\n    if (angularPanelComponent) {\n      const scope = angularPanelComponent.getScope();\n\n      // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n      if (!scope.$$childHead) {\n        setTimeout(() => {\n          this.forceUpdate();\n        });\n        return;\n      }\n\n      this.panelCtrl = scope.$$childHead.ctrl;\n    } else {\n      this.panelCtrl = this.getReactAlertPanelCtrl();\n    }\n\n    const loader = getAngularLoader();\n    const template = '<alert-tab />';\n    const scopeProps = { ctrl: this.panelCtrl };\n\n    this.component = loader.load(this.element, scopeProps, template);\n\n    const validationMessage = await getAlertingValidationMessage(\n      panel.transformations,\n      panel.targets,\n      getDataSourceSrv(),\n      panel.datasource\n    );\n\n    if (validationMessage) {\n      this.setState({ validationMessage });\n    }\n  }\n\n  getReactAlertPanelCtrl() {\n    return {\n      panel: this.props.panel,\n      events: new EventBusSrv(),\n      render: () => {\n        this.props.panel.render();\n      },\n    } as any;\n  }\n\n  onAddAlert = () => {\n    this.panelCtrl?._enableAlert();\n    this.component?.digest();\n    this.forceUpdate();\n  };\n\n  onToggleModal = (prop: keyof Omit<State, 'validationMessage'>) => {\n    const value = this.state[prop];\n    this.setState({ ...this.state, [prop]: !value });\n  };\n\n  renderTestRule = () => {\n    if (!this.state.showTestRule) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showTestRule');\n\n    return (\n      <Modal isOpen={true} icon=\"bug\" title=\"Testing rule\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <TestRuleResult panel={panel} dashboard={dashboard} />\n      </Modal>\n    );\n  };\n\n  renderDeleteConfirmation = () => {\n    if (!this.state.showDeleteConfirmation) {\n      return null;\n    }\n\n    const { panel } = this.props;\n    const onDismiss = () => this.onToggleModal('showDeleteConfirmation');\n\n    return (\n      <ConfirmModal\n        isOpen={true}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={\n          <div>\n            Are you sure you want to delete this alert rule?\n            <br />\n            <small>You need to save dashboard for the delete to take effect.</small>\n          </div>\n        }\n        confirmText=\"Delete alert\"\n        onDismiss={onDismiss}\n        onConfirm={() => {\n          delete panel.alert;\n          panel.thresholds = [];\n          if (this.panelCtrl) {\n            this.panelCtrl.alertState = null;\n            this.panelCtrl.render();\n          }\n          this.component?.digest();\n          onDismiss();\n        }}\n      />\n    );\n  };\n\n  renderStateHistory = () => {\n    if (!this.state.showStateHistory) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showStateHistory');\n\n    return (\n      <Modal isOpen={true} icon=\"history\" title=\"State history\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <StateHistory dashboard={dashboard} panelId={panel.id} onRefresh={() => this.panelCtrl?.refresh()} />\n      </Modal>\n    );\n  };\n\n  render() {\n    const { alert, transformations } = this.props.panel;\n    const { validationMessage } = this.state;\n    const hasTransformations = transformations && transformations.length > 0;\n\n    if (!alert && validationMessage) {\n      return <PanelNotSupported message={validationMessage} />;\n    }\n\n    const model = {\n      title: 'Panel has no alert rule defined',\n      buttonIcon: 'bell' as const,\n      onClick: this.onAddAlert,\n      buttonTitle: 'Create Alert',\n    };\n\n    return (\n      <>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <Container padding=\"md\">\n            <div data-testid={selectors.components.AlertTab.content}>\n              {alert && hasTransformations && (\n                <Alert\n                  severity={AppNotificationSeverity.Error}\n                  title=\"Transformations are not supported in alert queries\"\n                />\n              )}\n\n              <div ref={(element) => (this.element = element)} />\n              {alert && (\n                <HorizontalGroup>\n                  <Button onClick={() => this.onToggleModal('showStateHistory')} variant=\"secondary\">\n                    State history\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showTestRule')} variant=\"secondary\">\n                    Test rule\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showDeleteConfirmation')} variant=\"destructive\">\n                    Delete\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!alert && !validationMessage && <EmptyListCTA {...model} />}\n            </div>\n          </Container>\n        </CustomScrollbar>\n\n        {this.renderTestRule()}\n        {this.renderDeleteConfirmation()}\n        {this.renderStateHistory()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {};\n\nexport const AlertTab = connect(mapStateToProps, mapDispatchToProps)(UnConnectedAlertTab);\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsync } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { useSelector } from 'app/types';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { panelToRuleFormValues } from '../../utils/rule-form';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  className?: string;\n}\n\nexport const NewRuleFromPanelButton = ({ dashboard, panel, className }: Props) => {\n  const templating = useSelector((state) => {\n    return state.templating;\n  });\n\n  const location = useLocation();\n\n  const { loading, value: formValues } = useAsync(\n    () => panelToRuleFormValues(panel, dashboard),\n    // Templating variables are required to update formValues on each variable's change. It's used implicitly by the templating engine\n    [panel, dashboard, templating]\n  );\n\n  if (loading) {\n    return <Button disabled={true}>New alert rule</Button>;\n  }\n\n  if (!formValues) {\n    return (\n      <Alert severity=\"info\" title=\"No alerting capable query found\">\n        Cannot create alerts from this panel because no query to an alerting capable datasource is found.\n      </Alert>\n    );\n  }\n\n  const ruleFormUrl = urlUtil.renderUrl('alerting/new', {\n    defaults: JSON.stringify(formValues),\n    returnTo: location.pathname + location.search,\n  });\n\n  return (\n    <LinkButton\n      icon=\"bell\"\n      onClick={() => logInfo(LogMessages.alertRuleFromPanel)}\n      href={ruleFormUrl}\n      className={className}\n      data-testid=\"create-alert-rule-button\"\n    >\n      New alert rule\n    </LinkButton>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, CustomScrollbar, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport const PanelAlertTabContent = ({ dashboard, panel }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { errors, loading, rules } = usePanelCombinedRules({\n    dashboardUID: dashboard.uid,\n    panelId: panel.id,\n    poll: true,\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = contextSrv.hasPermission(permissions.create);\n\n  const alert = errors.length ? (\n    <Alert title=\"Errors loading rules\" severity=\"error\">\n      {errors.map((error, index) => (\n        <div key={index}>Failed to load Grafana rules state: {error.message || 'Unknown error.'}</div>\n      ))}\n    </Alert>\n  ) : null;\n\n  if (loading && !rules.length) {\n    return (\n      <div className={styles.innerWrapper}>\n        {alert}\n        <LoadingPlaceholder text=\"Loading rules...\" />\n      </div>\n    );\n  }\n\n  if (rules.length) {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <div className={styles.innerWrapper}>\n          {alert}\n          <RulesTable rules={rules} />\n          {!!dashboard.meta.canSave && canCreateRules && (\n            <NewRuleFromPanelButton className={styles.newButton} panel={panel} dashboard={dashboard} />\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n\n  return (\n    <div data-testid={selectors.components.PanelAlertTabContent.content} className={styles.noRulesWrapper}>\n      {alert}\n      {!!dashboard.uid && (\n        <>\n          <p>There are no alert rules linked to this panel.</p>\n          {!!dashboard.meta.canSave && canCreateRules && <NewRuleFromPanelButton panel={panel} dashboard={dashboard} />}\n        </>\n      )}\n      {!dashboard.uid && !!dashboard.meta.canSave && (\n        <Alert severity=\"info\" title=\"Dashboard not saved\">\n          Dashboard must be saved before alerts can be added.\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newButton: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  innerWrapper: css`\n    padding: ${theme.spacing(2)};\n  `,\n  noRulesWrapper: css`\n    margin: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(3)};\n  `,\n});\n","import { config } from '@grafana/runtime';\n\nimport { AlertTab } from './AlertTab';\nimport { PanelAlertTabContent } from './unified/PanelAlertTabContent';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.unifiedAlertingEnabled ? PanelAlertTabContent : AlertTab;\n","import React from 'react';\n\nimport { Tab, TabProps } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\n\ninterface Props extends Omit<TabProps, 'counter' | 'ref'> {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\n// it will load rule count from backend\nexport const PanelAlertTab = ({ panel, dashboard, ...otherProps }: Props) => {\n  const { rules, loading } = usePanelCombinedRules({ panelId: panel.id, dashboardUID: dashboard.uid });\n  return <Tab {...otherProps} counter={loading ? null : rules.length} />;\n};\n","import React, { PureComponent } from 'react';\n\nimport { DataQuery, getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { storeLastUsedDataSourceInLocalStorage } from 'app/features/datasources/components/picker/utils';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { PanelModel } from '../../state';\nimport { getLastUsedDatasourceFromStorage } from '../../utils/dashboard';\n\ninterface Props {\n  /** Current panel */\n  panel: PanelModel;\n  /** Added here to make component re-render when queries change from outside */\n  queries: DataQuery[];\n}\n\nexport class PanelEditorQueries extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  // store last used datasource in local storage\n  updateLastUsedDatasource = (datasource: QueryGroupDataSource) => {\n    storeLastUsedDataSourceInLocalStorage(datasource);\n  };\n\n  buildQueryOptions(panel: PanelModel): QueryGroupOptions {\n    const dataSource: QueryGroupDataSource = panel.datasource ?? {\n      default: true,\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n\n    // store last datasource used in local storage\n    this.updateLastUsedDatasource(dataSource);\n    return {\n      cacheTimeout: datasourceSettings?.meta.queryOptions?.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings?.isDefault,\n        type: datasourceSettings?.type,\n        uid: datasourceSettings?.uid,\n      },\n      queryCachingTTL: datasourceSettings?.cachingConfig?.enabled ? panel.queryCachingTTL : undefined,\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { panel } = this.props;\n\n    // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n    if (!panel.datasource) {\n      let ds;\n      // check if we have last used datasource from local storage\n      // get dashboard uid\n      const dashboardUid = getDashboardSrv().getCurrent()?.uid ?? '';\n      const lastUsedDatasource = getLastUsedDatasourceFromStorage(dashboardUid!);\n      // do we have a last used datasource for this dashboard\n      if (lastUsedDatasource?.datasourceUid !== null) {\n        // get datasource from uid\n        ds = getDatasourceSrv().getInstanceSettings(lastUsedDatasource?.datasourceUid);\n      }\n      // else load default datasource\n      if (!ds) {\n        ds = getDatasourceSrv().getInstanceSettings(null);\n      }\n      panel.datasource = getDataSourceRef(ds!);\n      this.forceUpdate();\n    }\n  }\n\n  onRunQueries = () => {\n    this.props.panel.refresh();\n  };\n\n  onOpenQueryInspector = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: 'query',\n    });\n  };\n\n  onOptionsChange = (options: QueryGroupOptions) => {\n    const { panel } = this.props;\n\n    panel.updateQueries(options);\n\n    if (options.dataSource.uid !== panel.datasource?.uid) {\n      // trigger queries when changing data source\n      setTimeout(this.onRunQueries, 10);\n    }\n\n    this.forceUpdate();\n  };\n\n  render() {\n    const { panel } = this.props;\n\n    // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n\n    return (\n      <QueryGroup\n        options={options}\n        queryRunner={panel.getQueryRunner()}\n        onRunQueries={this.onRunQueries}\n        onOpenQueryInspector={this.onOpenQueryInspector}\n        onOptionsChange={this.onOptionsChange}\n      />\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useCallback } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Tab, TabContent, TabsBar, toIconName, useForceUpdate, useStyles2 } from '@grafana/ui';\nimport AlertTabIndex from 'app/features/alerting/AlertTabIndex';\nimport { PanelAlertTab } from 'app/features/alerting/unified/PanelAlertTab';\nimport { PanelQueriesChangedEvent, PanelTransformationsChangedEvent } from 'app/types/events';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { TransformationsEditor } from '../TransformationsEditor/TransformationsEditor';\n\nimport { PanelEditorQueries } from './PanelEditorQueries';\nimport { PanelEditorTab, PanelEditorTabId } from './types';\n\ninterface PanelEditorTabsProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  tabs: PanelEditorTab[];\n  onChangeTab: (tab: PanelEditorTab) => void;\n}\n\nexport const PanelEditorTabs = React.memo(({ panel, dashboard, tabs, onChangeTab }: PanelEditorTabsProps) => {\n  const forceUpdate = useForceUpdate();\n  const styles = useStyles2(getStyles);\n\n  const instrumentedOnChangeTab = useCallback(\n    (tab: PanelEditorTab) => {\n      let eventName = 'panel_editor_tabs_changed';\n      if (config.featureToggles.transformationsRedesign) {\n        eventName = 'transformations_redesign_' + eventName;\n      }\n\n      if (!tab.active) {\n        reportInteraction(eventName, { tab_id: tab.id });\n      }\n\n      onChangeTab(tab);\n    },\n    [onChangeTab]\n  );\n\n  useEffect(() => {\n    const eventSubs = new Subscription();\n    eventSubs.add(panel.events.subscribe(PanelQueriesChangedEvent, forceUpdate));\n    eventSubs.add(panel.events.subscribe(PanelTransformationsChangedEvent, forceUpdate));\n    return () => eventSubs.unsubscribe();\n  }, [panel, dashboard, forceUpdate]);\n\n  const activeTab = tabs.find((item) => item.active)!;\n\n  if (tabs.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar className={styles.tabBar} hideBorder>\n        {tabs.map((tab) => {\n          if (tab.id === PanelEditorTabId.Alert) {\n            return renderAlertTab(tab, panel, dashboard, instrumentedOnChangeTab);\n          }\n          return (\n            <Tab\n              key={tab.id}\n              label={tab.text}\n              active={tab.active}\n              onChangeTab={() => instrumentedOnChangeTab(tab)}\n              icon={toIconName(tab.icon)}\n              counter={getCounter(panel, tab)}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {activeTab.id === PanelEditorTabId.Query && <PanelEditorQueries panel={panel} queries={panel.targets} />}\n        {activeTab.id === PanelEditorTabId.Alert && <AlertTabIndex panel={panel} dashboard={dashboard} />}\n        {activeTab.id === PanelEditorTabId.Transform && <TransformationsEditor panel={panel} />}\n      </TabContent>\n    </div>\n  );\n});\n\nPanelEditorTabs.displayName = 'PanelEditorTabs';\n\nfunction getCounter(panel: PanelModel, tab: PanelEditorTab) {\n  switch (tab.id) {\n    case PanelEditorTabId.Query:\n      return panel.targets.length;\n    case PanelEditorTabId.Alert:\n      return panel.alert ? 1 : 0;\n    case PanelEditorTabId.Transform:\n      const transformations = panel.getTransformations() ?? [];\n      return transformations.length;\n  }\n\n  return null;\n}\n\nfunction renderAlertTab(\n  tab: PanelEditorTab,\n  panel: PanelModel,\n  dashboard: DashboardModel,\n  onChangeTab: (tab: PanelEditorTab) => void\n) {\n  const alertingDisabled = !config.alertingEnabled && !config.unifiedAlertingEnabled;\n\n  if (alertingDisabled) {\n    return null;\n  }\n\n  if (config.unifiedAlertingEnabled) {\n    return (\n      <PanelAlertTab\n        key={tab.id}\n        label={tab.text}\n        active={tab.active}\n        onChangeTab={() => onChangeTab(tab)}\n        icon={toIconName(tab.icon)}\n        panel={panel}\n        dashboard={dashboard}\n      />\n    );\n  }\n\n  if (config.alertingEnabled) {\n    return (\n      <Tab\n        key={tab.id}\n        label={tab.text}\n        active={tab.active}\n        onChangeTab={() => onChangeTab(tab)}\n        icon={toIconName(tab.icon)}\n        counter={getCounter(panel, tab)}\n      />\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    `,\n    tabBar: css`\n      padding-left: ${theme.spacing(2)};\n    `,\n    tabContent: css`\n      padding: 0;\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      min-height: 0;\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.components.panel.borderColor};\n      border-left: none;\n      border-bottom: none;\n      border-top-right-radius: ${theme.shape.borderRadius(1.5)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { FieldConfigSource, GrafanaTheme2, NavModel, NavModelItem, PageLayoutType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Button,\n  HorizontalGroup,\n  InlineSwitch,\n  ModalsController,\n  RadioButtonGroup,\n  stylesFactory,\n  Themeable2,\n  ToolbarButton,\n  ToolbarButtonRow,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { StoreState } from 'app/types';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\n\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../library-panels/components/UnlinkModal/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\n\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { PanelEditorUIState, toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { DisplayMode, displayModes, PanelEditorTab } from './types';\nimport { calculatePanelSize } from './utils';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  sourcePanel: PanelModel;\n  sectionNav: NavModel;\n  pageNav: NavModelItem;\n  className?: string;\n  tab?: string;\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n\n  return {\n    panel,\n    plugin: panelState?.plugin,\n    instanceState: panelState?.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state),\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector> & Themeable2;\n\ninterface State {\n  showSaveLibraryPanelModal?: boolean;\n}\n\nexport class PanelEditorUnconnected extends PureComponent<Props> {\n  private eventSubs?: Subscription;\n\n  state: State = {\n    showSaveLibraryPanelModal: false,\n  };\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const { panel, initDone } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    this.eventSubs?.unsubscribe();\n  }\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  onBack = () => {\n    locationService.partial({\n      editPanel: null,\n      tab: null,\n      showCategory: null,\n    });\n  };\n\n  onDiscard = () => {\n    this.props.discardPanelChanges();\n    this.onBack();\n  };\n\n  onSaveDashboard = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: { dashboard: this.props.dashboard },\n      })\n    );\n  };\n\n  onSaveLibraryPanel = async () => {\n    if (!isPanelModelLibraryPanel(this.props.panel)) {\n      // New library panel, no need to display modal\n      return;\n    }\n\n    this.setState({ showSaveLibraryPanelModal: true });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    locationService.partial({\n      tab: tab.id,\n    });\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateFieldConfig({\n      ...config,\n    });\n  };\n\n  onPanelOptionsChanged = (options: PanelModel['options']) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateOptions(options);\n  };\n\n  onPanelConfigChanged = (configKey: keyof PanelModel, value: unknown) => {\n    this.props.panel.setProperty(configKey, value);\n    this.props.panel.render();\n    this.forceUpdate();\n  };\n\n  onDisplayModeChange = (mode?: DisplayMode) => {\n    const { updatePanelEditorUIState } = this.props;\n    if (this.props.tableViewEnabled) {\n      this.props.toggleTableView();\n    }\n    updatePanelEditorUIState({\n      mode: mode,\n    });\n  };\n\n  onToggleTableView = () => {\n    this.props.toggleTableView();\n  };\n\n  renderPanel(styles: EditorStyles, isOnlyPanel: boolean) {\n    const { dashboard, panel, uiState, tableViewEnabled, theme } = this.props;\n\n    return (\n      <div className={styles.mainPaneWrapper} key=\"panel\">\n        {this.renderPanelToolbar(styles)}\n        <div className={styles.panelWrapper}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width < 3 || height < 3) {\n                return null;\n              }\n\n              // If no tabs limit height so panel does not extend to edge\n              if (isOnlyPanel) {\n                height -= theme.spacing.gridSize * 2;\n              }\n\n              if (tableViewEnabled) {\n                return <PanelEditorTableView width={width} height={height} panel={panel} dashboard={dashboard} />;\n              }\n\n              const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n\n              return (\n                <div className={styles.centeringContainer} style={{ width, height }}>\n                  <div style={panelSize} data-panelid={panel.id}>\n                    <DashboardPanel\n                      key={panel.key}\n                      stateKey={panel.key}\n                      dashboard={dashboard}\n                      panel={panel}\n                      isEditing={true}\n                      isViewing={false}\n                      lazy={false}\n                      width={panelSize.width}\n                      height={panelSize.height}\n                    />\n                  </div>\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n\n  renderPanelAndEditor(uiState: PanelEditorUIState, styles: EditorStyles) {\n    const { panel, dashboard, plugin, tab } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return <div className={styles.onlyPanel}>{panelPane}</div>;\n    }\n\n    return (\n      <SplitPaneWrapper\n        splitOrientation=\"horizontal\"\n        maxSize={-200}\n        paneSize={uiState.topPaneSize}\n        primary=\"first\"\n        secondaryPaneStyle={{ minHeight: 0 }}\n        onDragFinished={(size) => {\n          if (size) {\n            updatePanelEditorUIState({ topPaneSize: size / window.innerHeight });\n          }\n        }}\n      >\n        {panelPane}\n        <div\n          className={styles.tabsWrapper}\n          aria-label={selectors.components.PanelEditor.DataPane.content}\n          key=\"panel-editor-tabs\"\n        >\n          <PanelEditorTabs\n            key={panel.key}\n            panel={panel}\n            dashboard={dashboard}\n            tabs={tabs}\n            onChangeTab={this.onChangeTab}\n          />\n        </div>\n      </SplitPaneWrapper>\n    );\n  }\n\n  renderTemplateVariables(styles: EditorStyles) {\n    const { variables } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.variablesWrapper}>\n        <SubMenuItems variables={variables} />\n      </div>\n    );\n  }\n\n  renderPanelToolbar(styles: EditorStyles) {\n    const { dashboard, uiState, variables, updateTimeZoneForSession, panel, tableViewEnabled } = this.props;\n\n    return (\n      <div className={styles.panelToolbar}>\n        <HorizontalGroup justify={variables.length > 0 ? 'space-between' : 'flex-end'} align=\"flex-start\">\n          {this.renderTemplateVariables(styles)}\n          <Stack gap={1}>\n            <InlineSwitch\n              label=\"Table view\"\n              showLabel={true}\n              id=\"table-view\"\n              value={tableViewEnabled}\n              onClick={this.onToggleTableView}\n              aria-label={selectors.components.PanelEditor.toggleTableView}\n            />\n            <RadioButtonGroup value={uiState.mode} options={displayModes} onChange={this.onDisplayModeChange} />\n            <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} isOnCanvas={true} />\n            {!uiState.isPanelOptionsVisible && <VisualizationButton panel={panel} />}\n          </Stack>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  renderEditorActions() {\n    const size = 'sm';\n    let editorActions = [\n      <Button\n        onClick={this.onDiscard}\n        title=\"Undo all changes\"\n        key=\"discard\"\n        size={size}\n        variant=\"destructive\"\n        fill=\"outline\"\n      >\n        Discard\n      </Button>,\n      this.props.panel.libraryPanel ? (\n        <Button\n          onClick={this.onSaveLibraryPanel}\n          variant=\"primary\"\n          size={size}\n          title=\"Apply changes and save library panel\"\n          key=\"save-panel\"\n        >\n          Save library panel\n        </Button>\n      ) : (\n        <Button\n          onClick={this.onSaveDashboard}\n          title=\"Apply changes and save dashboard\"\n          key=\"save\"\n          size={size}\n          variant=\"secondary\"\n        >\n          Save\n        </Button>\n      ),\n      <Button\n        onClick={this.onBack}\n        variant=\"primary\"\n        title=\"Apply changes and go back to dashboard\"\n        data-testid={selectors.components.PanelEditor.applyButton}\n        key=\"apply\"\n        size={size}\n      >\n        Apply\n      </Button>,\n    ];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(\n        1,\n        0,\n        <ModalsController key=\"unlink-controller\">\n          {({ showModal, hideModal }) => {\n            return (\n              <ToolbarButton\n                onClick={() => {\n                  showModal(UnlinkModal, {\n                    onConfirm: () => {\n                      this.props.panel.unlinkLibraryPanel();\n                      this.forceUpdate();\n                    },\n                    onDismiss: hideModal,\n                    isOpen: true,\n                  });\n                }}\n                title=\"Disconnects this panel from the library panel so that you can edit it regularly.\"\n                key=\"unlink\"\n              >\n                Unlink\n              </ToolbarButton>\n            );\n          }}\n        </ModalsController>\n      );\n\n      // Remove \"Apply\" button\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const { plugin, dashboard, panel, instanceState } = this.props;\n\n    if (!plugin) {\n      return <div />;\n    }\n\n    return (\n      <OptionsPane\n        plugin={plugin}\n        dashboard={dashboard}\n        panel={panel}\n        instanceState={instanceState}\n        onFieldConfigsChange={this.onFieldConfigChange}\n        onPanelOptionsChanged={this.onPanelOptionsChanged}\n        onPanelConfigChange={this.onPanelConfigChanged}\n      />\n    );\n  }\n\n  onGoBackToDashboard = () => {\n    locationService.partial({ editPanel: null, tab: null, showCategory: null });\n  };\n\n  onConfirmAndDismissLibarayPanelModel = () => {\n    this.setState({ showSaveLibraryPanelModal: false });\n  };\n\n  render() {\n    const { initDone, uiState, theme, sectionNav, pageNav, className, updatePanelEditorUIState } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return (\n      <Page\n        navModel={sectionNav}\n        pageNav={pageNav}\n        aria-label={selectors.components.PanelEditor.General.content}\n        layout={PageLayoutType.Custom}\n        className={className}\n      >\n        <AppChromeUpdate\n          actions={<ToolbarButtonRow alignment=\"right\">{this.renderEditorActions()}</ToolbarButtonRow>}\n        />\n        <div className={styles.wrapper}>\n          <div className={styles.verticalSplitPanesWrapper}>\n            {!uiState.isPanelOptionsVisible ? (\n              this.renderPanelAndEditor(uiState, styles)\n            ) : (\n              <SplitPaneWrapper\n                splitOrientation=\"vertical\"\n                maxSize={-300}\n                paneSize={uiState.rightPaneSize}\n                primary=\"second\"\n                onDragFinished={(size) => {\n                  if (size) {\n                    updatePanelEditorUIState({ rightPaneSize: size / window.innerWidth });\n                  }\n                }}\n              >\n                {this.renderPanelAndEditor(uiState, styles)}\n                {this.renderOptionsPane()}\n              </SplitPaneWrapper>\n            )}\n          </div>\n          {this.state.showSaveLibraryPanelModal && (\n            <SaveLibraryPanelModal\n              panel={this.props.panel as PanelModelWithLibraryPanel}\n              folderUid={this.props.dashboard.meta.folderUid ?? ''}\n              onConfirm={this.onConfirmAndDismissLibarayPanelModel}\n              onDiscard={this.onDiscard}\n              onDismiss={this.onConfirmAndDismissLibarayPanelModel}\n            />\n          )}\n        </div>\n      </Page>\n    );\n  }\n}\n\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, props: Props) => {\n  const { uiState } = props;\n  const paneSpacing = theme.spacing(2);\n\n  return {\n    wrapper: css({\n      width: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n    }),\n    verticalSplitPanesWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      position: relative;\n    `,\n    mainPaneWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      padding-right: ${uiState.isPanelOptionsVisible ? 0 : paneSpacing};\n    `,\n    variablesWrapper: css`\n      label: variablesWrapper;\n      display: flex;\n      flex-grow: 1;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(1, 2)};\n    `,\n    panelWrapper: css`\n      flex: 1 1 0;\n      min-height: 0;\n      width: 100%;\n      padding-left: ${paneSpacing};\n    `,\n    tabsWrapper: css`\n      height: 100%;\n      width: 100%;\n    `,\n    panelToolbar: css`\n      display: flex;\n      padding: 0 0 ${paneSpacing} ${paneSpacing};\n      justify-content: space-between;\n      flex-wrap: wrap;\n    `,\n    angularWarning: css`\n      display: flex;\n      height: theme.spacing(4);\n      align-items: center;\n    `,\n    toolbarLeft: css`\n      padding-left: ${theme.spacing(1)};\n    `,\n    centeringContainer: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      position: relative;\n      flex-direction: column;\n    `,\n    onlyPanel: css`\n      height: 100%;\n      position: absolute;\n      overflow: hidden;\n      width: 100%;\n    `,\n  };\n});\n\ntype EditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, EventBus, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\nimport { LoadingIndicator } from '@grafana/ui/src/components/PanelChrome/LoadingIndicator';\n\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { getDashboardQueryRunner } from '../../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport interface AnnotationPickerProps {\n  events: EventBus;\n  annotation: AnnotationQuery;\n  onEnabledChanged: (annotation: AnnotationQuery) => void;\n}\n\nexport const AnnotationPicker = ({ annotation, events, onEnabledChanged }: AnnotationPickerProps): JSX.Element => {\n  const [loading, setLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const onCancel = () => getDashboardQueryRunner().cancel(annotation);\n\n  useEffect(() => {\n    const started = events.getStream(AnnotationQueryStarted).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(true);\n        }\n      },\n    });\n    const stopped = events.getStream(AnnotationQueryFinished).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(false);\n        }\n      },\n    });\n\n    return () => {\n      started.unsubscribe();\n      stopped.unsubscribe();\n    };\n  });\n\n  return (\n    <div key={annotation.name} className={styles.annotation}>\n      <InlineFieldRow>\n        <InlineField\n          label={annotation.name}\n          disabled={loading}\n          data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationLabel(annotation.name)}\n        >\n          <InlineSwitch\n            label={annotation.name}\n            value={annotation.enable}\n            onChange={() => onEnabledChanged(annotation)}\n            disabled={loading}\n            data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationToggle(annotation.name)}\n          />\n        </InlineField>\n        <div className={styles.indicator}>\n          <LoadingIndicator loading={loading} onCancel={onCancel} />\n        </div>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    annotation: css`\n      display: inline-block;\n      margin-right: ${theme.spacing(1)};\n\n      .fa-caret-down {\n        font-size: 75%;\n        padding-left: ${theme.spacing(1)};\n      }\n\n      .gf-form-inline .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n    indicator: css`\n      align-self: center;\n      padding: 0 ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, DataQuery, EventBus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { AnnotationPicker } from './AnnotationPicker';\n\ninterface Props {\n  events: EventBus;\n  annotations: AnnotationQuery[];\n  onAnnotationChanged: (annotation: AnnotationQuery<DataQuery>) => void;\n}\n\nexport const Annotations = ({ annotations, onAnnotationChanged, events }: Props) => {\n  const [visibleAnnotations, setVisibleAnnotations] = useState<AnnotationQuery[]>([]);\n  useEffect(() => {\n    setVisibleAnnotations(annotations.filter((annotation) => annotation.hide !== true));\n  }, [annotations]);\n\n  if (visibleAnnotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationsWrapper}>\n      {visibleAnnotations.map((annotation) => (\n        <AnnotationPicker\n          events={events}\n          annotation={annotation}\n          onEnabledChanged={onAnnotationChanged}\n          key={annotation.name}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { sanitizeUrl } from '@grafana/data/src/text/sanitize';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { DashboardLink } from '@grafana/schema';\nimport { Tooltip, useForceUpdate } from '@grafana/ui';\nimport { LINK_ICON_MAP } from 'app/features/dashboard-scene/settings/links/utils';\n\nimport { getLinkSrv } from '../../../panel/panellinks/link_srv';\nimport { DashboardModel } from '../../state';\n\nimport { DashboardLinkButton, DashboardLinksDashboard } from './DashboardLinksDashboard';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n}\n\nexport const DashboardLinks = ({ dashboard, links }: Props) => {\n  const forceUpdate = useForceUpdate();\n\n  useEffectOnce(() => {\n    const sub = dashboard.events.subscribe(TimeRangeUpdatedEvent, forceUpdate);\n    return () => sub.unsubscribe();\n  });\n\n  if (!links.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {links.map((link: DashboardLink, index: number) => {\n        const linkInfo = getLinkSrv().getAnchorInfo(link);\n        const key = `${link.title}-$${index}`;\n\n        if (link.type === 'dashboards') {\n          return <DashboardLinksDashboard key={key} link={link} linkInfo={linkInfo} dashboardUID={dashboard.uid} />;\n        }\n\n        const icon = LINK_ICON_MAP[link.icon];\n\n        const linkElement = (\n          <DashboardLinkButton\n            href={sanitizeUrl(linkInfo.href)}\n            target={link.targetBlank ? '_blank' : undefined}\n            rel=\"noreferrer\"\n            data-testid={selectors.components.DashboardLinks.link}\n            icon={icon}\n          >\n            {linkInfo.title}\n          </DashboardLinkButton>\n        );\n\n        return (\n          <div key={key} data-testid={selectors.components.DashboardLinks.container}>\n            {link.tooltip ? <Tooltip content={linkInfo.tooltip}>{linkElement}</Tooltip> : linkElement}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { AnnotationQuery, DataQuery, TypedVariableModel, GrafanaTheme2 } from '@grafana/data';\nimport { DashboardLink } from '@grafana/schema';\nimport { stylesFactory, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { StoreState } from '../../../../types';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { DashboardModel } from '../../state';\n\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\n\ninterface OwnProps extends Themeable2 {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n  annotations: AnnotationQuery[];\n}\n\ninterface ConnectedProps {\n  variables: TypedVariableModel[];\n}\n\ninterface DispatchProps {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass SubMenuUnConnected extends PureComponent<Props> {\n  onAnnotationStateChanged = (updatedAnnotation: AnnotationQuery<DataQuery>) => {\n    // we're mutating dashboard state directly here until annotations are in Redux.\n    for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n      const annotation = this.props.dashboard.annotations.list[index];\n      if (annotation.name === updatedAnnotation.name) {\n        annotation.enable = !annotation.enable;\n        break;\n      }\n    }\n    this.props.dashboard.startRefresh();\n    this.forceUpdate();\n  };\n\n  disableSubmitOnEnter = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n\n  render() {\n    const { dashboard, variables, links, annotations, theme } = this.props;\n\n    const styles = getStyles(theme);\n\n    if (!dashboard.isSubMenuVisible()) {\n      return null;\n    }\n\n    const readOnlyVariables = dashboard.meta.isSnapshot ?? false;\n\n    return (\n      <div className={styles.submenu}>\n        <form aria-label=\"Template variables\" className={styles.formStyles} onSubmit={this.disableSubmitOnEnter}>\n          <SubMenuItems variables={variables} readOnly={readOnlyVariables} />\n        </form>\n        <Annotations\n          annotations={annotations}\n          onAnnotationChanged={this.onAnnotationStateChanged}\n          events={dashboard.events}\n        />\n        <div className={styles.spacer} />\n        {dashboard && <DashboardLinks dashboard={dashboard} links={links} />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, ownProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables),\n  };\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    formStyles: css`\n      display: flex;\n      flex-wrap: wrap;\n      display: contents;\n    `,\n    submenu: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-content: flex-start;\n      align-items: flex-start;\n      gap: ${theme.spacing(1)} ${theme.spacing(2)};\n      padding: 0 0 ${theme.spacing(1)} 0;\n    `,\n    spacer: css({\n      flexGrow: 1,\n    }),\n  };\n});\n\nexport const SubMenu = withTheme2(connect(mapStateToProps)(SubMenuUnConnected));\n\nSubMenu.displayName = 'SubMenu';\n","import { cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel, NavModelItem, TimeRange, PageLayoutType, locationUtil } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, locationService } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { Page } from 'app/core/components/Page/Page';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { AngularDeprecationNotice } from 'app/features/plugins/angularDeprecation/AngularDeprecationNotice';\nimport { getPageNavFromSlug, getRootContentNavModel } from 'app/features/storage/StorageFolderPage';\nimport { DashboardRoutes, KioskMode, StoreState } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { AddWidgetModal } from '../components/AddWidgetModal/AddWidgetModal';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { ShareModal } from '../components/ShareModal';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\n\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport const mapStateToProps = (state: StoreState) => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel(),\n  navIndex: state.navIndex,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = Themeable2 &\n  GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n  updateScrollTop?: number;\n  rememberScrollTop?: number;\n  showLoadingState: boolean;\n  panelNotFound: boolean;\n  editPanelAccessDenied: boolean;\n  scrollElement?: HTMLDivElement;\n  pageNav?: NavModelItem;\n  sectionNav?: NavModel;\n}\n\nexport class UnthemedDashboardPage extends PureComponent<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  private forceRouteReloadCounter = 0;\n  state: State = this.getCleanState();\n\n  getCleanState(): State {\n    return {\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      panelNotFound: false,\n      editPanelAccessDenied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initDashboard();\n    this.forceRouteReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const { dashboard, match, queryParams } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      urlFolderUid: queryParams.folderUid,\n      panelType: queryParams.panelType,\n      routeName: this.props.route.routeName,\n      fixUrl: true,\n      accessToken: match.params.accessToken,\n      keybindingSrv: this.context.keybindings,\n    });\n\n    // small delay to start live updates\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { dashboard, match, templateVarsChangedInUrl } = this.props;\n    const routeReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    }\n\n    if (\n      prevProps.match.params.uid !== match.params.uid ||\n      (routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter)\n    ) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    }\n\n    // entering edit mode\n    if (this.state.editPanel && !prevState.editPanel) {\n      dashboardWatcher.setEditingState(true);\n\n      // Some panels need to be notified when entering edit mode\n      this.props.dashboard?.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    }\n\n    // leaving edit mode\n    if (!this.state.editPanel && prevState.editPanel) {\n      dashboardWatcher.setEditingState(false);\n\n      // Some panels need kicked when leaving edit mode\n      this.props.dashboard?.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({ editPanel: null });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({ editPanel: null, viewPanel: null });\n    }\n  }\n\n  updateLiveTimer = () => {\n    let tr: TimeRange | undefined = undefined;\n    if (this.props.dashboard?.liveNow) {\n      tr = getTimeSrv().timeRange();\n    }\n    liveTimer.setLiveTimeRange(tr);\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { dashboard, queryParams } = props;\n\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n\n    if (!dashboard) {\n      return state;\n    }\n\n    const updatedState = { ...state };\n\n    // Entering edit mode\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n      if (panel) {\n        if (dashboard.canEditPanel(panel)) {\n          updatedState.editPanel = panel;\n          updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        } else {\n          updatedState.editPanelAccessDenied = true;\n        }\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      updatedState.editPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // Entering view mode\n    if (!state.viewPanel && urlViewPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n      if (panel) {\n        // This mutable state feels wrong to have in getDerivedStateFromProps\n        // Should move this state out of dashboard in the future\n        dashboard.initViewPanel(panel);\n        updatedState.viewPanel = panel;\n        updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        updatedState.updateScrollTop = 0;\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n      updatedState.viewPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // if we removed url edit state, clear any panel not found state\n    if (state.panelNotFound || (state.editPanelAccessDenied && !urlEditPanelId)) {\n      updatedState.panelNotFound = false;\n      updatedState.editPanelAccessDenied = false;\n    }\n\n    return updateStatePageNavFromProps(props, updatedState);\n  }\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  getInspectPanel() {\n    const { dashboard, queryParams } = this.props;\n\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10));\n\n    // cannot inspect panels plugin is not already loaded\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  onCloseShareModal = () => {\n    locationService.partial({ shareView: null });\n  };\n\n  render() {\n    const { dashboard, initError, queryParams } = this.props;\n    const { editPanel, viewPanel, updateScrollTop, pageNav, sectionNav } = this.state;\n    const kioskMode = getKioskMode(this.props.queryParams);\n\n    if (!dashboard || !pageNav || !sectionNav) {\n      return <DashboardLoading initPhase={this.props.initPhase} />;\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const showSubMenu = !editPanel && !kioskMode && !this.props.queryParams.editview;\n\n    const showToolbar = kioskMode !== KioskMode.Full && !queryParams.editview;\n\n    const pageClassName = cx({\n      'panel-in-fullscreen': Boolean(viewPanel),\n      'page-hidden': Boolean(queryParams.editview || editPanel),\n    });\n\n    if (dashboard.meta.dashboardNotFound) {\n      return (\n        <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} pageNav={{ text: 'Not found' }}>\n          <EntityNotFound entity=\"Dashboard\" />\n        </Page>\n      );\n    }\n\n    return (\n      <>\n        <Page\n          navModel={sectionNav}\n          pageNav={pageNav}\n          layout={PageLayoutType.Canvas}\n          className={pageClassName}\n          scrollRef={this.setScrollRef}\n          scrollTop={updateScrollTop}\n        >\n          {showToolbar && (\n            <header data-testid={selectors.pages.Dashboard.DashNav.navV2}>\n              <DashNav\n                dashboard={dashboard}\n                title={dashboard.title}\n                folderTitle={dashboard.meta.folderTitle}\n                isFullscreen={!!viewPanel}\n                kioskMode={kioskMode}\n                hideTimePicker={dashboard.timepicker.hidden}\n              />\n            </header>\n          )}\n          <DashboardPrompt dashboard={dashboard} />\n          {initError && <DashboardFailed />}\n          {showSubMenu && (\n            <section aria-label={selectors.pages.Dashboard.SubMenu.submenu}>\n              <SubMenu dashboard={dashboard} annotations={dashboard.annotations.list} links={dashboard.links} />\n            </section>\n          )}\n          {config.featureToggles.angularDeprecationUI && dashboard.hasAngularPlugins() && dashboard.uid !== null && (\n            <AngularDeprecationNotice dashboardUid={dashboard.uid} />\n          )}\n          <DashboardGrid\n            dashboard={dashboard}\n            isEditable={!!dashboard.meta.canEdit}\n            viewPanel={viewPanel}\n            editPanel={editPanel}\n          />\n\n          {inspectPanel && <PanelInspector dashboard={dashboard} panel={inspectPanel} />}\n          {queryParams.shareView && <ShareModal dashboard={dashboard} onDismiss={this.onCloseShareModal} />}\n        </Page>\n        {editPanel && (\n          <PanelEditor\n            dashboard={dashboard}\n            sourcePanel={editPanel}\n            tab={this.props.queryParams.tab}\n            sectionNav={sectionNav}\n            pageNav={pageNav}\n          />\n        )}\n        {queryParams.editview && (\n          <DashboardSettings\n            dashboard={dashboard}\n            editview={queryParams.editview}\n            pageNav={pageNav}\n            sectionNav={sectionNav}\n          />\n        )}\n        {queryParams.addWidget && config.featureToggles.vizAndWidgetSplit && <AddWidgetModal />}\n      </>\n    );\n  }\n}\n\nfunction updateStatePageNavFromProps(props: Props, state: State): State {\n  const { dashboard, navIndex } = props;\n\n  if (!dashboard) {\n    return state;\n  }\n\n  let pageNav = state.pageNav;\n  let sectionNav = state.sectionNav;\n\n  if (!pageNav || dashboard.title !== pageNav.text || dashboard.meta.folderUrl !== pageNav.parentItem?.url) {\n    pageNav = {\n      text: dashboard.title,\n      url: locationUtil.getUrlForPartial(props.history.location, {\n        editview: null,\n        editPanel: null,\n        viewPanel: null,\n      }),\n    };\n  }\n\n  const { folderUid } = dashboard.meta;\n  if (folderUid && pageNav) {\n    const folderNavModel = getNavModel(navIndex, `folder-dashboards-${folderUid}`).main;\n    // If the folder hasn't loaded (maybe user doesn't have permission on it?) then\n    // don't show the \"page not found\" breadcrumb\n    if (folderNavModel.id !== 'not-found') {\n      pageNav = {\n        ...pageNav,\n        parentItem: folderNavModel,\n      };\n    }\n  }\n\n  if (props.route.routeName === DashboardRoutes.Path) {\n    sectionNav = getRootContentNavModel();\n    const pageNav = getPageNavFromSlug(props.match.params.slug!);\n    if (pageNav?.parentItem) {\n      pageNav.parentItem = pageNav.parentItem;\n    }\n  } else {\n    sectionNav = getNavModel(props.navIndex, 'dashboards/browse');\n  }\n\n  if (state.editPanel || state.viewPanel) {\n    pageNav = {\n      ...pageNav,\n      text: `${state.editPanel ? 'Edit' : 'View'} panel`,\n      parentItem: pageNav,\n      url: undefined,\n    };\n  }\n\n  if (state.pageNav === pageNav && state.sectionNav === sectionNav) {\n    return state;\n  }\n\n  return {\n    ...state,\n    pageNav,\n    sectionNav,\n  };\n}\n\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport DashboardScenePage from 'app/features/dashboard-scene/pages/DashboardScenePage';\nimport { getDashboardScenePageStateManager } from 'app/features/dashboard-scene/pages/DashboardScenePageStateManager';\nimport { DashboardRoutes } from 'app/types';\n\nimport DashboardPage from './DashboardPage';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport type DashboardPageProxyProps = GrafanaRouteComponentProps<\n  DashboardPageRouteParams,\n  DashboardPageRouteSearchParams\n>;\n\n// This proxy component is used for Dashboard -> Scenes migration.\n// It will render DashboardScenePage if the user is only allowed to view the dashboard.\nfunction DashboardPageProxy(props: DashboardPageProxyProps) {\n  if (config.featureToggles.dashboardScene || props.queryParams.scenes) {\n    return <DashboardScenePage {...props} />;\n  }\n\n  const stateManager = getDashboardScenePageStateManager();\n  const isScenesSupportedRoute = Boolean(\n    props.route.routeName === DashboardRoutes.Home ||\n      (props.route.routeName === DashboardRoutes.Normal && props.match.params.uid)\n  );\n\n  // We pre-fetch dashboard to render dashboard page component depending on dashboard permissions.\n  // To avoid querying single dashboard multiple times, stateManager.fetchDashboard uses a simple, short-lived cache.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const dashboard = useAsync(async () => {\n    if (props.match.params.type === 'snapshot') {\n      return null;\n    }\n\n    return stateManager.fetchDashboard({\n      route: props.route.routeName as DashboardRoutes,\n      uid: props.match.params.uid ?? '',\n    });\n  }, [props.match.params.uid, props.route.routeName]);\n\n  if (!config.featureToggles.dashboardSceneForViewers) {\n    return <DashboardPage {...props} />;\n  }\n\n  if (dashboard.loading) {\n    return null;\n  }\n\n  if (\n    dashboard.value &&\n    !(dashboard.value.meta.canEdit || dashboard.value.meta.canMakeEditable) &&\n    isScenesSupportedRoute\n  ) {\n    return <DashboardScenePage {...props} />;\n  } else {\n    return <DashboardPage {...props} />;\n  }\n}\n\nexport default DashboardPageProxy;\n","import { DataFrame, dataFrameFromJSON, DataFrameJSON, getDisplayProcessor } from '@grafana/data';\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nimport { UploadResponse, StorageInfo, ItemOptions, WriteValueRequest, WriteValueResponse } from './types';\n\n// Likely should be built into the search interface!\nexport interface GrafanaStorage {\n  get: <T = any>(path: string) => Promise<T>;\n  list: (path: string) => Promise<DataFrame | undefined>;\n  upload: (folder: string, file: File, overwriteExistingFile: boolean) => Promise<UploadResponse>;\n  createFolder: (path: string) => Promise<{ error?: string }>;\n  delete: (path: { isFolder: boolean; path: string }) => Promise<{ error?: string }>;\n\n  /** Admin only */\n  getConfig: () => Promise<StorageInfo[]>;\n\n  /** Called before save */\n  getOptions: (path: string) => Promise<ItemOptions>;\n\n  /** Saves dashboards */\n  write: (path: string, options: WriteValueRequest) => Promise<WriteValueResponse>;\n}\n\nclass SimpleStorage implements GrafanaStorage {\n  constructor() {}\n\n  async get<T = any>(path: string): Promise<T> {\n    const storagePath = `api/storage/read/${path}`.replace('//', '/');\n    return getBackendSrv().get<T>(storagePath);\n  }\n\n  async list(path: string): Promise<DataFrame | undefined> {\n    let url = 'api/storage/list/';\n    if (path) {\n      url += path + '/';\n    }\n    const rsp = await getBackendSrv().get<DataFrameJSON>(url);\n    if (rsp?.data) {\n      const f = dataFrameFromJSON(rsp);\n      for (const field of f.fields) {\n        field.display = getDisplayProcessor({ field, theme: config.theme2 });\n      }\n      return f;\n    }\n    return undefined;\n  }\n\n  async createFolder(path: string): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      '/api/storage/createFolder',\n      JSON.stringify({ path })\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFolder(req: { path: string; force: boolean }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      `/api/storage/deleteFolder`,\n      JSON.stringify(req)\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFile(req: { path: string }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(`/api/storage/delete/${req.path}`);\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async delete(req: { isFolder: boolean; path: string }): Promise<{ error?: string }> {\n    return req.isFolder ? this.deleteFolder({ path: req.path, force: true }) : this.deleteFile({ path: req.path });\n  }\n\n  async upload(folder: string, file: File, overwriteExistingFile: boolean): Promise<UploadResponse> {\n    const formData = new FormData();\n    formData.append('folder', folder);\n    formData.append('file', file);\n    formData.append('overwriteExistingFile', String(overwriteExistingFile));\n    const res = await fetch('/api/storage/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    let body = await res.json();\n    if (!body) {\n      body = {};\n    }\n    body.status = res.status;\n    body.statusText = res.statusText;\n    if (res.status !== 200 && !body.err) {\n      body.err = true;\n    }\n    return body;\n  }\n\n  async write(path: string, options: WriteValueRequest): Promise<WriteValueResponse> {\n    return backendSrv.post<WriteValueResponse>(`/api/storage/write/${path}`, options);\n  }\n\n  async getConfig() {\n    return getBackendSrv().get<StorageInfo[]>('/api/storage/config');\n  }\n\n  async getOptions(path: string) {\n    return getBackendSrv().get<ItemOptions>(`/api/storage/options/${path}`);\n  }\n}\n\nexport function filenameAlreadyExists(folderName: string, fileNames: string[]) {\n  const lowerCase = folderName.toLowerCase();\n  const trimmedLowerCase = lowerCase.trim();\n  const existingTrimmedLowerCaseNames = fileNames.map((f) => f.trim().toLowerCase());\n\n  return existingTrimmedLowerCaseNames.includes(trimmedLowerCase);\n}\n\nlet storage: GrafanaStorage | undefined;\n\nexport function getGrafanaStorage() {\n  if (!storage) {\n    storage = new SimpleStorage();\n  }\n  return storage;\n}\n"],"names":["getDefaultCondition","getAlertingValidationMessage","transformations","targets","datasourceSrv","datasource","alertingNotSupported","templateVariablesNotSupported","target","dsRef","ds","DashboardScenePage","match","route","queryParams","history","stateManager","dashboard","isLoading","loadError","routeReloadCounter","PageLoader","getKioskMode","LOCAL_STORAGE_KEY_PREFIX","localStorageKey","dashboardUid","AngularDeprecationNotice","LocalStorageValueProvider","isDismissed","onDismiss","Alert","StorageFolderPage","props","slug","listing","childRoot","pageNav","getPageNavFromSlug","renderListing","item","name","isFolder","isDash","url","navModel","getRootContentNavModel","parts","pageNavs","lastPageNav","AddWidgetModal","styles","getStyles","searchQuery","setSearchQuery","state","widgetsList","filteredWidgetsTypes","Modal","Input","e","CustomScrollbar","plugin","index","VizTypePickerPlugin","id","theme","SaveLibraryPanelModal","panel","folderUid","isUnsavedPrompt","onConfirm","onDiscard","searchString","setSearchString","dashState","searchHits","dash","filteredDashboards","setFilteredDashboards","useDebounce","dashName","saveLibraryPanel","usePanelSave","discardAndClose","title","i","Button","initPanelEditor","sourcePanel","dispatch","discardPanelChanges","getStore","getPanel","updateDuplicateLibraryPanels","modifiedPanel","modifiedSaveModel","skipPanelUpdate","pluginChanged","panelToUpdate","exitPanelEditor","getSourcePanel","shouldDiscardChanges","hasPanelChangedInPanelEdit","panelTypeChanged","updatePanelEditorUIState","uiState","nextState","store","error","UnsavedChangesModal","onSaveSuccess","SaveDashboardButton","DashboardPrompt","setState","original","originalPath","showModal","hideModal","ModalsContext","timeoutId","savedEventUnsub","handleUnload","event","ignoreChanges","hasChanges","onHistoryBlock","location","panelInEdit","search","moveToBlockedLocationAfterReactStateUpdate","current","canSave","fromScript","fromFile","cleanDashboardFromIgnoredChanges","dashData","model","DashboardModel","variable","currentClean","originalClean","currentTimepicker","originalTimepicker","currentJson","originalJson","SnapshotTab","ShowMessage","SupportSnapshotService","StateManagerBase","value","markdownText","maxLen","snapshotText","panelTitle","blob","fileName","k","randomize","snapshot","config","snapshotUpdate","snapshotSize","scene","oldModel","ex","HelpWizard","onClose","service","currentTab","loading","options","showMessage","tabs","hasSupportBundleAccess","Drawer","Stack","TabsBar","t","Tab","Field","Select","ClipboardButton","height","CodeEditor","usePanelLatestData","checkSchema","querySubscription","latestData","setLatestData","lastRev","lastUpdate","data","now","InspectMetadataTab","metadataDatasource","InspectContent","isDataLoading","dataOptions","defaultTab","onDataOptionsChange","setCurrentTab","errors","getErrors","activeTab","formatStats","tab","InspectDataTab","InspectJSONTab","InspectErrorTab","InspectStatsTab","QueryInspector","request","queryCount","requestTime","formatted","PanelInspectorUnconnected","setDataOptions","hasError","metaDs","mapStateToProps","panelState","PanelInspector","PickerRenderer","PickerToRender","PickerLabel","labelOrName","elementId","Tooltip","selectors","SubMenuItems","variables","readOnly","visibleVariables","setVisibleVariables","getPanelPluginWithFallback","panelType","VisualizationButton","isPanelOptionsVisible","isVizPickerOpen","onToggleOpen","onToggleOptionsPane","ButtonGroup","ToolbarButton","ChangeLibraryPanelModal","isLibraryPanel","body","ConfirmModal","PanelLibraryOptionsGroup","isWidget","showingAddPanelModal","setShowingAddPanelModal","changeToPanel","setChangeToPanel","panelFilter","setPanelFilter","onPanelFilterChange","plugins","p","useLibraryPanel","onAddToPanelLibrary","onDismissChangeToPanel","PanelTypeFilter","LibraryPanelsView","AddLibraryPanelModal","VisualizationSelectPane","isWidgetEnabled","tabKey","listMode","setListMode","useLocalStorage","searchRef","onVizChange","pluginChange","onCloseVizPicker","radioOptions","radioOptionsWidgetFlow","FilterInput","RadioButtonGroup","VizTypePicker","VisualizationSuggestions","OptionsPane","onFieldConfigsChange","onPanelOptionsChanged","onPanelConfigChange","instanceState","OptionsPaneOptions","InfoMode","PanelHeaderCorner","markdown","interpolatedMarkdown","markedInterpolatedMarkdown","links","link","idx","infoMode","content","onClick","className","ariaLabel","PanelEditorTableView","width","setOptions","timeSrv","sub","timeData","errorMessage","PanelChrome","innerWidth","innerHeight","PanelRenderer","StateHistory","panelId","onRefresh","items","alertDef","stateHistoryItems","ConfirmButton","UnThemedTestRuleResult","formattedJson","prevState","allNodesExpanded","collapse","expand","dashPanel","payload","testRuleResponse","clearButton","LoadingPlaceholder","openNodes","JSONFormatter","TestRuleResult","UnConnectedAlertTab","prop","prevProps","angularPanelComponent","scope","loader","template","scopeProps","validationMessage","EventBus","alert","hasTransformations","PanelNotSupported","element","EmptyListCTA","mapDispatchToProps","AlertTab","NewRuleFromPanelButton","templating","formValues","ruleFormUrl","PanelAlertTabContent","rules","usePanelCombinedRules","permissions","canCreateRules","RulesTable","PanelAlertTab","otherProps","PanelEditorQueries","dataSource","datasourceSettings","lastUsedDatasource","QueryGroup","PanelEditorTabs","onChangeTab","forceUpdate","useForceUpdate","instrumentedOnChangeTab","eventName","eventSubs","Subscription","renderAlertTab","getCounter","TabContent","AlertTabIndex","TransformationsEditor","ownProps","connector","PanelEditorUnconnected","SaveDashboardDrawer","configKey","mode","initDone","isOnlyPanel","tableViewEnabled","panelSize","DashboardPanel","panelPane","SplitPaneWrapper","size","updateTimeZoneForSession","DashNavTimeControls","editorActions","UnlinkModal","sectionNav","AppChromeUpdate","ToolbarButtonRow","PanelEditor","stylesFactory","paneSpacing","AnnotationPicker","annotation","events","onEnabledChanged","setLoading","onCancel","started","stopped","InlineFieldRow","InlineField","LoadingIndicator","Annotations","annotations","onAnnotationChanged","visibleAnnotations","setVisibleAnnotations","DashboardLinks","useEffectOnce","linkInfo","key","DashboardLinksDashboard","icon","linkElement","sanitize","SubMenuUnConnected","updatedAnnotation","readOnlyVariables","uid","templatingState","SubMenu","UnthemedDashboardPage","tr","liveTimer","scrollElement","templateVarsChangedInUrl","prevUrlParams","urlParams","templateVarChanges","dashboardWatcher","urlEditPanelId","urlViewPanelId","updatedState","updateStatePageNavFromProps","inspectPanelId","inspectPanel","initError","editPanel","viewPanel","updateScrollTop","kioskMode","DashboardLoading","showSubMenu","showToolbar","pageClassName","EntityNotFound","DashNav","DashboardFailed","DashboardGrid","ShareModal","DashboardSettings","GrafanaContext","navIndex","folderNavModel","DashboardPage","DashboardPageProxy","isScenesSupportedRoute","SimpleStorage","path","storagePath","rsp","f","field","res","req","folder","file","overwriteExistingFile","formData","filenameAlreadyExists","folderName","fileNames","trimmedLowerCase","storage","getGrafanaStorage"],"sourceRoot":""}