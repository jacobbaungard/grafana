{"version":3,"file":"alert-rules-drawer-content.1fd9de3b496d077a5f3a.js","mappings":"4PAmBe,SAASA,EAAwB,CAAE,aAAAC,CAAa,EAAU,CACvE,MAAMC,KAAW,eAAY,EACvBC,KAAwB,MAAkC,EAE1D,CAAE,MAAOC,EAAW,QAASC,CAAsB,KAAI,KAAS,IAC7DF,EACJ,eAAe,CACd,IAAKF,EACL,MAAO,kBAAgB,MACzB,CAAC,EACA,KAAMK,GAAUA,EAAOA,EAAK,UAAY,MAAU,EACpD,CAACH,CAAqB,CAAC,EAEpB,CAAE,QAASI,CAAkB,KAAI,KAAS,SAAY,CAC1D,MAAML,KAAS,MAA6B,CAAE,gBAAiB,IAA0B,CAAC,CAAC,CAC7F,EAAG,CAACA,CAAQ,CAAC,EAGPM,KADoB,MAA0B,IAAyB,EAE1E,QAASC,GAAOA,EAAG,MAAM,EACzB,QAASC,GAAMA,EAAE,KAAK,EACtB,OAAQC,GAASA,EAAK,YAAY,KAAW,YAAY,IAAMV,CAAY,EAExEW,EAAUP,GAAyBE,EAEzC,OACE,gCACGK,EACC,gBAAC,IAAkB,CAAC,KAAK,qBAAsB,GAE/C,gCACE,gBAAC,IAA6B,CAAC,UAAAR,CAAA,CAAsB,EACrD,gBAAC,IAAU,CAAC,MAAAI,EAAc,yBAA0B,GAAO,gBAAiB,GAAO,CACrF,CAEJ,CAEJ,C","sources":["webpack://grafana/./public/app/features/alerting/unified/integration/AlertRulesDrawerContent.tsx"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { getDashboardScenePageStateManager } from 'app/features/dashboard-scene/pages/DashboardScenePageStateManager';\nimport { DashboardRoutes, useDispatch } from 'app/types';\n\nimport { RulesTable } from '../components/rules/RulesTable';\nimport { useCombinedRuleNamespaces } from '../hooks/useCombinedRuleNamespaces';\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { Annotation } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nimport LegacyAlertsDeprecationNotice from './LegacyAlertsDeprecationNotice';\n\ninterface Props {\n  dashboardUid: string;\n}\n\nexport default function AlertRulesDrawerContent({ dashboardUid }: Props) {\n  const dispatch = useDispatch();\n  const dashboardStateManager = getDashboardScenePageStateManager();\n\n  const { value: dashboard, loading: loadingDashboardState } = useAsync(() => {\n    return dashboardStateManager\n      .fetchDashboard({\n        uid: dashboardUid,\n        route: DashboardRoutes.Normal,\n      })\n      .then((data) => (data ? data.dashboard : undefined));\n  }, [dashboardStateManager]);\n\n  const { loading: loadingAlertRules } = useAsync(async () => {\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n  }, [dispatch]);\n\n  const grafanaNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const rules = grafanaNamespaces\n    .flatMap((ns) => ns.groups)\n    .flatMap((g) => g.rules)\n    .filter((rule) => rule.annotations[Annotation.dashboardUID] === dashboardUid);\n\n  const loading = loadingDashboardState || loadingAlertRules;\n\n  return (\n    <>\n      {loading ? (\n        <LoadingPlaceholder text=\"Loading alert rules\" />\n      ) : (\n        <>\n          <LegacyAlertsDeprecationNotice dashboard={dashboard} />\n          <RulesTable rules={rules} showNextEvaluationColumn={false} showGroupColumn={false} />\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["AlertRulesDrawerContent","dashboardUid","dispatch","dashboardStateManager","dashboard","loadingDashboardState","data","loadingAlertRules","rules","ns","g","rule","loading"],"sourceRoot":""}